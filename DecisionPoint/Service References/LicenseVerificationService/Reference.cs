//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DecisionPoint.LicenseVerificationService {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LicenseVerificationService.ASCQuerySvcSoap")]
    public interface ASCQuerySvcSoap {
        
        // CODEGEN: Generating message contract since message GetQueryableFieldsRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetQueryableFields", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        DecisionPoint.LicenseVerificationService.GetQueryableFieldsResponse GetQueryableFields(DecisionPoint.LicenseVerificationService.GetQueryableFieldsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetQueryableFields", ReplyAction="*")]
        System.Threading.Tasks.Task<DecisionPoint.LicenseVerificationService.GetQueryableFieldsResponse> GetQueryableFieldsAsync(DecisionPoint.LicenseVerificationService.GetQueryableFieldsRequest request);
        
        // CODEGEN: Generating message contract since message RunQueryRequest has headers
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RunQuery", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        DecisionPoint.LicenseVerificationService.RunQueryResponse RunQuery(DecisionPoint.LicenseVerificationService.RunQueryRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RunQuery", ReplyAction="*")]
        System.Threading.Tasks.Task<DecisionPoint.LicenseVerificationService.RunQueryResponse> RunQueryAsync(DecisionPoint.LicenseVerificationService.RunQueryRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class UserCredentialsSoapHeader : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string userNameField;
        
        private string passwordField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
                this.RaisePropertyChanged("UserName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
                this.RaisePropertyChanged("AnyAttr");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FilterCondition : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string fieldNameField;
        
        private AvailableOperators operatorField;
        
        private string[] operandsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string FieldName {
            get {
                return this.fieldNameField;
            }
            set {
                this.fieldNameField = value;
                this.RaisePropertyChanged("FieldName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public AvailableOperators Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
                this.RaisePropertyChanged("Operator");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public string[] Operands {
            get {
                return this.operandsField;
            }
            set {
                this.operandsField = value;
                this.RaisePropertyChanged("Operands");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum AvailableOperators {
        
        /// <remarks/>
        Equals,
        
        /// <remarks/>
        GreaterThan,
        
        /// <remarks/>
        GreaterThanOrEqualTo,
        
        /// <remarks/>
        LessThan,
        
        /// <remarks/>
        LessThanOrEqualTo,
        
        /// <remarks/>
        NotEqualTo,
        
        /// <remarks/>
        Between,
        
        /// <remarks/>
        Like,
        
        /// <remarks/>
        In,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ValueHelper : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string textField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
                this.RaisePropertyChanged("Text");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FieldHelper : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string fieldNameField;
        
        private string fieldTypeField;
        
        private ValueHelper[] applicableValuesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string FieldName {
            get {
                return this.fieldNameField;
            }
            set {
                this.fieldNameField = value;
                this.RaisePropertyChanged("FieldName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string FieldType {
            get {
                return this.fieldTypeField;
            }
            set {
                this.fieldTypeField = value;
                this.RaisePropertyChanged("FieldType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public ValueHelper[] ApplicableValues {
            get {
                return this.applicableValuesField;
            }
            set {
                this.applicableValuesField = value;
                this.RaisePropertyChanged("ApplicableValues");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetQueryableFields", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetQueryableFieldsRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public DecisionPoint.LicenseVerificationService.UserCredentialsSoapHeader UserCredentialsSoapHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool bGetApplicableValues;
        
        public GetQueryableFieldsRequest() {
        }
        
        public GetQueryableFieldsRequest(DecisionPoint.LicenseVerificationService.UserCredentialsSoapHeader UserCredentialsSoapHeader, bool bGetApplicableValues) {
            this.UserCredentialsSoapHeader = UserCredentialsSoapHeader;
            this.bGetApplicableValues = bGetApplicableValues;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetQueryableFieldsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetQueryableFieldsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public DecisionPoint.LicenseVerificationService.FieldHelper[] GetQueryableFieldsResult;
        
        public GetQueryableFieldsResponse() {
        }
        
        public GetQueryableFieldsResponse(DecisionPoint.LicenseVerificationService.FieldHelper[] GetQueryableFieldsResult) {
            this.GetQueryableFieldsResult = GetQueryableFieldsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RunQuery", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RunQueryRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public DecisionPoint.LicenseVerificationService.UserCredentialsSoapHeader UserCredentialsSoapHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string[] outputFields;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public DecisionPoint.LicenseVerificationService.FilterCondition[] filters;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public bool showDiscipline;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int maxResults;
        
        public RunQueryRequest() {
        }
        
        public RunQueryRequest(DecisionPoint.LicenseVerificationService.UserCredentialsSoapHeader UserCredentialsSoapHeader, string[] outputFields, DecisionPoint.LicenseVerificationService.FilterCondition[] filters, bool showDiscipline, int maxResults) {
            this.UserCredentialsSoapHeader = UserCredentialsSoapHeader;
            this.outputFields = outputFields;
            this.filters = filters;
            this.showDiscipline = showDiscipline;
            this.maxResults = maxResults;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RunQueryResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RunQueryResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Data.DataSet RunQueryResult;
        
        public RunQueryResponse() {
        }
        
        public RunQueryResponse(System.Data.DataSet RunQueryResult) {
            this.RunQueryResult = RunQueryResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ASCQuerySvcSoapChannel : DecisionPoint.LicenseVerificationService.ASCQuerySvcSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ASCQuerySvcSoapClient : System.ServiceModel.ClientBase<DecisionPoint.LicenseVerificationService.ASCQuerySvcSoap>, DecisionPoint.LicenseVerificationService.ASCQuerySvcSoap {
        
        public ASCQuerySvcSoapClient() {
        }
        
        public ASCQuerySvcSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ASCQuerySvcSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ASCQuerySvcSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ASCQuerySvcSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DecisionPoint.LicenseVerificationService.GetQueryableFieldsResponse DecisionPoint.LicenseVerificationService.ASCQuerySvcSoap.GetQueryableFields(DecisionPoint.LicenseVerificationService.GetQueryableFieldsRequest request) {
            return base.Channel.GetQueryableFields(request);
        }
        
        public DecisionPoint.LicenseVerificationService.FieldHelper[] GetQueryableFields(DecisionPoint.LicenseVerificationService.UserCredentialsSoapHeader UserCredentialsSoapHeader, bool bGetApplicableValues) {
            DecisionPoint.LicenseVerificationService.GetQueryableFieldsRequest inValue = new DecisionPoint.LicenseVerificationService.GetQueryableFieldsRequest();
            inValue.UserCredentialsSoapHeader = UserCredentialsSoapHeader;
            inValue.bGetApplicableValues = bGetApplicableValues;
            DecisionPoint.LicenseVerificationService.GetQueryableFieldsResponse retVal = ((DecisionPoint.LicenseVerificationService.ASCQuerySvcSoap)(this)).GetQueryableFields(inValue);
            return retVal.GetQueryableFieldsResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<DecisionPoint.LicenseVerificationService.GetQueryableFieldsResponse> DecisionPoint.LicenseVerificationService.ASCQuerySvcSoap.GetQueryableFieldsAsync(DecisionPoint.LicenseVerificationService.GetQueryableFieldsRequest request) {
            return base.Channel.GetQueryableFieldsAsync(request);
        }
        
        public System.Threading.Tasks.Task<DecisionPoint.LicenseVerificationService.GetQueryableFieldsResponse> GetQueryableFieldsAsync(DecisionPoint.LicenseVerificationService.UserCredentialsSoapHeader UserCredentialsSoapHeader, bool bGetApplicableValues) {
            DecisionPoint.LicenseVerificationService.GetQueryableFieldsRequest inValue = new DecisionPoint.LicenseVerificationService.GetQueryableFieldsRequest();
            inValue.UserCredentialsSoapHeader = UserCredentialsSoapHeader;
            inValue.bGetApplicableValues = bGetApplicableValues;
            return ((DecisionPoint.LicenseVerificationService.ASCQuerySvcSoap)(this)).GetQueryableFieldsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DecisionPoint.LicenseVerificationService.RunQueryResponse DecisionPoint.LicenseVerificationService.ASCQuerySvcSoap.RunQuery(DecisionPoint.LicenseVerificationService.RunQueryRequest request) {
            return base.Channel.RunQuery(request);
        }
        
        public System.Data.DataSet RunQuery(DecisionPoint.LicenseVerificationService.UserCredentialsSoapHeader UserCredentialsSoapHeader, string[] outputFields, DecisionPoint.LicenseVerificationService.FilterCondition[] filters, bool showDiscipline, int maxResults) {
            DecisionPoint.LicenseVerificationService.RunQueryRequest inValue = new DecisionPoint.LicenseVerificationService.RunQueryRequest();
            inValue.UserCredentialsSoapHeader = UserCredentialsSoapHeader;
            inValue.outputFields = outputFields;
            inValue.filters = filters;
            inValue.showDiscipline = showDiscipline;
            inValue.maxResults = maxResults;
            DecisionPoint.LicenseVerificationService.RunQueryResponse retVal = ((DecisionPoint.LicenseVerificationService.ASCQuerySvcSoap)(this)).RunQuery(inValue);
            return retVal.RunQueryResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<DecisionPoint.LicenseVerificationService.RunQueryResponse> DecisionPoint.LicenseVerificationService.ASCQuerySvcSoap.RunQueryAsync(DecisionPoint.LicenseVerificationService.RunQueryRequest request) {
            return base.Channel.RunQueryAsync(request);
        }
        
        public System.Threading.Tasks.Task<DecisionPoint.LicenseVerificationService.RunQueryResponse> RunQueryAsync(DecisionPoint.LicenseVerificationService.UserCredentialsSoapHeader UserCredentialsSoapHeader, string[] outputFields, DecisionPoint.LicenseVerificationService.FilterCondition[] filters, bool showDiscipline, int maxResults) {
            DecisionPoint.LicenseVerificationService.RunQueryRequest inValue = new DecisionPoint.LicenseVerificationService.RunQueryRequest();
            inValue.UserCredentialsSoapHeader = UserCredentialsSoapHeader;
            inValue.outputFields = outputFields;
            inValue.filters = filters;
            inValue.showDiscipline = showDiscipline;
            inValue.maxResults = maxResults;
            return ((DecisionPoint.LicenseVerificationService.ASCQuerySvcSoap)(this)).RunQueryAsync(inValue);
        }
    }
}

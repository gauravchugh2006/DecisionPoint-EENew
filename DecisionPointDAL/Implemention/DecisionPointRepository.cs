// ********************************************************************************************************************************
//                                                  class:DecisionPointRepository
// ********************************************************************************************************************************
//                                     M O D I F I C A T I O N   M I L E S T O N E S
// -------------------------------------------------------------------------------------------------------------------------------
//  Date             |  Created By          | Description 
// --------+-------------------+--------------------------------------------------------------------------------------------------
// October 16, 2013    |Arun Kumar | Bobi S |Sumit Saurav   | This class represents repository for whole application
// *********************************************************************************************************************************

using DecisionPointCAL.Common;
using DecisionPointDAL.Implemention.RepositoryClasses;
using DecisionPointDAL.Implemention.RequestParam;
using DecisionPointDAL.Implemention.ResponseParam;
using DecisionPointDAL.Repository;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Objects;
using System.Data.Objects.SqlClient;
using System.Globalization;
using System.IO;
using System.Linq;



namespace DecisionPointDAL.Implemention
{
    /// <summary>
    /// Class to define database interactions with BAL 
    /// </summary>
    public class DecisionPointRepository : IDecisionPointRepository, IDisposable    
    {
        #region Global Variable

        ICResponseParam objICResponseParam = null;
        string status = Shared.Completed.ToLower(CultureInfo.InvariantCulture);
        string vendor = Shared.Vendor.ToLower(CultureInfo.InvariantCulture);
        string client = Shared.Client.ToLower(CultureInfo.InvariantCulture);
        string ic = Shared.IC.ToLower(CultureInfo.InvariantCulture);
        DateTime currentdate = System.DateTime.Now.Date;
        DateTime defaultdatetime3 = Convert.ToDateTime("1900-01-01 00:00:00.000", CultureInfo.InvariantCulture);
        DateTime defaultdate = Convert.ToDateTime("1/1/1900 12:00:00 AM", System.Globalization.CultureInfo.InvariantCulture);
        MyDashBoardResponseParam objMyDashBoardResponseParam = null;
        UserDashBoardResponseParam objUserDashBoardResponseParam = null;
        List<int> servicesList = null;
        List<int> bgCHeckList = null;
        List<int> vendorTypeList = null;
        IList<string> titlefilters = null;
        IList<string> servicefilters = null;
        IList<int> serviceIds = null;
        IList<string> zipList = null;
        IList<string> stateList = null;
        IList<string> countyList = null;
        IList<string> cityList = null;
        string locationType = string.Empty;
        IList<int> professionalType = null;
        IList<int> funPermissionIds = null;
        List<APIJCRInfo> packageIdsWithStatus = null;
        int? TitleId = 0;
        int userId = 0;
        string userType = string.Empty;
        int parentUserId = 0;
        string subClientUserType = string.Empty;
        string companyId = string.Empty;
        int icTypeStaffTitleId = 0;
        BackGroundCheckMasterRequestParam objBackGroundCheckMasterRequestParam = null;
        #endregion

        #region Global Object
        CoverageAreaRep objCoverageAreaRep = null;
        DecisionPointEntities objDecisionPointEntities = null;
        APIMasterResponseParam objAPIMasterResponseParam = null;
        AdditionalRequirementRep objAdditionalRequirementRep = null;
        private bool _disposing = false;
        #endregion

        #region Public Section

        #region dashboard

        /// <summary>
        ///  This method used for remove the document of particular user [We just update the deleted status of that message in loval database]
        /// </summary>
        /// <param name="Id"></param>
        /// <returns>int if messages is deleted return 1 else return zero</returns
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 5 2013</createdDate>
        public int RemoveDocument(int Id, int type, string companyId)
        {
            int Isupdated = 0;
            List<string> companyIdCol = new List<string>();
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //0 for move communication from staff my communication to staff library page when any admin impersinate the particular staff
                    if (type.Equals(0))
                    {
                        //update the recipient details
                        var query = (from recipient in objDecisionPointEntities.DP_Recipient
                                     where recipient.Id == Id
                                     select recipient).FirstOrDefault();
                        if (query != null)
                        {
                            query.MoveInHistory = true;
                            query.ArchiveDate = DateTime.Now.Date;
                        }
                        //Finally saved the changes in local database
                        Isupdated = objDecisionPointEntities.SaveChanges();
                    }
                    // 1 used for communication withdrawn by admin who create that communcation from global library & 3 used when communcation withdrwan from staging page
                    else if (type.Equals(1) || type.Equals(3))
                    {
                        //update the recipient details
                        var query1 = (from recipient in objDecisionPointEntities.DP_Recipient
                                      where recipient.DocId == Id
                                      select recipient);
                        if (query1 != null && query1.Count() > 0)
                        {
                            foreach (var res in query1)
                            {
                                res.IsActive = false;
                                res.IsDeleted = true;
                                res.Withdrawndate = DateTime.Now.Date;
                                if (string.IsNullOrEmpty(res.WithdrwanBy))
                                {
                                    res.WithdrwanBy = companyId;
                                }
                            }
                        }
                        //set isdeleted false for show that communcation in withdrwan library list for admin
                        var creatorCompanyDetails = (from recipient in objDecisionPointEntities.DP_Recipient
                                                     where recipient.DocId == Id && recipient.Status == Shared.Forward && recipient.DeliveredCompanyId == companyId
                                                     select recipient).FirstOrDefault();
                        if (!object.Equals(creatorCompanyDetails, null))
                        {
                            creatorCompanyDetails.IsDeleted = false;
                        }

                        //set is deleted true in main table also when it withdrwan from staging section
                        var query2 = (from docd in objDecisionPointEntities.DP_DocumentDetails
                                      where docd.Id == Id && docd.CompanyId == companyId
                                      select new { docd }).FirstOrDefault();
                        if (!object.Equals(query2, null))
                        {
                            query2.docd.IsDeleted = true;
                            query2.docd.WithdrawnDate = DateTime.Now.Date;
                        }
                        //Finally saved the changes in local database
                        Isupdated = objDecisionPointEntities.SaveChanges();

                    }
                    //2 used when cmmunication withdrawn from incoming page
                    else if (type.Equals(2))
                    {
                        //update the recipient details
                        var query = (from recipient in objDecisionPointEntities.DP_Recipient
                                     where recipient.Id == Id
                                     select recipient).FirstOrDefault();
                        if (query != null)
                        {
                            query.IsActive = false;
                            query.ArchiveDate = DateTime.Now.Date;
                            query.Withdrawndate = DateTime.Now.Date;
                            query.MoveInHistory = true;

                        }
                        //Finally saved the changes in local database
                        Isupdated = objDecisionPointEntities.SaveChanges();
                    }
                    //4 used for when communication withdrawn from global library page by theuser who not create that communcation but forward it to other users 
                    else if (type.Equals(4))
                    {
                        var userCommDetails = (from recipient in objDecisionPointEntities.DP_Recipient
                                               where recipient.DocId == Id && recipient.DeliveredCompanyId == companyId
                                               select recipient);
                        if (userCommDetails != null && userCommDetails.Count() > 0)
                        {
                            foreach (var res in userCommDetails)
                            {
                                res.IsActive = false;
                                res.IsDeleted = true;
                                res.Withdrawndate = DateTime.Now.Date;
                                if (string.IsNullOrEmpty(res.WithdrwanBy))
                                {
                                    res.WithdrwanBy = companyId;
                                }
                                if (res.UserType.Trim().ToLower() == Shared.Vendor.Trim().ToLower())
                                {
                                    companyIdCol.Add(res.RecipientCompanyid);
                                }
                            }
                        }
                        //set isactive false condition for company who received that particular communication
                        //with drwan communication from all users who received it by particular company
                        var companyCommDetails = (from recipient in objDecisionPointEntities.DP_Recipient
                                                  where recipient.DocId == Id && recipient.RecipientCompanyid == companyId
                                                  select recipient).FirstOrDefault();
                        if (!object.Equals(companyCommDetails, null))
                        {
                            companyCommDetails.IsActive = false;
                            companyCommDetails.Withdrawndate = DateTime.Now.Date;
                            if (string.IsNullOrEmpty(companyCommDetails.WithdrwanBy))
                            {
                                companyCommDetails.WithdrwanBy = companyId;
                            }
                        }
                        //set isdeleted false for showing the communcation in withdrwan library page
                        var creatorCompanyDetails = (from recipient in objDecisionPointEntities.DP_Recipient
                                                     where recipient.DocId == Id && recipient.Status == Shared.Forward && recipient.DeliveredCompanyId == companyId
                                                     select recipient).FirstOrDefault();
                        if (!object.Equals(creatorCompanyDetails, null))
                        {
                            creatorCompanyDetails.IsDeleted = false;
                        }

                        Isupdated = objDecisionPointEntities.SaveChanges();
                    }

                }
                //remove Communication who recived till bottom level
                if (companyIdCol.Count > 0)
                {
                    RemoveCommToBottomLevel(companyIdCol, Id, companyId, 0);
                }
            }
            catch
            {
                throw;
            }
            return Isupdated;
        }
        /// <summary>
        /// used for remove or reactive the communication to bottom hiracry level from the sender company
        /// </summary>
        /// <param name="recipientcompanyIdCol"></param>
        /// <param name="docId"></param>
        /// <param name="companyId"></param>
        /// <param name="type"></param>
        /// <createdby>Bobi</createdby>
        /// <createdate>19 Nov 2014</createdate>
        private void RemoveCommToBottomLevel(List<string> recipientcompanyIdCol, int docId, string companyId, int type)
        {
            try
            {
                List<string> companyIdCol = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    foreach (var item in recipientcompanyIdCol)
                    {
                        companyIdCol = new List<string>();
                        //with drwan communication from all users who received it by particular company
                        var userCommDetails = (from recipient in objDecisionPointEntities.DP_Recipient
                                               where recipient.DocId == docId && recipient.DeliveredCompanyId == item
                                               select recipient);
                        if (userCommDetails != null && userCommDetails.Count() > 0)
                        {
                            foreach (var res in userCommDetails)
                            {
                                //0 call from removedocument method
                                if (type.Equals(0))
                                {
                                    res.IsActive = false;
                                    res.Withdrawndate = DateTime.Now.Date;
                                    res.IsDeleted = true;
                                    if (string.IsNullOrEmpty(res.WithdrwanBy))
                                    {
                                        res.WithdrwanBy = companyId;
                                    }
                                    if (res.UserType.Trim().ToLower() == Shared.Vendor.Trim().ToLower())
                                    {
                                        companyIdCol.Add(res.RecipientCompanyid);
                                    }
                                }
                                else if (type.Equals(1))
                                {
                                    if (!string.IsNullOrEmpty(res.WithdrwanBy))
                                    {
                                        if (res.WithdrwanBy.Equals(companyId))
                                        {
                                            res.IsActive = true;
                                            res.Withdrawndate = DateTime.Now.Date;
                                            res.WithdrwanBy = null;
                                            if (res.UserType.Trim().ToLower() == Shared.Vendor.Trim().ToLower())
                                            {
                                                companyIdCol.Add(res.RecipientCompanyid);
                                            }
                                        }
                                    }
                                }
                                else if (type.Equals(2))
                                {
                                    res.IsDeleted = false;
                                    if (!string.IsNullOrEmpty(res.WithdrwanBy))
                                    {
                                        if (res.WithdrwanBy.Equals(companyId))
                                        {
                                            res.WithdrwanBy = null;
                                        }
                                    }
                                    if (res.UserType.Trim().ToLower() == Shared.Vendor.Trim().ToLower())
                                    {
                                        companyIdCol.Add(res.RecipientCompanyid);
                                    }
                                }

                            }
                        }
                    }
                    objDecisionPointEntities.SaveChanges();
                }
                //remove Communication who recived till bottom level
                if (companyIdCol.Count > 0)
                {
                    RemoveCommToBottomLevel(companyIdCol, docId, companyId, type);
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        ///  This method used for remove the document of particular user [We just update the deleted status of that message in loval database]
        /// </summary>
        /// <param name="Id"></param>
        /// <returns>int if messages is deleted return 1 else return zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 5 2013</createdDate>
        public int ReactiveDocument(int Id, int type, string companyId)
        {
            int Isupdate = 0;
            List<string> activateCommCompId = new List<string>();
            List<string> deletedCommCompId = new List<string>();
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals(1))
                    {
                        //update the recipient details
                        var deactiveCommDetails = (from recipient in objDecisionPointEntities.DP_Recipient
                                                   where recipient.DocId == Id && recipient.WithdrwanBy == companyId
                                                   select recipient);
                        if (deactiveCommDetails != null && deactiveCommDetails.Count() > 0)
                        {
                            foreach (var res in deactiveCommDetails)
                            {
                                res.IsActive = true;
                                res.Withdrawndate = DateTime.Now.Date;
                                res.WithdrwanBy = null;
                            }
                        }
                        //update the recipient details
                        var deletedCommDetails = (from recipient in objDecisionPointEntities.DP_Recipient
                                                  where recipient.DocId == Id
                                                  select recipient);
                        if (deletedCommDetails != null && deletedCommDetails.Count() > 0)
                        {
                            foreach (var res in deletedCommDetails)
                            {
                                res.IsDeleted = false;
                                res.Withdrawndate = DateTime.Now.Date;
                                res.WithdrwanBy = null;
                            }
                        }

                        //move communication to withdrwan items
                        var query2 = (from docd in objDecisionPointEntities.DP_DocumentDetails
                                      where docd.Id == Id
                                      select docd).FirstOrDefault();
                        if (!object.Equals(query2, null))
                        {
                            query2.IsDeleted = false;
                            query2.WithdrawnDate = DateTime.Now.Date;
                        }


                    }
                    else if (type.Equals(2) || type.Equals(4))
                    {
                        //update the recipient details
                        var query = (from recipient in objDecisionPointEntities.DP_Recipient
                                     where recipient.Id == Id
                                     select recipient).FirstOrDefault();
                        if (query != null)
                        {
                            query.IsActive = true;
                            query.IsDeleted = false;
                            query.ArchiveDate = DateTime.Now.Date;
                            query.Withdrawndate = DateTime.Now.Date;
                            query.MoveInHistory = false;
                        }

                    }
                    //3 for reactive from withdrwan library page if communcation not created by login user
                    else if (type.Equals(3))
                    {

                        //update isactive true for those all user for which that login user withdrwan the communcation
                        var deactiveCommDetails = (from recipient in objDecisionPointEntities.DP_Recipient
                                                   where recipient.DocId == Id && (recipient.DeliveredCompanyId == companyId || recipient.RecipientCompanyid == companyId) && recipient.WithdrwanBy == companyId
                                                   select recipient);
                        if (deactiveCommDetails != null && deactiveCommDetails.Count() > 0)
                        {
                            foreach (var res in deactiveCommDetails)
                            {
                                res.IsActive = true;
                                res.Withdrawndate = DateTime.Now.Date;
                                res.WithdrwanBy = null;
                                if (res.UserType.Trim().ToLower() == Shared.Vendor.Trim().ToLower())
                                {
                                    activateCommCompId.Add(res.RecipientCompanyid);
                                }
                            }
                        }
                        //set isdeleted false if there is any communcation is exist in withdrwan item list for any user
                        var deletedCommDetails = (from recipient in objDecisionPointEntities.DP_Recipient
                                                  where recipient.DocId == Id && (recipient.DeliveredCompanyId == companyId || recipient.RecipientCompanyid == companyId)
                                                  select recipient);
                        if (deletedCommDetails != null && deletedCommDetails.Count() > 0)
                        {
                            foreach (var res in deletedCommDetails)
                            {
                                res.IsDeleted = false;
                                if (res.UserType.Trim().ToLower() == Shared.Vendor.Trim().ToLower())
                                {
                                    deletedCommCompId.Add(res.RecipientCompanyid);
                                }
                            }
                        }
                    }
                    else
                    {
                        //- 1 for check that communication is already withdrwn by parent company or not
                        Isupdate = -1;
                    }
                    Isupdate = objDecisionPointEntities.SaveChanges();
                }
                //remove Communication who recived till bottom level
                if (activateCommCompId.Count > 0)
                {
                    RemoveCommToBottomLevel(activateCommCompId, Id, companyId, 1);
                }
                if (deletedCommCompId.Count > 0)
                {
                    RemoveCommToBottomLevel(deletedCommCompId, Id, companyId, 2);
                }
                //Finally saved the changes in local database
                return Isupdate;
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// used to get communication details
        /// </summary>
        /// <param name="UserId">int</param>
        /// <param name="type">string</param>
        /// <returns>IEnumerable<UserDashBoardResponseParam></returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 6 2013</createdDate>
        public IEnumerable<UserDashBoardResponseParam> GetDocumentsDetails(int UserId, string type, string companyId, string filterValues)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    IEnumerable<UserDashBoardResponseParam> finalist = null;
                    //get incoming documents 
                    if (type.Equals(Shared.Incomming))
                    {
                        finalist = GetIncomingCommunication(UserId, companyId);

                    }
                    //get my communication documents
                    else if (type.Equals(Shared.MyCommunication))
                    {

                        finalist = GetMyCommunication(UserId, companyId);
                        //get communication details after apply filters
                        finalist = Getfinallistofcommunication(finalist, filterValues).ToList();

                    }
                    else if (type.Equals(Shared.StaffCommunication))
                    {
                        finalist = GetStaffCommunication(UserId, companyId);
                        //get communication details after apply filters
                        finalist = Getfinallistofcommunication(finalist, filterValues).ToList();
                    }

                    return finalist;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used For get incomming from Database as Per particular Company
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns>retrun the messages/document/courses details in ienumberable form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 11 2013</createdDate>
        private IEnumerable<UserDashBoardResponseParam> GetIncomingCommunication(int UserId, string companyId)
        {
            try
            {
                var query = (from documents in objDecisionPointEntities.DP_DocumentDetails
                             join recipient in objDecisionPointEntities.DP_Recipient
                             on documents.Id equals recipient.DocId
                             //join vendormapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                             //on recipient.DeliveredUserId equals vendormapping.VendorId
                             join user in objDecisionPointEntities.DP_User
                             on recipient.DeliveredUserId equals user.Id
                             join profileuser in objDecisionPointEntities.DP_Profile
                             on user.Id equals profileuser.UserId
                             //join flow in objDecisionPointEntities.DP_FlowMapping
                             //on profileuser.UserId equals flow.UserId
                             where recipient.RecipientCompanyid == companyId
                             && documents.IsDeleted == false && recipient.IsActive == true && recipient.MoveInHistory == false
                             && profileuser.UserType != Shared.IC
                                 //&& vendormapping.CompanyId == CompanyId
                             && recipient.DeliveredCompanyId != companyId && (recipient.RecipeintDueDate == defaultdate ||
                             recipient.CommReceivedDate <= currentdate
                                 //SqlFunctions.DateDiff("DAY", currentdate, recipient.RecipeintDueDate) < 30
                             )
                             orderby documents.Title
                             select new UserDashBoardResponseParam
                             {
                                 DueDate = recipient.RecipeintDueDate,
                                 reqDocType = documents.DocType == null ? string.Empty : documents.DocType,
                                 DocTitle = documents.Title == null ? string.Empty : documents.Title,
                                 Docfrom = profileuser.Firstname + Shared.SingleSpace + profileuser.LastName,
                                 tableId = recipient == null ? 0 : (int)recipient.Id,
                                 deliveredUserId = recipient == null ? 0 : (int)recipient.DeliveredUserId,
                                 reference = documents.Reference,
                                 CompanyId = user.CompanyId,
                                 docSeqno = recipient.DocSeqNo,
                                 DocId = documents.Id,
                                 effectiveDate = documents.EffectiveDate,
                                 reqnewhire = (bool)documents.ReqNewVendor == null ? false : (bool)documents.ReqNewVendor,
                                 retake = documents.Retake == null ? string.Empty : documents.Retake,
                                 introduction = documents.Introduction,
                                 hourofcredit = documents.HOC == null ? string.Empty : documents.HOC,
                                 policyNo = documents.PolicyNo == null ? string.Empty : documents.PolicyNo,
                                 versionno = (int)(documents.VersionNo == null ? 0 : documents.VersionNo),
                                 Group = documents.DocGroup == null ? string.Empty : documents.DocGroup
                             }).Distinct().OrderBy(c => c.DocTitle).ThenBy(n => n.docSeqno).ToList();
                return query;

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used For get staff communication from Database as Per particular Company
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns>retrun the messages/document/courses details in ienumberable form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 11 2013</createdDate>
        private IEnumerable<UserDashBoardResponseParam> GetStaffCommunication(int UserId, string companyId)
        {
            try
            {
                var query = objDecisionPointEntities.DP_DocumentDetails
                                .Join(objDecisionPointEntities.DP_Recipient.Where(w => w.RecipientUserId == UserId
                                     && w.MoveInHistory == false && w.RecipientCompanyid == companyId
                                    && w.IsActive == true
                                    && (w.RecipeintDueDate == defaultdate ||
                                    w.CommReceivedDate <= currentdate
                                    //SqlFunctions.DateDiff("DAY", currentdate, w.RecipeintDueDate) <= 30 || 
                                    //SqlFunctions.DateDiff("DAY", currentdate, w.RecipeintDueDate) <= 31
                                    )
                                    ), dd => dd.Id, r => r.DocId, (dd, r) => new { dd, r }).Where(xx => xx.dd.IsDeleted == false)
                                .Join(objDecisionPointEntities.DP_Profile, dd => dd.dd.UserId, pr => pr.UserId, (dd, pr) => new { dd, pr })
                                .Join(objDecisionPointEntities.DP_User, pr => pr.pr.UserId, u => u.Id, (pr, u) => new UserDashBoardResponseParam
                                {
                                    DueDate = pr.dd.r.RecipeintDueDate,
                                    reqDocType = pr.dd.dd.DocType == null ? string.Empty : pr.dd.dd.DocType,
                                    DocTitle = pr.dd.dd.Title == null ? string.Empty : pr.dd.dd.Title,
                                    Docfrom = pr.pr.Firstname == null ? string.Empty : pr.pr.Firstname + "" + pr.pr.LastName == null ? string.Empty : pr.pr.LastName,
                                    DocId = pr.dd.dd.Id,
                                    deliveredUserId = pr.dd.r == null ? 0 : (int)pr.dd.r.DeliveredUserId,
                                    reference = pr.dd.dd.Reference,
                                    tableId = pr.dd.r.Id,
                                    effectiveDate = pr.dd.dd.EffectiveDate,
                                    hourofcredit = pr.dd.dd.HOC == null ? string.Empty : pr.dd.dd.HOC,
                                    policyNo = pr.dd.dd.PolicyNo == null ? string.Empty : pr.dd.dd.PolicyNo,
                                    CompanyId = pr.dd.dd.CompanyId == null ? string.Empty : pr.dd.dd.CompanyId,
                                    versionno = (int)(pr.dd.dd.VersionNo == null ? 0 : pr.dd.dd.VersionNo),
                                    Group = pr.dd.dd.DocGroup == null ? string.Empty : pr.dd.dd.DocGroup,
                                    CreatorCompanyid = pr.dd.r.DeliveredCompanyId == null ? string.Empty : pr.dd.r.DeliveredCompanyId
                                }).Distinct().ToList();
                return query;

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used For get my communication from Database as Per particular Company
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns>retrun the messages/document/courses details in ienumberable form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 11 2013</createdDate>
        private IEnumerable<UserDashBoardResponseParam> GetMyCommunication(int UserId, string companyId)
        {
            try
            {

                var query = (from documents in objDecisionPointEntities.DP_DocumentDetails
                             join recipient in objDecisionPointEntities.DP_Recipient
                             on documents.Id equals recipient.DocId
                             join user in objDecisionPointEntities.DP_User
                             on recipient.DeliveredUserId equals user.Id
                             join profileuser in objDecisionPointEntities.DP_Profile
                             on user.Id equals profileuser.UserId
                             where recipient.RecipientUserId == UserId && recipient.MoveInHistory == false && documents.IsDeleted == false && recipient.IsActive == true
                             && recipient.DeliveredCompanyId == companyId && (recipient.RecipeintDueDate == defaultdate ||
                             recipient.CommReceivedDate <= currentdate
                                 //  SqlFunctions.DateDiff("DAY", currentdate, recipient.RecipeintDueDate) <= 30 ||
                                 //SqlFunctions.DateDiff("DAY", currentdate, recipient.RecipeintDueDate) <= 31
                             )
                             orderby documents.Title
                             select new UserDashBoardResponseParam
                             {
                                 DueDate = recipient.RecipeintDueDate,
                                 reqDocType = documents.DocType == null ? string.Empty : documents.DocType,
                                 DocTitle = documents.Title == null ? string.Empty : documents.Title,
                                 Docfrom = profileuser.Firstname + Shared.SingleSpace + profileuser.LastName,
                                 tableId = recipient == null ? 0 : (int)recipient.Id,
                                 deliveredUserId = recipient == null ? 0 : (int)recipient.DeliveredUserId,
                                 reference = documents.Reference,
                                 CompanyId = user.CompanyId,
                                 docSeqno = recipient.DocSeqNo,
                                 DocId = documents.Id,
                                 effectiveDate = documents.EffectiveDate,
                                 reqnewhire = (bool)documents.ReqNewVendor == null ? false : (bool)documents.ReqNewVendor,
                                 retake = documents.Retake == null ? string.Empty : documents.Retake,
                                 introduction = documents.Introduction,
                                 hourofcredit = documents.HOC == null ? string.Empty : documents.HOC,
                                 policyNo = documents.PolicyNo == null ? string.Empty : documents.PolicyNo,
                                 versionno = (int)(documents.VersionNo == null ? 0 : documents.VersionNo),
                                 Group = documents.DocGroup == null ? string.Empty : documents.DocGroup
                             }).Distinct().OrderBy(c => c.DocTitle).ThenBy(n => n.docSeqno).ToList();
                return query;

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used For get my communication from Database as Per particular Company
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns>retrun the messages/document/courses details in ienumberable form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 11 2013</createdDate>
        private IEnumerable<UserDashBoardResponseParam> Getfinallistofcommunication(IEnumerable<UserDashBoardResponseParam> finalist, string filterValues)
        {
            try
            {
                List<string> mainvalues = new List<string>();
                mainvalues = filterValues.Split(char.Parse(Shared.Comma)).ToList();
                if (mainvalues.Count >= 2)
                {
                    if (!string.IsNullOrEmpty(mainvalues[0].Split(char.Parse(Shared.Colon))[0]))
                    {
                        List<string> groupcol = new List<string>();
                        groupcol = mainvalues[0].Split(char.Parse(Shared.Colon))[0].Split(char.Parse(Shared.Astrik)).ToList();
                        if (groupcol != null && groupcol.Count > 0)
                        {
                            finalist = (from list in finalist
                                        where groupcol.Contains(list.Group)
                                        select list).ToList();
                        }
                    }
                    if (!string.IsNullOrEmpty(mainvalues[1].Split(char.Parse(Shared.Colon))[0]) && !mainvalues[1].Split(char.Parse(Shared.Colon))[0].Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.Category.Trim().ToUpper(CultureInfo.InvariantCulture)))
                    {
                        string category = mainvalues[1].Split(char.Parse(Shared.Colon))[0];
                        finalist = (from list in finalist
                                    where list.reference == category
                                    select list).ToList();

                    }
                    if (!string.IsNullOrEmpty(mainvalues[2].Split(char.Parse(Shared.Colon))[0]) && !mainvalues[2].Split(char.Parse(Shared.Colon))[0].Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.SubCategory.Trim().ToUpper(CultureInfo.InvariantCulture)))
                    {
                        string subcategory = mainvalues[2].Split(char.Parse(Shared.Colon))[0];
                        finalist = (from list in finalist
                                    where list.reqDocType == subcategory
                                    select list).ToList();

                    }
                    //chjeck if search is apply
                    if (mainvalues.Count > 3)
                    {
                        if (!string.IsNullOrEmpty(mainvalues[3].Split(char.Parse(Shared.Colon))[1]))
                        {
                            if (mainvalues[3].Split(char.Parse(Shared.Colon))[1].Equals("serach"))
                            {
                                if (!string.IsNullOrEmpty(mainvalues[3].Split(char.Parse(Shared.Colon))[0]))
                                {
                                    string title = mainvalues[3].Split(char.Parse(Shared.Colon))[0];
                                    finalist = finalist.Where(x => x.title.ToUpper().Contains(title.ToUpper())).ToList();
                                }
                            }

                        }
                    }
                }

                return finalist;
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used For get History from Database as Per particular User
        /// </summary>
        /// <param name="userId"></param>
        /// <returns>retrun the messages/document/courses details in ienumberable form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 11 2013</createdDate>
        public IEnumerable<UserDashBoardResponseParam> GetHistoryDetails(int userId, string filterValues, string companyId, string type)
        {
            try
            {
                IEnumerable<UserDashBoardResponseParam> finalist = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals(Shared.Staff))
                    {
                        var query = (from historydetails in objDecisionPointEntities.DP_Recipient
                                     join document in objDecisionPointEntities.DP_DocumentDetails
                                     on historydetails.DocId equals document.Id into doctemp
                                     from doc in doctemp.DefaultIfEmpty()
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on historydetails.DeliveredUserId equals profile.UserId
                                     join user in objDecisionPointEntities.DP_User
                                     on profile.UserId equals user.Id
                                     where (historydetails.MoveInHistory == true || historydetails.CommReceivedDate > currentdate
                                         //|| SqlFunctions.DateDiff("DAY", currentdate, historydetails.RecipeintDueDate) > 29
                                         //|| SqlFunctions.DateDiff("DAY", currentdate, historydetails.RecipeintDueDate) > 30
                                    )
                                     && doc.IsDeleted == false && historydetails.IsActive == true &&
                                     historydetails.RecipientUserId == userId
                                     select new UserDashBoardResponseParam
                                     {
                                         reqDocType = historydetails.Type,
                                         title = doc.Title == null ? string.Empty : doc.Title,
                                         commFromPersonName = profile.Firstname,
                                         commFromComapnyName = profile.BusinessName,
                                         receviedDate = historydetails.CommReceivedDate,
                                         accecpted = historydetails.Accepted,
                                         assesmentStatus = historydetails.Assessmentresult,
                                         docTypeId = historydetails.DocId == null ? 0 : historydetails.DocId,
                                         tableId = historydetails.Id,
                                         reference = doc.Reference == null ? string.Empty : doc.Reference,
                                         timeSpend = historydetails.Timespend,
                                         deliveredUserId = (int)historydetails.DeliveredUserId,
                                         CompanyId = user.CompanyId,
                                         docSeqno = historydetails.DocSeqNo,
                                         policyNo = doc.PolicyNo,
                                         completeDate = historydetails.CompletedDate,
                                         versionno = (int)doc.VersionNo,
                                         effectiveDate = doc.EffectiveDate,
                                         archiveDate = historydetails.ArchiveDate,
                                         hourofcredit = doc.HOC == null ? string.Empty : doc.HOC,
                                         MoveInHistory = (bool)(historydetails.MoveInHistory == null ? false : historydetails.MoveInHistory),
                                         Group = doc.DocGroup == null ? string.Empty : doc.DocGroup,
                                         CreatorCompanyid = doc.CompanyId == null ? string.Empty : doc.CompanyId,
                                         status = historydetails.Status == null ? string.Empty : historydetails.Status
                                     }).Distinct().OrderBy(x => x.reqDocType).ToList();
                        finalist = query;
                    }
                    else
                    {
                        var query = (from historydetails in objDecisionPointEntities.DP_Recipient
                                     join document in objDecisionPointEntities.DP_DocumentDetails
                                     on historydetails.DocId equals document.Id into doctemp
                                     from doc in doctemp.DefaultIfEmpty()
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on historydetails.DeliveredUserId equals profile.UserId
                                     join user in objDecisionPointEntities.DP_User
                                     on profile.UserId equals user.Id
                                     where
                                    (historydetails.MoveInHistory == true ||
                                         //SqlFunctions.DateDiff("DAY", currentdate, historydetails.RecipeintDueDate) > 30 ||
                                    historydetails.CommReceivedDate > currentdate
                                    )
                                     && doc.IsDeleted == false &&
                                     historydetails.RecipientUserId == userId
                                     && historydetails.DeliveredCompanyId == companyId
                                     && historydetails.Status != Shared.Forward
                                     select new UserDashBoardResponseParam
                                     {
                                         reqDocType = historydetails.Type,
                                         title = doc.Title == null ? string.Empty : doc.Title,
                                         commFromPersonName = profile.Firstname,
                                         commFromComapnyName = profile.BusinessName,
                                         receviedDate = historydetails.SentDate,
                                         accecpted = historydetails.Accepted,
                                         assesmentStatus = historydetails.Assessmentresult,
                                         docTypeId = historydetails.DocId == null ? 0 : historydetails.DocId,
                                         tableId = historydetails.Id,
                                         reference = doc.Reference == null ? string.Empty : doc.Reference,
                                         timeSpend = historydetails.Timespend,
                                         deliveredUserId = (int)historydetails.DeliveredUserId,
                                         CompanyId = user.CompanyId,
                                         docSeqno = historydetails.DocSeqNo,
                                         policyNo = doc.PolicyNo,
                                         completeDate = historydetails.CompletedDate,
                                         versionno = (int)doc.VersionNo,
                                         effectiveDate = doc.EffectiveDate,
                                         archiveDate = historydetails.ArchiveDate,
                                         hourofcredit = doc.HOC == null ? string.Empty : doc.HOC,
                                         MoveInHistory = (bool)(historydetails.MoveInHistory == null ? false : historydetails.MoveInHistory),
                                         Group = doc.DocGroup == null ? string.Empty : doc.DocGroup,
                                         CreatorCompanyid = doc.CompanyId == null ? string.Empty : doc.CompanyId,
                                         status = historydetails.Status == null ? string.Empty : historydetails.Status
                                     }).Distinct().OrderBy(x => x.reqDocType).ToList();
                        finalist = query;
                    }
                    //get communication details after apply filters
                    finalist = Getfinallistofcommunication(finalist, filterValues).ToList();

                    return finalist;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used For get History from Database as Per particular company
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns>retrun the messages/document/courses details in ienumberable form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>may 10 2014</createdDate>
        public IEnumerable<UserDashBoardResponseParam> GetGlobalLibrary(string CompanyId, string filtervalues)
        {
            IEnumerable<UserDashBoardResponseParam> finalist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    finalist = (from historydetails in objDecisionPointEntities.DP_Recipient
                                join document in objDecisionPointEntities.DP_DocumentDetails
                                on historydetails.DocId equals document.Id into doctemp
                                from doc in doctemp.DefaultIfEmpty()
                                join profile in objDecisionPointEntities.DP_Profile
                                on historydetails.DeliveredUserId equals profile.UserId
                                join user in objDecisionPointEntities.DP_User
                                on profile.UserId equals user.Id
                                //join performance in objDecisionPointEntities.DP_Performance
                                //on new { a = doc.Id, b = (int)(historydetails.DeliveredUserId == null ? 0 : historydetails.DeliveredUserId) } equals new { a = performance.DocID, b = performance.DeliveredUserID }
                                //    //on doc.Id equals performance.DocID 
                                //into docperfor
                                //from docp in docperfor.DefaultIfEmpty()
                                where doc.IsDeleted == false && historydetails.IsActive == true
                                &&
                                ((historydetails.DeliveredCompanyId == CompanyId && historydetails.Status == Shared.Forward) ||
                                 (historydetails.RecipientCompanyid == CompanyId && (historydetails.UserType == vendor || historydetails.UserType == client)
                                 && (
                                 historydetails.CommReceivedDate > currentdate
                                    //SqlFunctions.DateDiff("DAY", currentdate, historydetails.RecipeintDueDate) > 30
                                  )
                                  ))
                                select new UserDashBoardResponseParam
                                {
                                    reqDocType = historydetails.Type,
                                    title = doc.Title == null ? string.Empty : doc.Title,
                                    commFromPersonName = profile.Firstname,
                                    commFromComapnyName = profile.BusinessName,
                                    receviedDate = historydetails.SentDate,
                                    accecpted = historydetails.Accepted,
                                    assesmentStatus = historydetails.Assessmentresult,
                                    docTypeId = historydetails.DocId == null ? 0 : historydetails.DocId,
                                    reference = doc.Reference == null ? string.Empty : doc.Reference,
                                    timeSpend = historydetails.Timespend,
                                    tableId = historydetails.Id,
                                    deliveredUserId = (int)historydetails.DeliveredUserId,
                                    CompanyId = user.CompanyId,
                                    docSeqno = historydetails.DocSeqNo,
                                    policyNo = doc.PolicyNo,
                                    completeDate = historydetails.CompletedDate,
                                    versionno = (int)doc.VersionNo,
                                    effectiveDate = doc.EffectiveDate,
                                    archiveDate = historydetails.ArchiveDate,
                                    recipientUserId = (int)(historydetails.RecipientUserId == null ? 0 : historydetails.RecipientUserId),
                                    RecepientCompanyId = historydetails.RecipientCompanyid,
                                    UserType = historydetails.UserType,
                                    hourofcredit = doc.HOC == null ? string.Empty : doc.HOC,
                                    NoOfStaff = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == historydetails.DocId && x.DeliveredCompanyId == CompanyId && x.UserType == Shared.Staff && x.Status != Shared.Forward).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),
                                    NoOfCompStaff = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == historydetails.DocId && x.DeliveredCompanyId == CompanyId && x.UserType == Shared.Staff && x.Status == status && x.Status != Shared.Forward).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),
                                    NoOfIc = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == historydetails.DocId && x.DeliveredCompanyId == CompanyId && x.UserType == ic && x.Status != Shared.Forward).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),
                                    NoOfCompIc = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == historydetails.DocId && x.DeliveredCompanyId == CompanyId && x.UserType == ic && x.Status != Shared.Forward && x.Status == status).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),
                                    //NoOfVendor = (float)((docp.TotalDocReceivedbyVendor == null ? 0 : docp.TotalDocReceivedbyVendor) - ((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == historydetails.DocId && x.UserType == vendor).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == false), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count())),
                                    //NoOfCompVendor = (float)(docp.TotalDocCompletebyVendor == null ? 0 : docp.TotalDocCompletebyVendor),
                                    Group = doc.DocGroup == null ? string.Empty : doc.DocGroup,
                                    CreatorCompanyid = doc.CompanyId == null ? string.Empty : doc.CompanyId
                                }).Distinct().OrderBy(x => x.reqDocType).ToList();

                    finalist = GetVendorPerformanceAsPerDocument(finalist, CompanyId).ToList();
                    //get communication details after apply filters
                    finalist = Getfinallistofcommunication(finalist, filtervalues).ToList();
                    return finalist;
                }
            }
            catch
            {
                throw;
            }
        }

        private IEnumerable<UserDashBoardResponseParam> GetVendorPerformanceAsPerDocument(IEnumerable<UserDashBoardResponseParam> finalist, string CompanyId)
        {
            try
            {

                //get the vendor list who received the communication
                int count = 0;
                foreach (var documents in finalist)
                {
                    int totNoofDocumentReceived = 0;
                    int totNoofDocumentComplete = 0;
                    int vendorPer = 0;
                    //get the vendor list who received the communication
                    var vendorLIst = (from list in objDecisionPointEntities.DP_Recipient
                                      where list.UserType == vendor && list.DocId == documents.docTypeId && list.DeliveredCompanyId == CompanyId
                                      select list).Distinct().ToList();
                    //apply loop on every vendor for get the performance of that communication
                    foreach (var item in vendorLIst)
                    {
                        var listOfStaff = objDecisionPointEntities.DP_CompanyStaffMapping.Join(objDecisionPointEntities.DP_User.Where(x => x.IsActive == true && x.IsRegistered == true), a => a.StaffId, b => b.Id, (a, b) => new { a, b }).Where(y => y.a.CompanyId == item.RecipientCompanyid && y.a.Invitationstatus == true &&
                                               y.a.IsActive == true).Select(s => new { s }).ToList();


                        //var aa = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails, a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => w.a.Status == Shared.Completed && w.a.IsActive == false && w.a.DocId == documents.docTypeId && w.a.DeliveredCompanyId == item.RecipientCompanyid).Select(x => new { x.b.Id }).Distinct().ToList();
                        //if (aa.Count > 0)
                        //{
                        //    withdrawnCompletedCount++;
                        //}


                        #region Document received by staff and complete
                        for (int iCount = 0; iCount < listOfStaff.Count; iCount++)
                        {
                            int? staffId = listOfStaff[iCount].s.a.StaffId;

                            var NoofDocumentReceived = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails, a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => w.a.RecipientUserId == staffId && w.a.DeliveredCompanyId == item.RecipientCompanyid && w.a.Status != Shared.Forward && w.a.DocId == item.DocId).Select(x => new { x }).Distinct().ToList();

                            var noofDocumentComplete = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails, a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => (w.a.RecipientUserId == staffId && w.a.DeliveredCompanyId == item.RecipientCompanyid && w.a.Status == status && w.a.DocId == item.DocId)).Select(x => new { x }).Distinct().ToList();

                            totNoofDocumentReceived += NoofDocumentReceived.Count();
                            totNoofDocumentComplete += noofDocumentComplete.Count();


                        }
                        #endregion
                    }
                    if (totNoofDocumentReceived > 0 && totNoofDocumentComplete > 0)
                    {
                        vendorPer = (totNoofDocumentComplete) * 100 / totNoofDocumentReceived;
                    }
                    finalist.ToList()[count].NoOfVendor = vendorLIst.Count;
                    finalist.ToList()[count].NoOfCompVendor = vendorPer;

                    count++;
                }
                return finalist;
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Used For get withdrawn item from Database as Per particular User
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns>retrun the messages/document/courses details in ienumberable form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 11 2013</createdDate>
        public IEnumerable<UserDashBoardResponseParam> GetWithdrawnHistoryDetails(int UserId, string type, string companyId, string filtervalues)
        {
            IEnumerable<UserDashBoardResponseParam> finalist = null;
            try
            {

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals(Shared.MyCommunication))
                    {
                        var query = (from historydetails in objDecisionPointEntities.DP_Recipient
                                     join document in objDecisionPointEntities.DP_DocumentDetails
                                      on historydetails.DocId equals document.Id into doctemp
                                     from doc in doctemp.DefaultIfEmpty()
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on historydetails.DeliveredUserId equals profile.UserId
                                     join user in objDecisionPointEntities.DP_User
                                     on profile.UserId equals user.Id
                                     //join performance in objDecisionPointEntities.DP_Performance
                                     //    //on doc.Id equals performance.DocID into docperfor
                                     // on new { a = doc.Id, b = (int)(historydetails.DeliveredUserId == null ? 0 : historydetails.DeliveredUserId) } equals new { a = performance.DocID, b = performance.DeliveredUserID }
                                     // into docperfor
                                     //from docp in docperfor.DefaultIfEmpty()
                                     where historydetails.IsActive == false
                                     && historydetails.IsDeleted == false
                                     && historydetails.RecipientCompanyid == companyId
                                     && historydetails.DeliveredCompanyId == companyId && historydetails.Status == Shared.Forward
                                     select new UserDashBoardResponseParam
                                     {
                                         reqDocType = historydetails.Type,
                                         title = doc.Title == null ? string.Empty : doc.Title,
                                         commFromPersonName = profile.Firstname,
                                         commFromComapnyName = profile.BusinessName,
                                         receviedDate = historydetails.CommReceivedDate,
                                         accecpted = historydetails.Accepted,
                                         assesmentStatus = historydetails.Assessmentresult,
                                         docTypeId = historydetails.DocId == null ? 0 : historydetails.DocId,
                                         tableId = historydetails.Id,
                                         reference = doc.Reference,
                                         timeSpend = historydetails.Timespend,
                                         deliveredUserId = (int)historydetails.DeliveredUserId,
                                         CompanyId = user.CompanyId,
                                         docSeqno = historydetails.DocSeqNo,
                                         policyNo = doc.PolicyNo,
                                         completeDate = historydetails.CompletedDate,
                                         versionno = (int)doc.VersionNo,
                                         effectiveDate = doc.EffectiveDate,
                                         archiveDate = historydetails.Withdrawndate,
                                         Group = doc.DocGroup == null ? string.Empty : doc.DocGroup,
                                         NoOfStaff = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == historydetails.DocId && x.DeliveredCompanyId == companyId && x.UserType == Shared.Staff && x.Status != Shared.Forward).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),
                                         NoOfCompStaff = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == historydetails.DocId && x.DeliveredCompanyId == companyId && x.UserType == Shared.Staff && x.Status == status && x.Status != Shared.Forward).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),
                                         NoOfIc = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == historydetails.DocId && x.DeliveredCompanyId == companyId && x.UserType == ic && x.Status != Shared.Forward).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),
                                         NoOfCompIc = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == historydetails.DocId && x.DeliveredCompanyId == companyId && x.UserType == ic && x.Status != Shared.Forward && x.Status == status).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),
                                         CreatorCompanyid = doc.CompanyId == null ? string.Empty : doc.CompanyId
                                     }).Distinct().OrderBy(x => x.reqDocType).ToList();
                        finalist = query;
                    }
                    else if (type.Equals(Shared.Incomming))
                    {
                        var query = (from documents in objDecisionPointEntities.DP_DocumentDetails
                                     join recipient in objDecisionPointEntities.DP_Recipient
                                     on documents.Id equals recipient.DocId
                                     join user in objDecisionPointEntities.DP_User
                                     on recipient.DeliveredUserId equals user.Id
                                     join profileuser in objDecisionPointEntities.DP_Profile
                                     on user.Id equals profileuser.UserId
                                     //join performance in objDecisionPointEntities.DP_Performance
                                     //on new { a = documents.Id, b = (int)(recipient.DeliveredUserId == null ? 0 : recipient.DeliveredUserId) } equals new { a = performance.DocID, b = performance.DeliveredUserID }
                                     // into docperfor
                                     //from docp in docperfor.DefaultIfEmpty()
                                     where recipient.RecipientCompanyid == companyId && recipient.IsActive == false
                                     && recipient.IsDeleted == false
                                     && profileuser.UserType != Shared.IC
                                     && recipient.DeliveredCompanyId != companyId && recipient.MoveInHistory == true
                                     orderby documents.Title
                                     select new UserDashBoardResponseParam
                                     {
                                         reqDocType = recipient.Type,
                                         title = documents.Title == null ? string.Empty : documents.Title,
                                         commFromPersonName = profileuser.Firstname,
                                         commFromComapnyName = profileuser.BusinessName,
                                         receviedDate = recipient.CommReceivedDate,
                                         accecpted = recipient.Accepted,
                                         assesmentStatus = recipient.Assessmentresult,
                                         docTypeId = recipient.DocId == null ? 0 : recipient.DocId,
                                         tableId = recipient.Id,
                                         reference = documents.Reference,
                                         timeSpend = recipient.Timespend,
                                         deliveredUserId = (int)recipient.DeliveredUserId,
                                         CompanyId = user.CompanyId,
                                         docSeqno = recipient.DocSeqNo,
                                         policyNo = documents.PolicyNo,
                                         completeDate = recipient.CompletedDate,
                                         versionno = (int)documents.VersionNo,
                                         effectiveDate = documents.EffectiveDate,
                                         archiveDate = recipient.Withdrawndate,
                                         Group = documents.DocGroup == null ? string.Empty : documents.DocGroup,
                                         NoOfStaff = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == recipient.DocId && x.DeliveredCompanyId == companyId && x.UserType == Shared.Staff && x.Status != Shared.Forward).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),
                                         NoOfCompStaff = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == recipient.DocId && x.DeliveredCompanyId == companyId && x.UserType == Shared.Staff && x.Status == status && x.Status != Shared.Forward).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),
                                         NoOfIc = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == recipient.DocId && x.DeliveredCompanyId == companyId && x.UserType == ic && x.Status != Shared.Forward).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),
                                         NoOfCompIc = (float)((objDecisionPointEntities.DP_Recipient.Where(x => x.DocId == recipient.DocId && x.DeliveredCompanyId == companyId && x.UserType == ic && x.Status != Shared.Forward && x.Status == status).Join(objDecisionPointEntities.DP_User.Where(u => u.IsRegistered == true), a => a.RecipientUserId, b => b.Id, (a, b) => new { a, b })).Count()),

                                         CreatorCompanyid = documents.CompanyId == null ? string.Empty : documents.CompanyId
                                     }).Distinct().OrderBy(x => x.reqDocType).ToList();

                        finalist = query;
                    }
                    finalist = GetVendorPerformanceAsPerDocument(finalist, companyId).ToList();
                    //get communication details after apply filters
                    finalist = Getfinallistofcommunication(finalist, filtervalues).ToList();
                    return finalist;
                }
            }
            catch
            {
                throw;
            }
        }

        ///// <summary>
        ///// get roles from role master
        ///// </summary>
        ///// <returns></returns>
        ///// <returns>retrun the roles details in ienumberable form</returns>
        ///// <createdBy>Bobi</createdBy>
        ///// <createdDate>nov 12 2013</createdDate>
        //public IEnumerable<RoleResponseParam> GetRoles()
        //{
        //    try
        //    {
        //        using (objDecisionPointEntities = new DecisionPointEntities())
        //        {
        //            var query = (from role in objDecisionPointEntities.DP_RoleMaster

        //                         where role.IsDeleted == false
        //                         select new RoleResponseParam
        //                         {
        //                             RoleId = role.Id,
        //                             RoleName = role.Role
        //                         }).Distinct().ToList();
        //            return query;
        //        }
        //    }
        //    catch
        //    {
        //        throw;
        //    }
        //}

        /// <summary>
        /// get Flow from flow master
        /// </summary>
        /// <returns>retrun the flow details in ienumberable form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 13 2013</createdDate>
        public IEnumerable<RoleResponseParam> GetFlow()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from flow in objDecisionPointEntities.DP_FlowMaster

                                 where flow.IsDeleted == false
                                 select new RoleResponseParam
                                 {
                                     flowId = flow.Id,
                                     flowName = flow.Flow
                                 }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get DocFlow from Docflow master
        /// </summary>
        /// <returns>retrun the Docflow details in ienumberable form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 13 2013</createdDate>
        public IEnumerable<RoleResponseParam> GetDocFlow()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from flow in objDecisionPointEntities.DP_DocFlow

                                 where flow.IsDeleted == false
                                 select new RoleResponseParam
                                 {
                                     flowId = flow.Id,
                                     flowName = flow.DocFlow
                                 }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// Used to get the services from lcal database
        /// </summary>
        /// <returns>retrun the services details in ienumberable form</returns>
        ///<param name="ID">string</param>
        ///<param name="type">string</param>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 14 2013</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetServices(string type, string ID)
        {
            IEnumerable<CompanyDashBoardResponseParam> finalquery = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.Admin.Trim().ToUpper(CultureInfo.InvariantCulture)))
                    {
                        var query = (from service in objDecisionPointEntities.DP_ServicesMaster
                                     where service.Service != string.Empty && service.CompanyId == (ID == null ? Shared.Zero : ID)
                                     select new CompanyDashBoardResponseParam
                                     {
                                         serviceName = service.Service,
                                         isDeleted = service.IsDeleted,
                                         isActive = service.IsActive,
                                         id = service.Id,
                                     }).Distinct().ToList().OrderBy(x => x.serviceName);
                        finalquery = query;

                    }
                    //else if (type.Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.jobreqdoc.Trim().ToUpper(CultureInfo.InvariantCulture)))
                    //{
                    //    int UserId = Convert.ToInt32(ID, CultureInfo.InvariantCulture);
                    //    var query = (from service in objDecisionPointEntities.DP_ServicesMaster
                    //                 join userservice in objDecisionPointEntities.DP_ServiceMapping
                    //                 on service.Id equals userservice.ServiceId
                    //                 where service.IsDeleted == false && userservice.UserId == UserId && service.IsActive == true && userservice.IsActive == true
                    //                 select new CompanyDashBoardResponseParam
                    //                 {
                    //                     serviceName = service.Service,
                    //                     isDeleted = service.IsDeleted,
                    //                     isActive = service.IsActive,
                    //                     id = service.Id,
                    //                 }).Distinct().ToList().OrderBy(x => x.serviceName);



                    //    finalquery = query;

                    //}
                    else
                    {
                        var query = (from service in objDecisionPointEntities.DP_ServicesMaster
                                     where service.Service != string.Empty && service.CompanyId == (ID == null ? Shared.Zero : ID) && service.IsDeleted == false && service.IsActive == true
                                     select new CompanyDashBoardResponseParam
                                     {
                                         serviceName = service.Service,
                                         isDeleted = service.IsDeleted,
                                         isActive = service.IsActive,
                                         id = service.Id,
                                     }).Distinct().ToList().OrderBy(x => x.serviceName);
                        finalquery = query;
                    }

                    return finalquery;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to get the services from lcal database
        /// </summary>
        /// <returns>retrun the services details in ienumberable form</returns>
        ///<param name="ID">string</param>
        ///<param name="type">string</param>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 14 2013</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetServicesOfNewHired(int ID, string companyID)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    int UserId = Convert.ToInt32(ID, CultureInfo.InvariantCulture);
                    var query = (from service in objDecisionPointEntities.DP_ServicesMaster
                                 join userservice in objDecisionPointEntities.DP_ServiceMapping
                                 on service.Id equals userservice.ServiceId
                                 where service.IsDeleted == false && userservice.UserId == UserId && service.IsActive == true && userservice.IsActive == true
                                 && userservice.UserCompanyId == companyID
                                 select new CompanyDashBoardResponseParam
                                 {
                                     serviceName = service.Service,
                                     isDeleted = service.IsDeleted,
                                     isActive = service.IsActive,
                                     id = service.Id,
                                 }).Distinct().ToList().OrderBy(x => x.serviceName);



                    return query;
                }
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Used to get the mapped services from local database for service translation table
        /// </summary>
        /// <param name="companyId"></param>
        /// <param name="pCompanyId"></param>
        /// <returns>retrun the services details in ienumberable form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 16 2013</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetMappdedServices(string pCompanyId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //get parent service
                    var query = (from mapservice in objDecisionPointEntities.DP_ServiceTranslationTable
                                 join service in objDecisionPointEntities.DP_ServicesMaster
                                 on mapservice.ChildServiceId equals service.Id
                                 where mapservice.ParentCompanyId == pCompanyId && mapservice.ChildCompanyId == companyId
                                 select new CompanyDashBoardResponseParam
                                 {
                                     ParentserviceId = (int)(mapservice.ParentServiceId == null ? 0 : mapservice.ParentServiceId),
                                     ChildserviceId = (int)(mapservice.ChildServiceId == null ? 0 : mapservice.ChildServiceId),
                                     Childservicename = service.Service
                                 }).Distinct().ToList().OrderBy(x => x.serviceName);

                    return query;
                }
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// Used for get account details of particular user
        /// </summary>
        /// <param name="UserId">int</param>
        /// <returns>retrun the account profile details of particular user</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>nov 20 2013</createdDate>
        public UserDashBoardResponseParam GetAccountDetails(int UserId)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    // entity query for fetch user's records such as User Id, user Type, User Name from database through user's userid and password 
                    var query = from user in objDecisionPointEntities.DP_User
                                join profile in objDecisionPointEntities.DP_Profile
                                on user.Id equals profile.UserId
                                join state in objDecisionPointEntities.DP_State
                                on profile.StateId equals state.Id into ST
                                from FST in ST.DefaultIfEmpty()
                                join titlemap in objDecisionPointEntities.DP_TitleMapping
                                on profile.UserId equals titlemap.UserId into TM
                                from FTitleMap in TM.DefaultIfEmpty()
                                join titlemaster in objDecisionPointEntities.DP_TitleMaster
                                on FTitleMap.TitleId equals titlemaster.Id into Tmaster
                                from FTmaster in Tmaster.DefaultIfEmpty()
                                where user.Id == UserId
                                select new UserDashBoardResponseParam
                                {
                                    fName = string.IsNullOrEmpty(profile.Firstname) ? string.Empty : profile.Firstname,
                                    mName = string.IsNullOrEmpty(profile.MiddelName) ? string.Empty : profile.MiddelName,
                                    lName = string.IsNullOrEmpty(profile.LastName) ? string.Empty : profile.LastName,
                                    NickName = string.IsNullOrEmpty(profile.Nickname) ? string.Empty : profile.Nickname,
                                    emailId = string.IsNullOrEmpty(user.EmailId) ? string.Empty : user.EmailId,
                                    officePhone = string.IsNullOrEmpty(profile.OfficePhone) ? string.Empty : profile.OfficePhone,
                                    directPhone = string.IsNullOrEmpty(profile.CellNumber) ? string.Empty : profile.CellNumber,
                                    companyName = string.IsNullOrEmpty(profile.BusinessName) ? string.Empty : profile.BusinessName,
                                    UserId = user.UserId,
                                    profilephoto = string.IsNullOrEmpty(profile.profilephoto) ? string.Empty : profile.profilephoto,
                                    companylogo = string.IsNullOrEmpty(profile.CompanyLogo) ? string.Empty : profile.CompanyLogo,
                                    CompanyId = user.CompanyId,
                                    RegisteredDate = user.RegisteredDate,
                                    StreetNumber = string.IsNullOrEmpty(profile.StreetNumber) ? string.Empty : profile.StreetNumber,
                                    StreetName = string.IsNullOrEmpty(profile.Street) ? string.Empty : profile.Street,
                                    Direction = string.IsNullOrEmpty(profile.Direction) ? string.Empty : profile.Direction,
                                    CityName = string.IsNullOrEmpty(profile.CityName) ? string.Empty : profile.CityName,
                                    StateName = string.IsNullOrEmpty(FST.State) ? string.Empty : FST.State,
                                    StateId = (int)(profile.StateId == null ? 0 : profile.StateId),
                                    ZipCode = string.IsNullOrEmpty(profile.ZipCode) ? string.Empty : profile.ZipCode,
                                    BioInfo = profile.BioInfo == null ? string.Empty : profile.BioInfo,
                                    CoverageAreaStatus = profile.CompanyCAStatus,
                                    ServicesStatus = (int)(profile.ServicesStatus == null ? 0 : profile.ServicesStatus),
                                    title = FTmaster.Title,
                                    CreatedBy = user.CreatedBy,
                                    BusinessClass = profile.BusinessClass,
                                    CertificationNumber = profile.CertificationNumber,
                                    CertificateExpDate = profile.CertificateExpDate,
                                    CertifyingAgency = profile.CertifyingAgency
                                };
                    return query.FirstOrDefault();
                }
            }
            catch
            {
                throw;
            }
        }



        ///// <summary>
        ///// get roles from role masterof any user
        ///// </summary>
        ///// <param name="UserId">int</param>
        ///// <returns>retrun the roles of particular user</returns>
        ///// <createdBy>Bobi</createdBy>
        ///// <createdDate>nov 21 2013</createdDate>
        //public IEnumerable<RoleResponseParam> GetUserRoles(int UserId)
        //{
        //    try
        //    {
        //        using (objDecisionPointEntities = new DecisionPointEntities())
        //        {
        //            var query = (from role in objDecisionPointEntities.DP_RoleMaster
        //                         join userrole in objDecisionPointEntities.DP_RoleMapping
        //                         on role.Id equals userrole.RoleId
        //                         where userrole.UserId == UserId && role.IsDeleted == false
        //                         select new RoleResponseParam
        //                         {
        //                             RoleId = role.Id,
        //                             RoleName = role.Role
        //                         }
        //                         ).Distinct().ToList();
        //            return query;
        //        }
        //    }
        //    catch
        //    {
        //        throw;
        //    }
        //}
        /// <summary>
        /// Used to get permission of particular user
        /// </summary>
        /// <param name="id"></param>
        /// <param name="roleId"></param>
        /// <param name="titleid"></param>
        /// <param name="permissionId"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 20 2013</createdDate>
        public int UpdateUserPermisson(int id, int titleid, int permissionId)
        {
            try
            {

                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    //update title
                    if (titleid != 0)
                    {
                        var res2 = (from title in objDecisionPointEntities.DP_TitleMapping
                                    join user in objDecisionPointEntities.DP_User
                                 on new { a = (int)(title.UserId == null ? 0 : title.UserId), b = title.CreatedCompanyId } equals new { a = user.Id, b = user.CompanyId }
                                    where title.UserId == id
                                    select new { title }).FirstOrDefault();
                        if (!object.Equals(res2, null))
                        {
                            res2.title.TitleId = titleid;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Used to update vendor type for IC
        /// </summary>
        /// <param name="vendorTypeId"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 17 20134</createdDate>
        public int UpdateVendorType(int userId, string userCompanyId, string creatorCompanyId, int vendorTypeId)
        {
            try
            {

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //update title
                    if (vendorTypeId != 0)
                    {
                        var vendorTypeDetails = (from title in objDecisionPointEntities.DP_VendorTypeMapping
                                                 where title.UserId == userId && title.UserCompanyId == userCompanyId && title.CreaterCompanyId == creatorCompanyId && title.IsDefault == true
                                                 select new { title }).FirstOrDefault();
                        if (!object.Equals(vendorTypeDetails, null))
                        {
                            vendorTypeDetails.title.VendorTypeId = vendorTypeId;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// get Skill from skill master
        /// </summary>
        /// <returns>retrun the skills of particular user</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>nov 20 2013</createdDate>
        public IList<string> GetUserSkills(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from skill in objDecisionPointEntities.DP_SkillSetMaster
                                 join userskill in objDecisionPointEntities.DP_SkillSetMapping
                                 on skill.Id equals userskill.SkillId
                                 where skill.IsDeleted == false && userskill.UserId == userId
                                 select skill.SkillSet
                                 ).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get title from title master of any user
        /// </summary>
        /// <param name="userId"></param>
        /// <returns>retrun the roles of particular user</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 20 2013</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetUserTitle(int userId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from title in objDecisionPointEntities.DP_TitleMaster
                                 join userrole in objDecisionPointEntities.DP_TitleMapping
                                 on title.Id equals userrole.TitleId
                                 where title.IsDeleted == false && userrole.UserId == userId && title.IsActive == true && userrole.CreatedCompanyId == companyId
                                 select new CompanyDashBoardResponseParam
                                 {
                                     id = title.Id,
                                     titleName = title.Title
                                 }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get services from service master of any user
        /// </summary>
        /// <returns>retrun the roles of particular user</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 21 2013</createdDate>
        public IList<string> GetUserServices(int userId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from service in objDecisionPointEntities.DP_ServicesMaster
                                 join userservice in objDecisionPointEntities.DP_ServiceMapping
                                 on service.Id equals userservice.ServiceId
                                 where service.IsDeleted == false && userservice.UserId == userId && service.IsActive == true && userservice.IsActive == true && userservice.ParentCompanyId == companyId
                                 select service.Service
                                 ).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get client from client master
        /// </summary>
        /// <param name="userId"></param>
        /// <returns>retrun the roles of particular user</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 22 2013</createdDate>
        public IList<string> GetUserClients(int userId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from client in objDecisionPointEntities.DP_ClientMapping
                                 join user in objDecisionPointEntities.DP_User
                                on client.ClientId equals user.Id
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where client.UserId == userId && user.IsActive == true && client.CreatedCompanyId == companyId
                                 orderby profile.Firstname
                                 select profile.Firstname
                                  ).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }



        /// <summary>
        /// Used for serach the document/messages/courses in history section of user dashboard
        /// </summary>
        /// <param name="term">string</param>
        /// <param name="userId">int</param>
        /// <param name="type">string</param>
        /// <returns> retrn serach record in history section</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 1 2013</createdDate>
        public IList<UserDashBoardResponseParam> Serach(string term, int userId, string type, int searchtype)
        {
            IList<UserDashBoardResponseParam> finalQuery = null;
            List<string> groupcol = new List<string>();
            string category = string.Empty;
            string subCategory = string.Empty;
            string title = string.Empty;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals(Shared.history))
                    {
                        List<string> mainvalues = new List<string>();
                        mainvalues = term.Split(char.Parse(Shared.Comma)).ToList();
                        if (mainvalues.Count >= 2)
                        {
                            if (!string.IsNullOrEmpty(mainvalues[0].Split(char.Parse(Shared.Colon))[0]))
                            {
                                groupcol = mainvalues[0].Split(char.Parse(Shared.Colon))[0].Split(char.Parse(Shared.Astrik)).ToList();

                            }
                            if (!string.IsNullOrEmpty(mainvalues[1].Split(char.Parse(Shared.Colon))[0]) && !mainvalues[1].Split(char.Parse(Shared.Colon))[0].Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.Category.Trim().ToUpper(CultureInfo.InvariantCulture)))
                            {
                                category = mainvalues[1].Split(char.Parse(Shared.Colon))[0];

                            }
                            if (!string.IsNullOrEmpty(mainvalues[2].Split(char.Parse(Shared.Colon))[0]) && !mainvalues[2].Split(char.Parse(Shared.Colon))[0].Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.SubCategory.Trim().ToUpper(CultureInfo.InvariantCulture)))
                            {
                                subCategory = mainvalues[2].Split(char.Parse(Shared.Colon))[0];
                            }
                            //chjeck if search is apply
                            if (mainvalues.Count > 3)
                            {
                                if (!string.IsNullOrEmpty(mainvalues[3].Split(char.Parse(Shared.Colon))[1]))
                                {
                                    if (mainvalues[3].Split(char.Parse(Shared.Colon))[1].Equals("serach"))
                                    {
                                        if (!string.IsNullOrEmpty(mainvalues[3].Split(char.Parse(Shared.Colon))[0]))
                                        {
                                            title = mainvalues[3].Split(char.Parse(Shared.Colon))[0];
                                        }
                                    }

                                }
                            }
                        }
                        var query = (from historydetails in objDecisionPointEntities.DP_Recipient
                                     join document in objDecisionPointEntities.DP_DocumentDetails
                                     on historydetails.DocId equals document.Id into doctemp
                                     from doc in doctemp.DefaultIfEmpty()
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on historydetails.DeliveredUserId equals profile.UserId
                                     join user in objDecisionPointEntities.DP_User
                                     on profile.UserId equals user.Id
                                     where historydetails.MoveInHistory == true && historydetails.RecipientUserId == userId &&
                                     (doc.Title.StartsWith(title) ||
                                     profile.BusinessName.StartsWith(term))
                                     orderby historydetails.SentDate descending
                                     select new UserDashBoardResponseParam
                                     {
                                         serachByTitle = doc.Title == null ? string.Empty : doc.Title,
                                         serachByFrom = profile.BusinessName,
                                         Group = doc.DocGroup,
                                         reference = doc.Reference,
                                         SubCategory = doc.DocType

                                     }).ToList();
                        if (groupcol.Count > 0)
                        {
                            query = query.Where(x => groupcol.Contains(x.Group)).ToList();
                        }
                        if (!string.IsNullOrEmpty(category))
                        {
                            query = query.Where(x => x.reference == category).ToList();
                        }
                        if (!string.IsNullOrEmpty(category))
                        {
                            query = query.Where(x => x.SubCategory == subCategory).ToList();
                        }
                        finalQuery = query;
                    }
                    else if (type.Equals(Shared.Document))
                    {
                        var query = (from recipient in objDecisionPointEntities.DP_Recipient
                                     join document in objDecisionPointEntities.DP_DocumentDetails
                                      on recipient.DocId equals document.Id into doctemp
                                     from doc in doctemp.DefaultIfEmpty()
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on recipient.DeliveredUserId equals profile.UserId
                                     join user in objDecisionPointEntities.DP_User
                                     on profile.UserId equals user.Id
                                     where recipient.MoveInHistory == false && doc.IsDeleted == false && recipient.RecipientUserId == userId &&
                                     (profile.BusinessName.StartsWith(term) || doc.Title.StartsWith(term))
                                     orderby recipient.SentDate descending
                                     select new UserDashBoardResponseParam
                                     {
                                         serachByTitle = doc.Title,
                                         serachByFrom = profile.BusinessName

                                     }).ToList();
                        finalQuery = query;

                    }
                    else if (type.Trim().ToLower(CultureInfo.InvariantCulture).Equals(Shared.Company.ToLower(CultureInfo.InvariantCulture)))
                    {

                        var query = (from user in objDecisionPointEntities.DP_User
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on user.Id equals profile.UserId
                                     where user.IsDeleted == false && (profile.UserType == Shared.IC || profile.UserType == Shared.Company) && user.IsActive == true
                                     select new UserDashBoardResponseParam
                                     {
                                         serachByFrom = profile.BusinessName,
                                         serachByTitle = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                         DocType = profile.UserType
                                     }).Distinct().ToList();
                        if (searchtype.Equals(1))
                        {
                            query = query.Where(x => x.DocType == Shared.Company).ToList();
                        }
                        else if (searchtype.Equals(2))
                        {
                            query = query.Where(x => x.DocType == Shared.IC).ToList();
                        }
                        finalQuery = query;
                    }

                    return finalQuery;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// check user exists or not
        /// </summary>
        /// <param name="emailId">emailId</param>
        /// <param name="type">type</param>
        /// <returns>user type</returns>
        /// <createdby>sumit saurav</createdby>
        /// <createddate>29 july 2014</createddate>
        public int UpdateEmailId(string emailId, int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var chkEmailExist = (from user in objDecisionPointEntities.DP_User
                                         join profile in objDecisionPointEntities.DP_Profile
                                         on user.Id equals (profile.UserId)
                                         where user.EmailId == emailId && user.IsActive == true
                                         select profile.UserType).FirstOrDefault();
                    if (object.Equals(chkEmailExist, null))
                    {
                        var userDetails = (from profiledata in objDecisionPointEntities.DP_Profile
                                           join cus in objDecisionPointEntities.DP_User
                                       on profiledata.UserId equals cus.Id
                                           where profiledata.UserId == userId
                                           select new { profiledata, cus }).FirstOrDefault();
                        if (!userDetails.Equals(null))
                        {
                            userDetails.cus.EmailId = emailId;
                        }

                    }
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for update my profile
        /// </summary>
        /// <param name="objUserDashBoardRequestParam"></param>
        /// <param name="type"></param>
        /// <returns>in</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 26 2013</createdDate>
        public int Updatemyprofile(UserDashBoardRequestParam objUserDashBoardRequestParam, string type)
        {
            try
            {

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals(Shared.Profile))
                    {
                        if (!objUserDashBoardRequestParam.Equals(null))
                        {
                            var res = (from profiledata in objDecisionPointEntities.DP_Profile
                                       join cus in objDecisionPointEntities.DP_User
                                   on profiledata.UserId equals cus.Id
                                       where profiledata.UserId == objUserDashBoardRequestParam.UserId
                                       select new { profiledata, cus }
                                        ).FirstOrDefault();
                            if (!res.Equals(null))
                            {
                                res.profiledata.Firstname = objUserDashBoardRequestParam.fName;
                                res.profiledata.LastName = objUserDashBoardRequestParam.lName;
                                res.profiledata.MiddelName = objUserDashBoardRequestParam.mName;
                                res.profiledata.Nickname = objUserDashBoardRequestParam.NickName;
                                res.profiledata.profilephoto = objUserDashBoardRequestParam.profilephoto == null ? res.profiledata.profilephoto : objUserDashBoardRequestParam.profilephoto;
                                res.profiledata.OfficePhone = objUserDashBoardRequestParam.officePhone;
                                res.profiledata.CellNumber = objUserDashBoardRequestParam.directPhone;
                                res.profiledata.ModifyBy = objUserDashBoardRequestParam.modifiedby;
                                res.cus.ModifyBy = objUserDashBoardRequestParam.modifiedby;
                                res.profiledata.ModifyDate = DateTime.Now.Date;
                                res.cus.ModifyDate = DateTime.Now.Date;
                                res.profiledata.Street = objUserDashBoardRequestParam.StreetName;
                                res.profiledata.StreetNumber = objUserDashBoardRequestParam.StreetNumber;
                                res.profiledata.Direction = objUserDashBoardRequestParam.Direction;
                                res.profiledata.CityName = objUserDashBoardRequestParam.CityName;
                                res.profiledata.ZipCode = objUserDashBoardRequestParam.ZipCode;
                                res.profiledata.BusinessClass = objUserDashBoardRequestParam.BusinessClass;
                                res.profiledata.CertificationNumber = objUserDashBoardRequestParam.CertificationNumber;
                                res.profiledata.CertifyingAgency = objUserDashBoardRequestParam.CertifyingAgency;
                                res.profiledata.CertificateExpDate = objUserDashBoardRequestParam.CertificateExpDate;
                                if (!objUserDashBoardRequestParam.StateId.Equals(0))
                                    res.profiledata.StateId = objUserDashBoardRequestParam.StateId;
                                var chkEmailId = (from user in objDecisionPointEntities.DP_User
                                                  join profile in objDecisionPointEntities.DP_Profile
                                                  on user.Id equals (profile.UserId)
                                                  where user.EmailId == objUserDashBoardRequestParam.emailId && user.IsActive == true
                                                  select profile.UserType).FirstOrDefault();
                                if (!object.Equals(chkEmailId, null))
                                {
                                }
                            }
                        }
                    }
                    else if (type.Equals(Shared.CompanyProfile))
                    {
                        if (!objUserDashBoardRequestParam.Equals(null))
                        {
                            var res = (from profiledata in objDecisionPointEntities.DP_Profile
                                       join cus in objDecisionPointEntities.DP_User
                                   on profiledata.UserId equals cus.Id
                                       where profiledata.UserId == objUserDashBoardRequestParam.UserId
                                       select new { profiledata, cus }
                                        ).FirstOrDefault();
                            if (!res.Equals(null))
                            {
                                res.profiledata.Firstname = objUserDashBoardRequestParam.fName;
                                res.profiledata.LastName = objUserDashBoardRequestParam.lName;
                                res.profiledata.MiddelName = objUserDashBoardRequestParam.mName;
                                res.cus.EmailId = objUserDashBoardRequestParam.emailId;
                                res.profiledata.OfficePhone = objUserDashBoardRequestParam.officePhone;
                                res.profiledata.BusinessName = objUserDashBoardRequestParam.companyName;
                                res.profiledata.CompanyLogo = objUserDashBoardRequestParam.profilephoto;
                                res.profiledata.ModifyBy = objUserDashBoardRequestParam.modifiedby;
                                res.cus.ModifyBy = objUserDashBoardRequestParam.modifiedby;
                                res.profiledata.ModifyDate = DateTime.Now.Date;
                                res.cus.ModifyDate = DateTime.Now.Date;
                                res.profiledata.BusinessClass = objUserDashBoardRequestParam.BusinessClass;
                                res.profiledata.CertificationNumber = objUserDashBoardRequestParam.CertificationNumber;
                                res.profiledata.CertifyingAgency = objUserDashBoardRequestParam.CertifyingAgency;
                                res.profiledata.CertificateExpDate = objUserDashBoardRequestParam.CertificateExpDate;
                            }


                        }
                    }
                    else if (type.Equals(Shared.Service))
                    {
                        var servicesList = (from service in objDecisionPointEntities.DP_ServiceMapping
                                            join cus in objDecisionPointEntities.DP_User
                                        on service.UserId equals cus.Id
                                            where service.UserId == objUserDashBoardRequestParam.UserId
                                            select new { service }
                                  ).ToList();
                        if (!object.Equals(servicesList, null))
                        {
                            foreach (var service in servicesList)
                            {
                                objDecisionPointEntities.DP_ServiceMapping.Remove(service.service);
                            }
                        }
                        //insert service selection option
                        var userList = (from cus in objDecisionPointEntities.DP_Profile
                                        where cus.UserId == objUserDashBoardRequestParam.UserId
                                        select cus).FirstOrDefault();
                        if (!object.Equals(userList, null))
                        {
                            userList.ServicesStatus = (byte)objUserDashBoardRequestParam.Type;
                        }
                        if (!string.IsNullOrEmpty(objUserDashBoardRequestParam.serviceId))
                        {
                            string[] serviceIds = objUserDashBoardRequestParam.serviceId.Split(',');
                            foreach (var serviceid in serviceIds)
                            {
                                DP_ServiceMapping objDPServiceMapping = new DP_ServiceMapping()
                                {
                                    ServiceId = Convert.ToInt32(serviceid, CultureInfo.InvariantCulture),
                                    UserId = objUserDashBoardRequestParam.UserId,
                                    ParentCompanyId = objUserDashBoardRequestParam.CompanyCode,
                                    UserCompanyId = objUserDashBoardRequestParam.CompanyCode,
                                    IsActive = true
                                };
                                objDecisionPointEntities.DP_ServiceMapping.Add(objDPServiceMapping);
                            }

                        }
                    }
                    else if (type.Equals(Shared.Client.ToLower(CultureInfo.InvariantCulture)))
                    {
                        var res1 = (from client in objDecisionPointEntities.DP_ClientMapping
                                    join cus in objDecisionPointEntities.DP_User
                                on client.UserId equals cus.Id
                                    where client.UserId == objUserDashBoardRequestParam.UserId && client.CreatedCompanyId == objUserDashBoardRequestParam.CompanyCode
                                    select new { client }
                                  ).ToList();
                        foreach (var client in res1)
                        {
                            objDecisionPointEntities.DP_ClientMapping.Remove(client.client);
                        }
                        if (!string.IsNullOrEmpty(objUserDashBoardRequestParam.clientId))
                        {
                            string[] serviceIds = objUserDashBoardRequestParam.clientId.Split(',');
                            foreach (var serviceid in serviceIds)
                            {
                                DP_ClientMapping objDPClientMapping = new DP_ClientMapping()
                                {
                                    ClientId = Convert.ToInt32(serviceid, CultureInfo.InvariantCulture),
                                    UserId = objUserDashBoardRequestParam.UserId,
                                    CreatedCompanyId = objUserDashBoardRequestParam.CompanyCode,
                                    CreatedBy = objUserDashBoardRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date
                                };
                                objDecisionPointEntities.DP_ClientMapping.Add(objDPClientMapping);
                            }
                        }
                    }
                    else if (type.Equals(Shared.Password))
                    {
                        var res = (from profiledata in objDecisionPointEntities.DP_Profile
                                   join cus in objDecisionPointEntities.DP_User
                               on profiledata.UserId equals cus.Id
                                   where profiledata.UserId == objUserDashBoardRequestParam.UserId
                                   select new { profiledata, cus }
                                       ).FirstOrDefault();
                        if (!res.Equals(null))
                        {
                            res.cus.Password = objUserDashBoardRequestParam.newpwd;
                            res.cus.ModifyBy = objUserDashBoardRequestParam.modifiedby;
                            res.cus.ModifyDate = DateTime.Now.Date;
                        }
                    }
                    else if (type.Equals(Shared.StaffEdit))
                    {
                        var res = (from profiledata in objDecisionPointEntities.DP_Profile
                                   join cus in objDecisionPointEntities.DP_User
                               on profiledata.UserId equals cus.Id
                                   where profiledata.UserId == objUserDashBoardRequestParam.UserId
                                   select new { profiledata, cus }
                                       ).FirstOrDefault();
                        if (!res.Equals(null))
                        {
                            res.cus.EmailId = objUserDashBoardRequestParam.emailId;
                            res.profiledata.Firstname = objUserDashBoardRequestParam.fName;
                            res.profiledata.LastName = objUserDashBoardRequestParam.lName;
                            res.profiledata.CellNumber = objUserDashBoardRequestParam.directPhone;
                            res.profiledata.OfficePhone = objUserDashBoardRequestParam.officePhone;
                            res.profiledata.ModifyBy = objUserDashBoardRequestParam.modifiedby;
                            res.cus.ModifyBy = objUserDashBoardRequestParam.modifiedby;
                            res.profiledata.ModifyDate = DateTime.Now.Date;
                            res.cus.ModifyDate = DateTime.Now.Date;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// Used for get the document detail of particular document
        /// </summary>
        /// <param name="docId"></param>
        /// <returns>retrun previous messges reply</returns>
        /// <createdBy>mamta gupta</createdBy>
        /// <createdDate>nov 26 2013</createdDate>
        public IList<ViewDocumentResponseParam> ViewDocument(int docId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from document in objDecisionPointEntities.DP_DocumentDetails
                                 where document.Id == docId
                                 select new ViewDocumentResponseParam
                                 {
                                     duedate = document.DueDate,
                                     docId = document.Id
                                 }).ToList();

                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used For get the internal staff detail of particular company
        /// </summary>
        /// <param name="filterRequestParam">filterRequestParam</param>        
        /// <returns>retrun the req documemnt of particular user</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 26 2013</createdDate>
        public IEnumerable<InternalstaffResponseParam> GetInternalstaffdetail(FilterRequestParam filterRequestParam)
        {
            bool Isactive = false;
            IEnumerable<InternalstaffResponseParam> finallist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (filterRequestParam.type.Equals(0) || filterRequestParam.type.Equals(1))
                    {

                        if (filterRequestParam.type.Equals(0))
                        {
                            Isactive = true;
                        }
                        // entity query for fetch individual reqiured documents record  as per user Id
                        var query = (from staff in objDecisionPointEntities.DP_CompanyStaffMapping
                                     join user in objDecisionPointEntities.DP_User
                                     on staff.StaffId equals user.Id
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on user.Id equals profile.UserId

                                     join title in objDecisionPointEntities.DP_TitleMapping
                                      on new { a = staff.StaffId, b = staff.CompanyId } equals new { a = title.UserId, b = title.CreatedCompanyId } into TM
                                     from FTM in TM.DefaultIfEmpty()
                                     join titlemaster in objDecisionPointEntities.DP_TitleMaster
                                     on FTM.TitleId equals titlemaster.Id into userTitle
                                     from usertitle in userTitle.DefaultIfEmpty()
                                     where staff.CompanyId == filterRequestParam.CompanyId
                                     && user.IsDeleted == false
                                    && staff.IsActive == Isactive
                                     select new InternalstaffResponseParam
                                     {
                                         fname = profile.Firstname,
                                         lname = profile.LastName,
                                         emailId = user.EmailId,
                                         phone = profile.CellNumber,
                                         Id = user.Id,
                                         title = usertitle == null ? string.Empty : usertitle.Title,
                                         IsActive = (bool)(staff.IsActive == null ? false : staff.IsActive),
                                         businessName = profile.BusinessName == null ? string.Empty : profile.BusinessName,
                                         invitationStatus = (bool)(user.IsRegistered == null ? false : user.IsRegistered),
                                         companyId = user.CompanyId,
                                         UserType = profile.UserType == null ? string.Empty : profile.UserType,
                                         LastInviteMailDate = staff.LastInvitationDate
                                     }).Distinct().ToList().OrderBy(x => x.lname).OrderBy(x => x.invitationStatus);
                        finallist = query;
                    }
                    else if (filterRequestParam.type.Equals(3))
                    {
                        Isactive = true;
                        // entity query for fetch individual reqiured documents record  as per user Id
                        var query = (from staff in objDecisionPointEntities.DP_CompanyStaffMapping
                                     join user in objDecisionPointEntities.DP_User
                                     on staff.StaffId equals user.Id
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on user.Id equals profile.UserId
                                     join title in objDecisionPointEntities.DP_TitleMapping
                                   on new { a = staff.StaffId, b = staff.CompanyId } equals new { a = title.UserId, b = title.CreatedCompanyId }
                                     join titlemaster in objDecisionPointEntities.DP_TitleMaster
                                     on title.TitleId equals titlemaster.Id into userTitle
                                     from usertitle in userTitle.DefaultIfEmpty()
                                     where staff.CompanyId == filterRequestParam.CompanyId
                                     && user.IsDeleted == false
                                    && user.IsActive == true && staff.IsActive == Isactive
                                    && profile.UserType == Shared.Individual && staff.Status == 1 && user.IsRegistered == true && staff.Invitationstatus == true
                                     && profile.UserType == Shared.Individual
                                     select new InternalstaffResponseParam
                                     {
                                         fname = profile.Firstname,
                                         lname = profile.LastName,
                                         emailId = user.EmailId,
                                         phone = profile.CellNumber,
                                         Id = user.Id,
                                         title = usertitle == null ? string.Empty : usertitle.Title,
                                         IsActive = (bool)(user.IsActive == null ? false : user.IsActive),
                                         businessName = profile.BusinessName == null ? string.Empty : profile.BusinessName,
                                         invitationStatus = (bool)(staff.Invitationstatus == null ? false : staff.Invitationstatus),
                                         companyId = user.CompanyId
                                     }).Distinct().ToList().OrderBy(x => x.lname);
                        finallist = query;
                    }
                    else if (filterRequestParam.type.Equals(2))
                    {
                        // entity query for fetch individual reqiured documents record  as per user Id
                        var query = (from staff in objDecisionPointEntities.DP_CompanyStaffMapping
                                     join user in objDecisionPointEntities.DP_User
                                     on staff.StaffId equals user.Id
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on user.Id equals profile.UserId
                                     where staff.CompanyId == filterRequestParam.CompanyId
                                      && user.IsActive == true && staff.IsActive == true
                                     select new InternalstaffResponseParam
                                     {
                                         fname = profile.Firstname,
                                         lname = profile.LastName,
                                         emailId = user.EmailId,
                                         phone = profile.CellNumber,
                                         Id = user.Id,
                                         IsActive = (bool)(user.IsActive == null ? false : user.IsActive),
                                         businessName = profile.BusinessName == null ? string.Empty : profile.BusinessName,
                                         companyId = user.CompanyId,
                                         invitationStatus = (bool)(staff.Invitationstatus == null ? false : staff.Invitationstatus),
                                     }).Distinct().ToList().OrderBy(x => x.lname);
                        finallist = query;

                    }
                }
                //get staff details after apply filter
                finallist = getstaffafterfilter(filterRequestParam, finallist).ToList();
                return finallist;
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Set Globa variable for apply communication filter for Staff, IC, Vendor and Clients
        /// </summary>
        /// <param name="filterRequestParam"></param>
        /// <Createdby>Bobi</Createdby>
        /// <CreatedDate>10 Nov 2014</CreatedDate>
        private void SetGlobalVariableForCommFilter(FilterRequestParam filterRequestParam, string userType)
        {
            try
            {
                IList<SaveCommFilterResponseparam> commFilterList = GetCommFilterDetails(filterRequestParam.DocId, filterRequestParam.CompanyId);
                if (userType.Equals(Shared.Staff))
                {
                    #region Titles Filter
                    //get title filter
                    titlefilters = commFilterList.Where(x => x.FilterType == Shared.Title).Select(x => x.FilterValue).ToList();
                    if (titlefilters.Contains(Shared.All))
                    {
                        titlefilters = GetTitle(Shared.Company, filterRequestParam.CompanyId).Select(x => x.titleName).ToList();
                    }
                    #endregion
                }
                if (userType.Equals(Shared.IC))
                {
                    #region Professional Filter
                    //get professional filter
                    professionalType = commFilterList.Where(x => x.FilterType == Shared.ProfessionalType).Select(x => int.Parse(x.FilterValue)).ToList();

                    #endregion
                }
                #region Services Filter
                //get service filter
                servicefilters = commFilterList.Where(x => x.FilterType == Shared.Service).Select(x => x.FilterValue).ToList();
                if (servicefilters.Contains(Shared.All))
                {
                    serviceIds = GetServices(Shared.Company, filterRequestParam.CompanyId).Select(x => x.id).ToList();
                }
                else
                {
                    serviceIds = servicefilters.Select(x => int.Parse(x)).ToList();
                }
                #endregion

                #region Geographical Area
                locationType = commFilterList.Where(x => x.FilterType == Shared.Location).Select(x => x.FilterValue).FirstOrDefault();
                if (!string.IsNullOrEmpty(locationType))
                {
                    if (locationType.Equals(Shared.Zip))
                    {
                        zipList = commFilterList.Where(x => x.FilterType == Shared.Location).Select(x => x.CoverageAreaVal).ToList();
                    }
                    else if (locationType.Equals(Shared.State))
                    {
                        stateList = commFilterList.Where(x => x.FilterType == Shared.Location && x.FilterValue == Shared.State).Select(x => x.CoverageAreaVal).ToList();
                        countyList = commFilterList.Where(x => x.FilterType == Shared.Location && x.FilterValue == Shared.County).Select(x => x.CoverageAreaVal).ToList();
                        cityList = commFilterList.Where(x => x.FilterType == Shared.Location && x.FilterValue == Shared.City).Select(x => x.CoverageAreaVal).ToList();
                    }
                    else if (locationType.Equals(Shared.All))
                    {
                        using (objDecisionPointEntities = new DecisionPointEntities())
                        {
                            locationType = (from user in objDecisionPointEntities.DP_User
                                            join profile in objDecisionPointEntities.DP_Profile on user.Id equals profile.UserId
                                            where user.CompanyId == filterRequestParam.CompanyId
                                            select profile.CompanyCAStatus).FirstOrDefault();
                            if (locationType.Equals(Shared.Zip))
                            {
                                zipList = GetZipList(0, filterRequestParam.CompanyId, 0).Select(x => x.ZipCode).ToList();
                            }
                            else
                            {
                                stateList = GetStateList(0, filterRequestParam.CompanyId, 0).Select(x => x.SateName).ToList();
                                countyList = GetCountyList(0, filterRequestParam.CompanyId, 0).Select(x => x.CountyName).ToList();
                                cityList = GetCityList(0, filterRequestParam.CompanyId, 0).Select(x => x.CityName).ToList();
                            }
                        }
                    }
                }
                #endregion
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Used to get the Staff details after apply filter
        /// </summary>
        /// <param name="filterRequestParam">filterRequestParam</param>
        /// <param name="finallist">finallist</param>
        /// <returns>IEnumerable<ICResponseParam></returns>
        /// <createdby>bobi</createdby>
        /// <createddate>3 june 2014</createddate>
        private IEnumerable<InternalstaffResponseParam> getstaffafterfilter(FilterRequestParam filterRequestParam, IEnumerable<InternalstaffResponseParam> finallist)
        {
            try
            {
                if (filterRequestParam.type.Equals(2))
                {
                    SetGlobalVariableForCommFilter(filterRequestParam, Shared.Staff);
                }
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (finallist != null && finallist.Count() > 0)
                    {
                        if (filterRequestParam.type.Equals(2))
                        {

                            if (titlefilters.Count > 0)
                            {
                                var titlefilterquery = (from list in finallist
                                                        join title in objDecisionPointEntities.DP_TitleMapping
                                                            //on list.Id equals title.UserId
                                                         on new { a = list.Id, b = list.companyId } equals new { a = title.UserId, b = title.CreatedCompanyId }
                                                        join titlemaster in objDecisionPointEntities.DP_TitleMaster
                                                        on title.TitleId equals titlemaster.Id
                                                        where titlemaster.IsDeleted == false && titlemaster.IsActive == true
                                                        select new { list, titlemaster }).Distinct().ToList();

                                if (!titlefilters.Contains(Shared.All))
                                {
                                    finallist = (from list in titlefilterquery
                                                 where titlefilters.Contains(list.titlemaster.Title)
                                                 select list.list).Distinct().ToList();

                                }

                            }
                            if (servicefilters.Count > 0)
                            {
                                var servicefilterquery = (from list in finallist
                                                          join service in objDecisionPointEntities.DP_ServiceMapping
                                                          on list.Id equals service.UserId
                                                          join servicemaster in objDecisionPointEntities.DP_ServicesMaster
                                                          on service.ServiceId equals servicemaster.Id
                                                          where servicemaster.IsDeleted == false && servicemaster.IsActive == true && service.IsActive == true
                                                          select new { list, servicemaster }).Distinct().ToList();
                                if (!servicefilters.Contains(Shared.All))
                                {
                                    //var inserfilter = serviceIds.Select(x => int.Parse(x)).ToList();
                                    finallist = (from list in servicefilterquery
                                                 where serviceIds.Contains(list.servicemaster.Id)
                                                 select list.list).Distinct().ToList();

                                }
                            }
                            if (!string.IsNullOrEmpty(locationType))
                            {
                                if (locationType.Equals(Shared.Zip))
                                {
                                    if (zipList.Count > 0)
                                    {
                                        finallist = (from list in finallist
                                                     join zipcode in objDecisionPointEntities.DP_ZipMapping
                                                     on list.Id equals zipcode.UserId
                                                     where zipList.Contains(zipcode.ZipCode)
                                                     select list).Distinct().ToList();
                                    }
                                }
                                else if (locationType.Equals(Shared.State))
                                {
                                    if (stateList.Count > 0)
                                    {
                                        //filter as per states
                                        finallist = (from list in finallist
                                                     join state in objDecisionPointEntities.DP_StateMapping
                                                     on list.Id equals state.UserId
                                                     where stateList.Contains(state.StateName)
                                                     select list).Distinct().ToList();
                                        //filter as per county
                                        finallist = (from list in finallist
                                                     join county in objDecisionPointEntities.DP_CountyMapping
                                                     on list.Id equals county.UserId
                                                     where countyList.Contains(county.CountyName)
                                                     select list).Distinct().ToList();
                                        //filter as per city
                                        finallist = (from list in finallist
                                                     join city in objDecisionPointEntities.DP_CityMapping
                                                     on list.Id equals city.UserId
                                                     where cityList.Contains(city.CityName)
                                                     select list).Distinct().ToList();

                                    }
                                }
                            }


                        }
                        else if (filterRequestParam.type.Equals(0))
                        {

                            if (!string.IsNullOrEmpty(filterRequestParam.servicefilter))
                            {

                                int seriveid = 0;
                                seriveid = Convert.ToInt32(filterRequestParam.servicefilter, CultureInfo.InvariantCulture);

                                var servicefilterquery = (from list in finallist
                                                          join service in objDecisionPointEntities.DP_ServiceMapping
                                                          on list.Id equals service.UserId
                                                          join servicemaster in objDecisionPointEntities.DP_ServicesMaster
                                                          on service.ServiceId equals servicemaster.Id
                                                          where servicemaster.Id == seriveid &&
                                                          servicemaster.IsDeleted == false && servicemaster.IsActive == true && service.IsActive == true && service.ParentCompanyId == filterRequestParam.CompanyId
                                                          select list).Distinct().ToList();

                                servicefilterquery = servicefilterquery.Union(from list in finallist
                                                                              where list.UserType == Shared.Company
                                                                              select list).Distinct().ToList();
                                finallist = servicefilterquery;

                            }
                        }
                    }
                }
                return finallist;
            }
            catch
            {

                throw;
            }
        }


        /// <summary>
        /// Used For get the internal staff detail of particular company
        /// </summary>
        /// <param name="UserId"></param>
        /// <param name="CompanyId"></param>
        /// <param name="locationfilter"></param>
        /// <param name="rolefilter"></param>
        /// <param name="servicefilter"></param>
        /// <param name="titlefilter"></param>
        /// <param name="type"></param>
        /// <returns>retrun the req documemnt of particular user</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 26 2013</createdDate>
        public IEnumerable<ICResponseParam> GetICdetail(FilterRequestParam filterRequestParam)
        {
            IEnumerable<ICResponseParam> finallist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (filterRequestParam.type.Equals(0) || filterRequestParam.type.Equals(1))
                    {
                        bool isactive = false;
                        if (filterRequestParam.type.Equals(1))
                        {
                            isactive = true;
                        }

                        // entity query for fetch individual reqiured documents record  as per user Id
                        var query = (from staff in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     join user in objDecisionPointEntities.DP_User
                                     on staff.VendorId equals user.Id
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on user.Id equals profile.UserId
                                     join VTM in objDecisionPointEntities.DP_VendorTypeMapping
                                     on new { a = (int)(staff.VendorId == null ? 0 : staff.VendorId), b = staff.CompanyId } equals new { a = VTM.UserId, b = VTM.CreaterCompanyId }
                                     into VT
                                     from FVT in VT.DefaultIfEmpty().Where(x => x.IsDefault == true)
                                     join VenMaster in objDecisionPointEntities.DP_VendorType
                                    on FVT.VendorTypeId equals VenMaster.Id
                                    into Vmaster
                                     from FVenmasterT in Vmaster.DefaultIfEmpty()
                                     where staff.CompanyId == filterRequestParam.CompanyId
                                     && user.IsActive == true && staff.IsActive == isactive && profile.UserType == Shared.IC
                                     //&& staff.Status == 1 && user.IsRegistered == true
                                     select new ICResponseParam
                                     {
                                         Fname = profile.Firstname,
                                         Lname = profile.LastName,
                                         EmailId = user.EmailId,
                                         Phone = profile.OfficePhone == null ? string.Empty : profile.OfficePhone,
                                         Id = user.Id,
                                         IsActive = (bool)(user.IsActive == null ? false : user.IsActive),
                                         BusinessName = profile.BusinessName == null ? string.Empty : profile.BusinessName,
                                         CompanyId = user.CompanyId,
                                         InvitationStatus = (bool)(user.IsRegistered == null ? false : user.IsRegistered),
                                         VTId = FVenmasterT.Id == null ? 0 : FVenmasterT.Id,
                                         VType = FVenmasterT.VendorType == null ? string.Empty : FVenmasterT.VendorType,
                                         LastInviteMailDate = staff.LastInvitationDate,
                                         IsRegistered = user.IsRegistered
                                     }).Distinct().OrderBy(x => x.VType).ToList();
                        finallist = query;
                    }
                    else if (filterRequestParam.type.Equals(3))
                    {
                        // entity query for fetch individual reqiured documents record  as per user Id
                        var query = (from staff in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     join user in objDecisionPointEntities.DP_User
                                     on staff.VendorId equals user.Id
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on user.Id equals profile.UserId
                                     where staff.CompanyId == filterRequestParam.CompanyId
                                     && staff.Invitationstatus == true && user.IsActive == true && staff.IsActive == true
                                     && profile.UserType == Shared.IC && staff.Status == 1 && user.IsRegistered == true
                                     //&& staff.Status == 1 && user.IsRegistered == true
                                     select new ICResponseParam
                                     {
                                         Fname = profile.Firstname,
                                         Lname = profile.LastName,
                                         EmailId = user.EmailId,
                                         Phone = profile.CellNumber,
                                         Id = user.Id,
                                         IsActive = (bool)(user.IsActive == null ? false : user.IsActive),
                                         BusinessName = profile.BusinessName == null ? string.Empty : profile.BusinessName,
                                         CompanyId = user.CompanyId,
                                         InvitationStatus = (bool)(staff.Invitationstatus == null ? false : staff.Invitationstatus)
                                     }).Distinct().OrderBy(x => x.VType).ToList();
                        finallist = query;
                    }
                    else if (filterRequestParam.type.Equals(2))
                    {
                        var query = (from staff in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     join user in objDecisionPointEntities.DP_User
                                     on staff.VendorId equals user.Id
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on user.Id equals profile.UserId
                                     join VTM in objDecisionPointEntities.DP_VendorTypeMapping
                                     on new { a = (int)(staff.VendorId == null ? 0 : staff.VendorId), b = staff.CompanyId } equals new { a = VTM.UserId, b = VTM.CreaterCompanyId }
                                     into VT
                                     from FVT in VT.DefaultIfEmpty()
                                     join VenMaster in objDecisionPointEntities.DP_VendorType
                                    on FVT.VendorTypeId equals VenMaster.Id
                                    into Vmaster
                                     from FVenmasterT in Vmaster.DefaultIfEmpty()
                                     where staff.CompanyId == filterRequestParam.CompanyId
                                         //&& staff.Invitationstatus == true 
                                     && user.IsActive == true
                                     && staff.IsActive == true && profile.UserType == Shared.IC
                                     //&& staff.Status == 1 && user.IsRegistered == true
                                     select new ICResponseParam
                                     {
                                         Fname = profile.Firstname,
                                         Lname = profile.LastName,
                                         EmailId = user.EmailId,
                                         Phone = profile.CellNumber,
                                         Id = user.Id,
                                         IsActive = (bool)(user.IsActive == null ? false : user.IsActive),
                                         BusinessName = profile.BusinessName == null ? string.Empty : profile.BusinessName,
                                         CompanyId = user.CompanyId,
                                         VTId = FVenmasterT.Id == null ? 0 : FVenmasterT.Id,
                                         VType = FVenmasterT.VendorType == null ? string.Empty : FVenmasterT.VendorType,
                                         InvitationStatus = (bool)(staff.Invitationstatus == null ? false : staff.Invitationstatus)
                                     }).Distinct().OrderBy(x => x.VType).ToList();
                        finallist = query;

                    }


                }
                //get Ic details after filter if filter is apply
                finallist = geticafterfilter(filterRequestParam, finallist).ToList();
                return finallist;
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to get the IC details after apply filter
        /// </summary>
        /// <param name="filterRequestParam">filterRequestParam</param>
        /// <param name="finallist">finallist</param>
        /// <returns>IEnumerable<ICResponseParam></returns>
        /// <createdby>bobi</createdby>
        /// <createddate>3 june 2014</createddate>
        private IEnumerable<ICResponseParam> geticafterfilter(FilterRequestParam filterRequestParam, IEnumerable<ICResponseParam> finalList)
        {
            try
            {
                if (filterRequestParam.type.Equals(2))
                {
                    SetGlobalVariableForCommFilter(filterRequestParam, Shared.IC);
                }
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (finalList != null && finalList.Count() > 0)
                    {
                        if (filterRequestParam.type.Equals(2))
                        {

                            if (servicefilters.Count > 0)
                            {
                                var servicefilterquery = (from list in finalList
                                                          join service in objDecisionPointEntities.DP_ServiceMapping
                                                          on list.Id equals service.UserId
                                                          join servicemaster in objDecisionPointEntities.DP_ServicesMaster
                                                          on service.ServiceId equals servicemaster.Id
                                                          where servicemaster.IsDeleted == false && servicemaster.IsActive == true && service.IsActive == true
                                                          select new { list, servicemaster }).Distinct().ToList();
                                if (!servicefilters.Contains(Shared.All))
                                {
                                    var inserfilter = servicefilters.Select(x => int.Parse(x)).ToList();
                                    finalList = (from list in servicefilterquery
                                                 where inserfilter.Contains(list.servicemaster.Id)
                                                 select list.list).Distinct().ToList();

                                }
                            }
                            if (!object.Equals(professionalType, null))
                            {
                                if (professionalType.Count > 0)
                                {
                                    finalList = (from list in finalList
                                                 where professionalType.Contains(list.VTId)
                                                 select list).ToList();
                                }
                            }
                            if (!string.IsNullOrEmpty(locationType))
                            {
                                if (locationType.Equals(Shared.Zip))
                                {
                                    if (zipList.Count > 0)
                                    {
                                        finalList = (from list in finalList
                                                     join zipcode in objDecisionPointEntities.DP_ZipMapping
                                                     on list.Id equals zipcode.UserId
                                                     where zipList.Contains(zipcode.ZipCode)
                                                     select list).Distinct().ToList();
                                    }
                                }
                                else if (locationType.Equals(Shared.State))
                                {
                                    if (stateList.Count > 0)
                                    {
                                        //filter as per states
                                        finalList = (from list in finalList
                                                     join state in objDecisionPointEntities.DP_StateMapping
                                                     on list.Id equals state.UserId
                                                     where stateList.Contains(state.StateName)
                                                     select list).Distinct().ToList();
                                        //filter as per county
                                        finalList = (from list in finalList
                                                     join county in objDecisionPointEntities.DP_CountyMapping
                                                     on list.Id equals county.UserId
                                                     where countyList.Contains(county.CountyName)
                                                     select list).Distinct().ToList();
                                        //filter as per city
                                        finalList = (from list in finalList
                                                     join city in objDecisionPointEntities.DP_CityMapping
                                                     on list.Id equals city.UserId
                                                     where cityList.Contains(city.CityName)
                                                     select list).Distinct().ToList();
                                    }
                                }
                            }
                        }
                        else if (filterRequestParam.type.Equals(1))
                        {
                            if (!string.IsNullOrEmpty(filterRequestParam.servicefilter))
                            {
                                int seriveid = 0;
                                seriveid = Convert.ToInt32(filterRequestParam.servicefilter, CultureInfo.InvariantCulture);

                                var servicefilterquery = (from list in finalList
                                                          join VTM in objDecisionPointEntities.DP_ServiceMapping
                                                           on list.Id equals
                                                            VTM.UserId
                                                          join VenMaster in objDecisionPointEntities.DP_ServicesMaster
                                                           on VTM.ServiceId equals VenMaster.Id
                                                          where VenMaster.Id == seriveid && VenMaster.IsDeleted == false && VenMaster.IsActive == true && VTM.IsActive == true
                                                          && VTM.ParentCompanyId == filterRequestParam.CompanyId
                                                          select list).ToList();

                                finalList = servicefilterquery;


                            }
                            if (!string.IsNullOrEmpty(filterRequestParam.vendortypefilter))
                            {

                                IList<int> vendortypecol = new List<int>();
                                vendortypecol = filterRequestParam.vendortypefilter.Split(char.Parse(Shared.DollarSign)).Select(x => Convert.ToInt32(x)).ToList();
                                var vendorfilterquery = (from list in finalList
                                                         where vendortypecol.Contains(list.VTId)
                                                         select list).ToList();
                                finalList = vendorfilterquery;
                            }
                        }
                    }
                }
                return finalList;
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Reactive the staff
        /// </summary>
        /// <param name="id"></param>
        /// <param name="companyId"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 26 2013</createdDate>
        public int Reactivestaff(int id, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //cchek a staff is not active in other company
                    var checkExistence = (from staffMap in objDecisionPointEntities.DP_CompanyStaffMapping
                                          where staffMap.StaffId == id && staffMap.IsActive == true && staffMap.CompanyId != companyId
                                          select staffMap).FirstOrDefault();
                    if (checkExistence == null)
                    {
                        //Get record of that particular messages which we are going to delete
                        var query = (from map in objDecisionPointEntities.DP_CompanyStaffMapping
                                     join user in objDecisionPointEntities.DP_User on
                                     map.StaffId equals user.Id
                                     where user.Id == id && map.CompanyId == companyId
                                     select new { map, user }).FirstOrDefault();
                        if (query != null)
                        {
                            query.user.CompanyId = companyId;
                            query.user.IsActive = true;
                            query.map.IsActive = true;
                            query.map.StatusChangedate = DateTime.Now.Date;
                        }
                    }
                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Reactive the staff
        /// </summary>
        /// <param name="id"></param>
        /// <param name="companyId"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 26 2013</createdDate>
        public int Removetaff(int id, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from map in objDecisionPointEntities.DP_CompanyStaffMapping
                                 join user in objDecisionPointEntities.DP_User on
                                 map.StaffId equals user.Id
                                 where user.Id == id && map.CompanyId == companyId
                                 select new { map, user }).FirstOrDefault();
                    if (query != null)
                    {
                        query.map.IsActive = false;
                        query.map.StatusChangedate = DateTime.Now.Date;
                        query.user.IsActive = false;
                    }
                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }



        /// <summary>
        /// get parent user id of any staff
        /// </summary>
        /// <param name="companyid"></param>
        /// <param name="type"></param>
        /// <returns>list of states</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>dec 21 2013</createdDate>
        /// 
        public int GetParentUserId(string companyid, string type)
        {
            int id = 0;
            try
            {

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (!string.IsNullOrEmpty(type))
                    {
                        if (type.Equals(Shared.Individual))
                        {
                            var query = (from user in objDecisionPointEntities.DP_User
                                         join profile in objDecisionPointEntities.DP_Profile
                                         on user.Id equals profile.UserId
                                         where user.CompanyId == companyid && (profile.UserType == Shared.Company || profile.UserType == Shared.SuperAdmin)
                                         select new { user.Id }).FirstOrDefault();
                            id = Convert.ToInt32(query.Id);
                        }
                        else if (type.Equals(Shared.Staff))
                        {
                            if (!string.IsNullOrEmpty(companyid))
                            {
                                id = Convert.ToInt32(companyid.Split(',')[1], CultureInfo.InvariantCulture);
                                companyid = companyid.Split(',')[0];
                            }
                            var userDetails = (from user in objDecisionPointEntities.DP_User
                                               where user.CompanyId == companyid && user.Id == id
                                               select new { user.CreatedBy }).FirstOrDefault();
                            id = Convert.ToInt32(userDetails.CreatedBy, CultureInfo.InvariantCulture);
                        }
                        else if (type.Equals(Shared.Company) || type.Equals(Shared.IC))
                        {
                            var query = (from user in objDecisionPointEntities.DP_User
                                         where user.CompanyId == companyid
                                         select new { user.CreatedBy }).FirstOrDefault();
                            id = Convert.ToInt32(query.CreatedBy, CultureInfo.InvariantCulture);
                        }
                        else if (type.Equals(Shared.GetCompanyid))
                        {
                            int userid = Convert.ToInt32(companyid, CultureInfo.InvariantCulture);
                            var query = (from user in objDecisionPointEntities.DP_User
                                         where user.Id == userid
                                         select new { user.CompanyId }).FirstOrDefault();
                            id = Convert.ToInt32(query.CompanyId, CultureInfo.InvariantCulture);
                        }
                    }
                }
            }
            catch
            {
                throw;
            }
            return id;
        }

        /// <summary>
        /// get patent user type
        /// </summary>
        /// <param name="companyId">parent CompanyId</param>
        /// <returns>user type</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 3 2014</createdDate>
        public string GetParentUserType(int companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.Id == companyId
                                 select profile.UserType).FirstOrDefault();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get state list from zip
        /// </summary>
        /// <param name="userId">int</param>
        /// <returns>list of states</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 3 2014</createdDate>
        public IList<StateResponseParam> GetStateListFromZip(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from zip in objDecisionPointEntities.DP_ZipMapping
                                 join zipcode in objDecisionPointEntities.DP_ZipCode
                                 on zip.ZipCode equals zipcode.Zip
                                 join state in objDecisionPointEntities.DP_State
                                 on zipcode.StateAbbre equals state.StateAbbre
                                 where zip.UserId == userId
                                 select new StateResponseParam
                                 {
                                     SateName = state.State,
                                     Abbrebiation = state.StateAbbre
                                 }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get city name by state
        /// </summary>
        /// <param name="stateName">string</param>
        /// <param name="userId">int</param>
        /// <returns>list of states</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 3 2014</createdDate>
        public IList<CityResponseParam> GetCityListByStateName(string stateName, int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from state in objDecisionPointEntities.DP_State
                               where state.State == stateName
                               select state.StateAbbre).FirstOrDefault();

                    var query = (from cityMapping in objDecisionPointEntities.DP_CityMapping
                                 join city in objDecisionPointEntities.DP_City
                                 on cityMapping.CityName.Remove(cityMapping.CityName.Length - 4) equals city.City
                                 where cityMapping.UserId == userId && city.StateAbbre == res
                                 select new CityResponseParam
                                 {
                                     CityId = city.Id,
                                     CityName = cityMapping.CityName,
                                 }).ToList();


                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get county name by state
        /// </summary>
        /// <param name="stateName">string</param>
        /// <param name="userId"></param>
        /// <returns>list of states</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 6 2014</createdDate>
        public IList<CountyResponseParam> GetCountyListByStateName(string stateName, int userId)
        {
            try
            {
                List<string> myList = stateName.Split(',').ToList();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from state in objDecisionPointEntities.DP_State
                               where myList.Contains(state.State) || myList.Contains(state.StateAbbre)
                               select state.StateAbbre).ToList();

                    var query = (from countyMapping in objDecisionPointEntities.DP_CountyMapping
                                 join county in objDecisionPointEntities.DP_County
                                 on countyMapping.CountyName.Remove(countyMapping.CountyName.Length - 4) equals county.County
                                 where countyMapping.UserId == userId && res.Contains(county.StateAbbre)
                                 select new CountyResponseParam
                                 {
                                     CountyId = county.Id,
                                     CountyName = countyMapping.CountyName,
                                     OptionsVal = countyMapping.Options,
                                 }).ToList();

                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get zip by state name
        /// </summary>
        /// <param name="stateName"></param>
        /// <param name="userId"></param>
        /// <returns>list of states</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 7 2014</createdDate>
        public IList<ZipResponseParam> GetZipListByStateName(string stateName, int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from state in objDecisionPointEntities.DP_State
                               where state.State == stateName
                               select state.StateAbbre).FirstOrDefault();

                    var query = (from zipcode in objDecisionPointEntities.DP_ZipCode
                                 join zip in objDecisionPointEntities.DP_ZipMapping
                                on zipcode.Zip equals zip.ZipCode
                                 where zip.UserId == userId && zipcode.StateAbbre == res
                                 select new ZipResponseParam
                                 {
                                     ZipId = zipcode.Id,
                                     ZipCode = zip.ZipCode
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }



        /// <summary>
        /// get zip list
        /// </summary>
        /// <param name="userId"></param>
        /// <returns>list of zip</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 7 2014</createdDate>
        public IList<ZipResponseParam> GetZipList(int userId, string companyId, int type)
        {
            try
            {
                IList<ZipResponseParam> ziplist = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //0 for company based zip list
                    if (type.Equals(0))
                    {
                        var companybasedzipcode = (from zipMapping in objDecisionPointEntities.DP_ZipMapping
                                                   // join zip in objDecisionPointEntities.DP_ZipCode
                                                   // on zipMapping.ZipCode equals zip.Zip
                                                   where zipMapping.CompanyId == companyId && zipMapping.IsCompanyBased == true
                                                   select new ZipResponseParam
                                                   {

                                                       ZipCode = zipMapping.ZipCode,
                                                       OptionsVal = zipMapping.Options

                                                   }).Distinct().ToList();
                        ziplist = companybasedzipcode;
                    }
                    //1 for staff based
                    else if (type.Equals(1))
                    {
                        var userziplist = (from zipMapping in objDecisionPointEntities.DP_ZipMapping
                                           //join zip in objDecisionPointEntities.DP_ZipCode
                                           // on zipMapping.ZipCode equals zip.Zip
                                           where zipMapping.UserId == userId && zipMapping.IsCompanyBased == false
                                           select new ZipResponseParam
                                           {

                                               ZipCode = zipMapping.ZipCode,
                                               OptionsVal = zipMapping.Options

                                           }).Distinct().ToList();
                        ziplist = userziplist;
                    }
                    //3 for communcation based and consider useris parameter as Doc Id
                    else if (type.Equals(3))
                    {
                        var userziplist = (from zipMapping in objDecisionPointEntities.DP_CommRecipientFilter
                                           where zipMapping.DeliveredCompanyId == companyId && zipMapping.DocId == userId
                                           && zipMapping.Filtervalue == Shared.Zip
                                           select new ZipResponseParam
                                           {

                                               ZipCode = zipMapping.CoverageArea,
                                               OptionsVal = zipMapping.CoverageArea

                                           }).Distinct().ToList();
                        ziplist = userziplist;
                    }
                    return ziplist;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get zip list by seleted city
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="CityName"></param>
        /// <returns>IList<ZipResponseParam></returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 14 2014</createdDate>
        public IList<ZipResponseParam> GetZipListBySelectedCity(int userId, string CityName)
        {
            try
            {
                List<string> myList = CityName.Split(',').ToList();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from zipMapping in objDecisionPointEntities.DP_ZipMapping
                                 join zip in objDecisionPointEntities.DP_ZipCode
                                 on zipMapping.ZipCode equals zip.Zip
                                 where zipMapping.UserId == userId && myList.Contains(zip.City)
                                 select new ZipResponseParam
                                 {
                                     ZipId = zip.Id,
                                     ZipCode = zipMapping.ZipCode,
                                     OptionsVal = zipMapping.Options
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region Admin & Super Admin Settings
        /// <summary>
        /// used for added the new title name
        /// </summary>
        /// <param name="titleName"></param>
        /// <param name="CompanyId">string</param>
        /// <param name="UserId"></param>
        /// <returns>return one if title is saved else retrun zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>jan 14 2014</createdDate>
        public int AddTitle(string titleName, string CompanyId, int UserId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from cus in objDecisionPointEntities.DP_TitleMaster
                               where cus.Title == titleName && cus.CompanyId == CompanyId
                               select cus).FirstOrDefault();

                    if (res != null)
                    {
                        return -1;
                    }
                    else
                    {
                        DP_TitleMaster objDPTitleMaster = new DP_TitleMaster
                        {
                            Title = titleName,
                            IsDeleted = false,
                            IsActive = true,
                            CompanyId = CompanyId,
                            CreatedBy = UserId,
                            CreatedDate = DateTime.Now.Date
                        };
                        objDecisionPointEntities.DP_TitleMaster.Add(objDPTitleMaster);

                        return objDecisionPointEntities.SaveChanges();
                    }
                }
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// used for added the new client name
        /// </summary>
        /// <param name="clientName">string</param>
        /// <param name="CompanyId">string</param>
        /// <param name="UserId">int</param>
        /// <returns>return one if client is saved else retrun zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>jan 14 2014</createdDate>
        public int AddClient(string clientName, int UserId, string CompanyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from cus in objDecisionPointEntities.DP_ClientMaster
                               where cus.ClientName == clientName && cus.CompanyId == CompanyId
                               select cus).FirstOrDefault();

                    if (res != null)
                    {
                        return -1;
                    }
                    else
                    {

                        DP_ClientMaster objDPClientMaster = new DP_ClientMaster
                        {
                            ClientName = clientName,
                            IsDeleted = false,
                            IsActive = true,
                            CompanyId = CompanyId,
                            CreatedBy = UserId,
                            CreatedDate = DateTime.Now.Date
                        };
                        objDecisionPointEntities.DP_ClientMaster.Add(objDPClientMaster);
                        return objDecisionPointEntities.SaveChanges();
                    }


                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// used for save service trans;ation table
        /// </summary>
        /// <param name="objServiceTranslationTableRequestParam"></param>
        /// <returns>return one if client is saved else retrun zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>jan 19 2014</createdDate>
        public int SaveServiceTranslation(ServiceTranslationTableRequestParam objServiceTranslationTableRequestParam)
        {
            try
            {
                int Inserted = 0;
                IList<string> services = new List<string>();
                IList<string> parentServices = new List<string>();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from servicetrans in objDecisionPointEntities.DP_ServiceTranslationTable
                               where servicetrans.ChildCompanyId == objServiceTranslationTableRequestParam.ChildCompanyId && servicetrans.ParentCompanyId == objServiceTranslationTableRequestParam.ParentCompanyId
                               && servicetrans.CreatedBy == objServiceTranslationTableRequestParam.CreatedByid
                               select servicetrans).ToList();

                    if (res != null && res.Count > 0)
                    {
                        foreach (var service in res)
                        {
                            objDecisionPointEntities.DP_ServiceTranslationTable.Remove(service);
                        }
                    }
                    objDecisionPointEntities.SaveChanges();
                    if (!string.IsNullOrEmpty(objServiceTranslationTableRequestParam.MappedServices))
                    {
                        services = objServiceTranslationTableRequestParam.MappedServices.Split('*');
                    }
                    if (services != null && services.Count > 0)
                    {
                        foreach (var pService in services)
                        {
                            parentServices = pService.Split(':');
                            if (parentServices != null && parentServices.Count > 0)
                            {
                                int parentserviceid = Convert.ToInt32(parentServices[0], CultureInfo.InvariantCulture);
                                foreach (int cService in parentServices[1].Split(',').Select(x => int.Parse(x)))
                                {
                                    var ChkResult = (from serviceDetails in objDecisionPointEntities.DP_ServiceTranslationTable
                                                     where serviceDetails.ChildServiceId == cService && serviceDetails.ParentServiceId == parentserviceid &&
                                                     serviceDetails.ParentCompanyId == objServiceTranslationTableRequestParam.ParentCompanyId
                                                     && serviceDetails.ChildCompanyId == objServiceTranslationTableRequestParam.ChildCompanyId
                                                     select serviceDetails).ToList();
                                    if (ChkResult.Count == 0)
                                    {
                                        //saved service translation table
                                        DP_ServiceTranslationTable objDPServiceTranslationTable = new DP_ServiceTranslationTable
                                        {
                                            ChildCompanyId = objServiceTranslationTableRequestParam.ChildCompanyId,
                                            ParentCompanyId = objServiceTranslationTableRequestParam.ParentCompanyId,
                                            CreatedBy = objServiceTranslationTableRequestParam.CreatedByid,
                                            ParentServiceId = parentserviceid,
                                            ChildServiceId = cService,
                                            CreatedDate = DateTime.Now.Date
                                        };

                                        objDecisionPointEntities.DP_ServiceTranslationTable.Add(objDPServiceTranslationTable);
                                        Inserted = objDecisionPointEntities.SaveChanges();
                                    }
                                }
                            }
                        }
                    }
                    return Inserted;

                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// used for get the client details
        /// </summary>
        /// <param name="id">string</param>
        /// <param name="type">string</param>
        /// <returns>return client detial in ienumerbale form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>jan 24 2014</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetClient(string type, string id)
        {
            IEnumerable<CompanyDashBoardResponseParam> finalquery = null;
            // int companyID = Convert.ToInt32(ID, CultureInfo.InvariantCulture);
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from profile in objDecisionPointEntities.DP_Profile
                                 join user in objDecisionPointEntities.DP_User
                                 on profile.UserId equals user.Id
                                 join vendormapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                 on user.Id equals vendormapping.VendorId
                                 join flowmapping in objDecisionPointEntities.DP_FlowMapping
                                 on new { a = vendormapping.CreatedBy, b = vendormapping.CompanyId, c = vendormapping.VendorId }
                                 equals new { a = flowmapping.CreatedBy, b = flowmapping.CreatedCompanyId, c = flowmapping.UserId }
                                 // on user.Id equals flowmapping.UserId
                                 join flowmaster in objDecisionPointEntities.DP_FlowMaster
                                 on flowmapping.FlowId equals flowmaster.Id
                                 join docflowmapping in objDecisionPointEntities.DP_DocFlowMapping
                                 on new { a = (int)vendormapping.VendorId, b = vendormapping.CompanyId } equals new { a = docflowmapping.UserId, b = docflowmapping.CreatedCompanyId }
                                 //on user.Id equals docflowmapping.UserId
                                 join docflowmaster in objDecisionPointEntities.DP_DocFlow
                                 on docflowmapping.DocFlowId equals docflowmaster.Id
                                 where vendormapping.CompanyId == id && user.IsActive == true && vendormapping.IsActive == true && flowmaster.Flow == "Client" && vendormapping.Invitationstatus == true && vendormapping.Status == 1 && user.IsRegistered == true && profile.UserType != Shared.IC
                                 select new CompanyDashBoardResponseParam
                                 {
                                     clientName = profile.Firstname,
                                     isDeleted = user.IsActive,
                                     isActive = user.IsActive,
                                     id = (int)vendormapping.VendorId == null ? 0 : (int)vendormapping.VendorId,
                                 }).ToList();

                    //var query = (from client in objDecisionPointEntities.DP_ComapnyVendorMapping
                    //             join flow in objDecisionPointEntities.DP_FlowMapping
                    //             on client.VendorId equals flow.UserId
                    //             join user in objDecisionPointEntities.DP_User
                    //            on client.VendorId equals user.Id
                    //             join profile in objDecisionPointEntities.DP_Profile
                    //             on user.Id equals profile.UserId
                    //             where profile.Firstname != string.Empty && client.CompanyId == (ID == null ? "0" : ID) && user.IsActive == true && client.IsActive == true
                    //             && client.Invitationstatus == true && client.Status == 1 && client.IsDeleted == 1 && user.IsRegistered == true && flow.FlowId == 1
                    //             select new CompanyDashBoardResponseParam
                    //             {
                    //                 clientName = profile.Firstname,
                    //                 isDeleted = user.IsActive,
                    //                 isActive = user.IsActive,
                    //                 id = (int)client.VendorId == null ? 0 : (int)client.VendorId,
                    //             }).ToList().OrderBy(x => x.clientName);
                    finalquery = query;

                    return finalquery;
                }
            }
            catch
            {
                throw;
            }

        }

        /// <summary>
        /// Used for disable and enable the client
        /// </summary>
        /// <param name="clientId"></param>
        /// <param name="isActive"></param>
        /// <returns>return one if client is disable else retrun zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>jan 24 2014</createdDate>
        public int DisaEnaClient(int clientId, bool isActive)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from client in objDecisionPointEntities.DP_ClientMaster
                                 where client.Id == clientId
                                 select client).FirstOrDefault();
                    query.IsActive = isActive;

                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for update the client
        /// </summary>
        /// <param name="clientId"></param>
        /// <param name="clientname"></param>
        /// <returns>return one if client is update else retrun zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>jan 24 2014</createdDate>
        public int UpdateClient(int clientId, string clientname)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from client in objDecisionPointEntities.DP_ClientMaster
                                 where client.Id == clientId
                                 select client).FirstOrDefault();
                    query.ClientName = clientname;

                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// used for get the title details
        /// </summary>
        /// <param name="id">string</param>
        /// <param name="type">string</param>
        /// <returns>return title detial in ienumerbale form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>jan 28 2014</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetTitle(string type, string id)
        {
            IEnumerable<CompanyDashBoardResponseParam> finallist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //get all title[disabled/enabled] details of particular company 
                    if (type.Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.Admin.Trim().ToUpper(CultureInfo.InvariantCulture)))
                    {
                        var query = (from title in objDecisionPointEntities.DP_TitleMaster
                                     where title.IsDeleted == false && title.CompanyId == id
                                     select new CompanyDashBoardResponseParam
                                     {
                                         titleName = title.Title,
                                         isDeleted = title.IsDeleted,
                                         isActive = title.IsActive,
                                         id = title.Id,
                                     }).ToList();
                        finallist = query;
                    }
                    //get title details of particular company which are not disabled
                    else if (type.Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.Company.Trim().ToUpper(CultureInfo.InvariantCulture)))
                    {
                        var query = (from title in objDecisionPointEntities.DP_TitleMaster
                                     where title.IsDeleted == false && title.IsActive == true && title.CompanyId == id
                                     select new CompanyDashBoardResponseParam
                                     {
                                         titleName = title.Title,
                                         isDeleted = title.IsDeleted,
                                         isActive = title.IsActive,
                                         id = title.Id,
                                     }).ToList();
                        finallist = query;
                    }

                }
            }
            catch
            {
                throw;
            }
            return finallist;
        }

        /// <summary>
        /// used for get filter cretaria of communication filter
        /// </summary>
        /// <param name="docId"></param>
        /// <returns>return title detial in ienumerbale form</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>jan 24 2014</createdDate>
        public IList<SaveCommFilterResponseparam> GetCommFilterDetails(int docId, string companyId)
        {
            IList<SaveCommFilterResponseparam> finallist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    finallist = (from commfilter in objDecisionPointEntities.DP_CommRecipientFilter
                                 where commfilter.DocId == docId && commfilter.DeliveredCompanyId == companyId
                                 select new SaveCommFilterResponseparam
                                 {
                                     FilterValue = commfilter.Filtervalue,
                                     FilterType = commfilter.FilterType,
                                     CoverageAreaVal = commfilter.CoverageArea
                                 }).ToList();

                    if (finallist.Count < 0)
                    {
                        finallist = (from commfilter in objDecisionPointEntities.DP_CommRecipientFilter
                                     join doc in objDecisionPointEntities.DP_DocumentDetails on commfilter.DeliveredCompanyId equals doc.CompanyId
                                     where commfilter.DocId == docId
                                     select new SaveCommFilterResponseparam
                                     {
                                         FilterValue = commfilter.Filtervalue,
                                         FilterType = commfilter.FilterType,
                                         CoverageAreaVal = commfilter.CoverageArea
                                     }).ToList();
                    }

                    return finallist;

                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for disable and enable the title
        /// </summary>
        /// <param name="titleId"></param>
        /// <param name="isActive"></param>
        /// <returns>return one if title is disable else retrun zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>jan 30 2014</createdDate>
        public int DisaEnaTitle(int titleId, bool isActive)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from title in objDecisionPointEntities.DP_TitleMaster
                                 where title.Id == titleId
                                 select title).FirstOrDefault();
                    query.IsActive = isActive;

                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for update the title
        /// </summary>
        /// <param name="titleId"></param>
        /// <param name="titlename"></param>
        /// <param name="companyID"></param>
        /// <returns>return one if client is update else retrun zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>jan 24 2014</createdDate>
        public int UpdateTitle(int titleId, string titlename, string companyID)
        {
            int res = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query1 = (from title in objDecisionPointEntities.DP_TitleMaster
                                  where title.Title == titlename && title.CompanyId == companyID
                                  select title).FirstOrDefault();
                    if (query1 != null && !query1.Id.Equals(titleId))
                    {
                        res = -1;

                    }
                    else
                    {
                        var query = (from title in objDecisionPointEntities.DP_TitleMaster
                                     where title.Id == titleId
                                     select title).FirstOrDefault();
                        query.Title = titlename;

                        //Finally saved the changes in local database
                        res = objDecisionPointEntities.SaveChanges();
                    }

                }

            }
            catch
            {
                throw;
            }
            return res;
        }

        /// <summary>
        /// Used to Send invitation
        /// </summary>
        /// <param name="objCompanyDashBoardRequestParam"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        /// <createdBy>Bobi & Sumit</createdBy>
        /// <createdDate>jan 24 2014</createdDate>
        public string SendInvitation(CompanyDashBoardRequestParam objCompanyDashBoardRequestParam, string type)
        {
            #region Objects
            DP_User user = null;
            DP_Profile profile = null;
            DP_TitleMapping title = null;
            DP_FlowMapping flow = null;
            DP_DocFlowMapping docflow = null;
            DP_CompanyStaffMapping dP_CompanyStaffMapping = null;
            JobReqForNewHireRequestParam objJobReqForNewHireRequestParam = null;
            DP_ComapnyVendorMapping dP_ComapnyVendorMapping = null;
            #endregion
            #region Variables
            string ID = string.Empty;
            string genUserId = GenrateUserId();
            string genCompId = GenrateCompanyId();
            bool paymentStatus;
            int DocFlowid = 0;
            #endregion

            try
            {
                if (type.Equals(Shared.Staff))
                {
                    objUserDashBoardResponseParam = new UserDashBoardResponseParam();
                    objUserDashBoardResponseParam = GetAccountDetails(objCompanyDashBoardRequestParam.UserId);
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        #region Staff
                        bool staffexist = false;
                        var existingstaff = (from profiledata in objDecisionPointEntities.DP_Profile
                                             join cus in objDecisionPointEntities.DP_User
                                             on profiledata.UserId equals cus.Id
                                             join mapping in objDecisionPointEntities.DP_CompanyStaffMapping
                                             on cus.Id equals mapping.StaffId
                                             where cus.EmailId == objCompanyDashBoardRequestParam.emailId
                                             && cus.EmailId != string.Empty && cus.IsActive == true
                                             select new { profiledata, cus, mapping }
                              ).FirstOrDefault();
                        if (existingstaff != null)
                        {
                            if (existingstaff.mapping.IsActive)
                            {
                                existingstaff.mapping.IsActive = true;
                                existingstaff.cus.IsActive = true;
                            }
                            objDecisionPointEntities.SaveChanges();
                            userId = existingstaff.cus.Id;
                            companyId = existingstaff.cus.CompanyId;
                            ID = Convert.ToString(existingstaff.cus.UserId, CultureInfo.InvariantCulture) + "," + existingstaff.cus.Password + ", exist";
                            staffexist = true;
                        }
                        if (!staffexist)
                        {
                            var staffuser = (from profiledata in objDecisionPointEntities.DP_Profile
                                             join cus in objDecisionPointEntities.DP_User
                                             on profiledata.UserId equals cus.Id
                                             where cus.EmailId == objCompanyDashBoardRequestParam.emailId //&& cus.IsActive == true
                                             select new { profiledata, cus }
                                 ).FirstOrDefault();
                            if (staffuser == null)
                            {
                                #region Insert In table



                                user = new DP_User()
                                {
                                    // Add user profile
                                    EmailId = objCompanyDashBoardRequestParam.emailId,
                                    Password = objCompanyDashBoardRequestParam.password,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    ModifyBy = objCompanyDashBoardRequestParam.UserId,
                                    IsTemp = true,
                                    UserId = genUserId,
                                    CompanyId = objCompanyDashBoardRequestParam.CompId,
                                    IsActive = true,
                                    IsDeleted = false,
                                    IsRegistered = false

                                };
                                objDecisionPointEntities.DP_User.Add(user);
                                //Add profile details
                                profile = new DP_Profile()
                                {
                                    UserId = Convert.ToInt32(userId, CultureInfo.InvariantCulture),
                                    Firstname = objCompanyDashBoardRequestParam.fName,
                                    LastName = objCompanyDashBoardRequestParam.lName,
                                    IsPayment = true,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    ModifyBy = objCompanyDashBoardRequestParam.UserId,
                                    UserType = Shared.Individual,
                                    BusinessName = objCompanyDashBoardRequestParam.companyName,
                                    StreetNumber = objUserDashBoardResponseParam.StreetNumber,
                                    Street = objUserDashBoardResponseParam.StreetName,
                                    Direction = objUserDashBoardResponseParam.Direction,
                                    OfficePhone = objUserDashBoardResponseParam.officePhone,
                                    CompanyLogo = objUserDashBoardResponseParam.companylogo

                                };
                                objDecisionPointEntities.DP_Profile.Add(profile);
                                // add data in staff mapping
                                dP_CompanyStaffMapping = new DP_CompanyStaffMapping()
                                {
                                    CompanyId = objCompanyDashBoardRequestParam.CompId,
                                    StaffId = Convert.ToInt32(userId, CultureInfo.InvariantCulture),
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date,
                                    Invitationstatus = false,
                                    Status = 0,
                                    IsActive = true,
                                    StatusChangedate = DateTime.Now.Date,
                                    IsMailSent = objCompanyDashBoardRequestParam.IsMailSent,
                                    LastInvitationDate = currentdate
                                };
                                objDecisionPointEntities.DP_CompanyStaffMapping.Add(dP_CompanyStaffMapping);

                                //Add Data in Title Mapping
                                if (objCompanyDashBoardRequestParam.titleId > 0)
                                {
                                    title = new DP_TitleMapping()
                                    {
                                        TitleId = objCompanyDashBoardRequestParam.titleId,
                                        UserId = userId,
                                        CreatedCompanyId = objCompanyDashBoardRequestParam.CompId,
                                        CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                        CreatedDate = DateTime.Now.Date,
                                    };
                                    objDecisionPointEntities.DP_TitleMapping.Add(title);
                                }
                                objDecisionPointEntities.SaveChanges();
                                userId = user.Id;
                                companyId = user.CompanyId;
                                //append company id with user id for set the last invitation date if user not exist
                                ID = Convert.ToString(user.UserId + Shared.Astrik + user.CompanyId, CultureInfo.InvariantCulture);
                                #endregion
                            }
                            else
                            {
                                userId = staffuser.cus.Id;
                                companyId = staffuser.cus.CompanyId;
                                ID = Convert.ToString(staffuser.cus.UserId, CultureInfo.InstalledUICulture) + "," + staffuser.cus.Password + ", exist";
                            }
                        }
                        #endregion
                    }
                    //Insert communication for Staff
                    InsertReqirementCommToStaff(userId, objCompanyDashBoardRequestParam.UserId, Shared.Staff, companyId);

                }
                else if (type.Equals(Shared.VendorWithoutId) || type.Equals(Shared.VendorWithId))
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        #region Vendor Without ID & with ID
                        bool vendorexist = false;
                        var existingvendor = (from profiledata in objDecisionPointEntities.DP_Profile
                                              join cus in objDecisionPointEntities.DP_User
                                              on profiledata.UserId equals cus.Id
                                              join mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                              on cus.Id equals mapping.VendorId
                                              where (cus.EmailId == objCompanyDashBoardRequestParam.emailId)
                                              && mapping.CompanyId == objCompanyDashBoardRequestParam.CompId && cus.EmailId != string.Empty
                                              select new { profiledata, cus, mapping }
                                ).FirstOrDefault();
                        if (existingvendor != null)
                        {
                            if (!existingvendor.mapping.IsActive)
                            {
                                existingvendor.mapping.IsActive = true;
                                existingvendor.cus.IsActive = true;

                            }
                            objDecisionPointEntities.SaveChanges();
                            userId = existingvendor.cus.Id;
                            companyId = existingvendor.cus.CompanyId;
                            ID = Convert.ToString(existingvendor.cus.UserId, CultureInfo.InvariantCulture) + "," + existingvendor.cus.Password + ", exist";
                            vendorexist = true;
                        }
                        if (!vendorexist)
                        {
                            var vendoruser = (from profiledata in objDecisionPointEntities.DP_Profile
                                              join cus in objDecisionPointEntities.DP_User
                                              on profiledata.UserId equals cus.Id
                                              where (cus.EmailId == objCompanyDashBoardRequestParam.emailId) && cus.EmailId != string.Empty
                                              select new { cus.Id, cus.UserId, cus.EmailId, cus.Password, cus.CompanyId, cus.CreatedBy }
                                 ).FirstOrDefault();
                            if (vendoruser == null)
                            {
                                #region Insert new user record

                                user = new DP_User()
                                {
                                    // Add user profile
                                    EmailId = objCompanyDashBoardRequestParam.emailId,
                                    Password = objCompanyDashBoardRequestParam.password,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    ModifyBy = objCompanyDashBoardRequestParam.UserId,
                                    IsTemp = true,
                                    UserId = genUserId,
                                    CompanyId = genCompId,
                                    IsActive = true,
                                    IsDeleted = false,
                                    IsRegistered = false
                                };
                                objDecisionPointEntities.DP_User.Add(user);

                                //Add profile details
                                profile = new DP_Profile()
                                {
                                    UserId = Convert.ToInt32(userId, CultureInfo.InvariantCulture),
                                    Firstname = objCompanyDashBoardRequestParam.fName,
                                    LastName = objCompanyDashBoardRequestParam.lName,
                                    IsPayment = false,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    ModifyBy = objCompanyDashBoardRequestParam.UserId,
                                    UserType = Shared.Company,
                                    BusinessName = objCompanyDashBoardRequestParam.companyName
                                };
                                objDecisionPointEntities.DP_Profile.Add(profile);
                                if (objCompanyDashBoardRequestParam.flowId > 0)
                                {
                                    //Added Flow
                                    flow = new DP_FlowMapping()
                                    {
                                        FlowId = objCompanyDashBoardRequestParam.flowId,
                                        UserId = userId,
                                        CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                        UserCompanyId = genCompId,
                                        CreatedCompanyId = objCompanyDashBoardRequestParam.CompId

                                    };
                                    objDecisionPointEntities.DP_FlowMapping.Add(flow);
                                }

                                if (objCompanyDashBoardRequestParam.docflowId > 0)
                                {
                                    docflow = new DP_DocFlowMapping()
                                    {
                                        DocFlowId = objCompanyDashBoardRequestParam.docflowId,
                                        UserId = Convert.ToInt32(user.Id, CultureInfo.InvariantCulture),
                                        CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                        UserCompanyId = genCompId,
                                        CreatedCompanyId = objCompanyDashBoardRequestParam.CompId
                                    };
                                    objDecisionPointEntities.DP_DocFlowMapping.Add(docflow);
                                }

                                dP_ComapnyVendorMapping = new DP_ComapnyVendorMapping()
                                {
                                    VendorId = Convert.ToInt32(userId, CultureInfo.InvariantCulture),
                                    CompanyId = objCompanyDashBoardRequestParam.CompId,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date,
                                    Invitationstatus = false,
                                    PaymentType = 2,
                                    Status = 0,
                                    IsDeleted = 0,
                                    IsActive = true,
                                    StatusChangedate = DateTime.Now.Date,
                                    ReceiverCompanyId = genCompId,
                                    IsMailSent = objCompanyDashBoardRequestParam.IsMailSent,
                                    LastInvitationDate = currentdate
                                };
                                objDecisionPointEntities.DP_ComapnyVendorMapping.Add(dP_ComapnyVendorMapping);
                                objDecisionPointEntities.SaveChanges();
                                userId = user.Id;
                                companyId = user.CompanyId;
                                ID = Convert.ToString(user.UserId + Shared.Astrik + user.CompanyId, CultureInfo.InvariantCulture);
                                #endregion
                            }
                            else
                            {
                                #region inser record in mapping
                                //check flow existence
                                var existvendorflow = (from flowmap in objDecisionPointEntities.DP_FlowMapping
                                                       where flowmap.UserId == vendoruser.Id && flowmap.FlowId == objCompanyDashBoardRequestParam.flowId
                                                       && flowmap.CreatedCompanyId == objCompanyDashBoardRequestParam.CompId &&
                                                        flowmap.CreatedBy == objCompanyDashBoardRequestParam.UserId &&
                                                        flowmap.UserCompanyId == vendoruser.CompanyId
                                                       select new { flowmap.FlowId }).FirstOrDefault();
                                if (existvendorflow == null)
                                {
                                    flow = new DP_FlowMapping()
                                    {
                                        FlowId = objCompanyDashBoardRequestParam.flowId,
                                        UserId = vendoruser.Id,
                                        CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                        UserCompanyId = vendoruser.CompanyId,
                                        CreatedCompanyId = objCompanyDashBoardRequestParam.CompId
                                    };

                                    objDecisionPointEntities.DP_FlowMapping.Add(flow);
                                }
                                else { objCompanyDashBoardRequestParam.flowId = Convert.ToInt32(existvendorflow.FlowId); }

                                //check doc flow
                                var existdocflow = (from flowmap in objDecisionPointEntities.DP_DocFlowMapping
                                                    where flowmap.UserId == vendoruser.Id && flowmap.DocFlowId == DocFlowid &&
                                                    flowmap.CreatedCompanyId == objCompanyDashBoardRequestParam.CompId &&
                                                    flowmap.CreatedBy == objCompanyDashBoardRequestParam.UserId &&
                                                    flowmap.UserCompanyId == vendoruser.CompanyId
                                                    select new { flowmap.Id }).FirstOrDefault();
                                if (existdocflow == null)
                                {
                                    if (objCompanyDashBoardRequestParam.docflowId > 0)
                                    {
                                        docflow = new DP_DocFlowMapping()
                                        {
                                            DocFlowId = objCompanyDashBoardRequestParam.docflowId,
                                            UserId = vendoruser.Id,
                                            CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                            UserCompanyId = vendoruser.CompanyId,
                                            CreatedCompanyId = objCompanyDashBoardRequestParam.CompId
                                        };
                                        objDecisionPointEntities.DP_DocFlowMapping.Add(docflow);
                                    }
                                }

                                dP_ComapnyVendorMapping = new DP_ComapnyVendorMapping()
                                 {
                                     VendorId = Convert.ToInt32(vendoruser.Id, CultureInfo.InvariantCulture),
                                     CompanyId = objCompanyDashBoardRequestParam.CompId,
                                     CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                     CreatedDate = DateTime.Now.Date,
                                     Invitationstatus = false,
                                     PaymentType = 2,
                                     Status = 0,
                                     IsDeleted = 0,
                                     IsActive = true,
                                     StatusChangedate = DateTime.Now.Date,
                                     ReceiverCompanyId = vendoruser.CompanyId,
                                     IsMailSent = objCompanyDashBoardRequestParam.IsMailSent,
                                     LastInvitationDate = currentdate
                                 };
                                objDecisionPointEntities.DP_ComapnyVendorMapping.Add(dP_ComapnyVendorMapping);
                                objDecisionPointEntities.SaveChanges();
                                userId = vendoruser.Id;
                                companyId = vendoruser.CompanyId;
                                ID = Convert.ToString(vendoruser.UserId + Shared.Astrik + vendoruser.CompanyId, CultureInfo.InvariantCulture) + "," + vendoruser.Password;
                                #endregion
                            }


                        }
                        #endregion
                    }

                    //Insert communication for Vendor
                    InsertReqirementCommToVendor(userId, objCompanyDashBoardRequestParam.UserId, Shared.Company, companyId);
                }
                else if (type.Equals(Shared.IcWithId) || type.Equals(Shared.IcWithoutId))
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        #region IC With Id & without ID
                        bool checkexist = false;
                        if (objCompanyDashBoardRequestParam.PaymentType == 1)
                        {
                            paymentStatus = true;
                        }
                        else
                        {
                            paymentStatus = false;
                        }

                        var existinguser = (from profiledata in objDecisionPointEntities.DP_Profile
                                            join cus in objDecisionPointEntities.DP_User
                                            on profiledata.UserId equals cus.Id
                                            join mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                            on cus.Id equals mapping.VendorId
                                            where (cus.EmailId == objCompanyDashBoardRequestParam.emailId || cus.CompanyId == objCompanyDashBoardRequestParam.companyId || cus.UserId == objCompanyDashBoardRequestParam.companyId) && mapping.CompanyId == objCompanyDashBoardRequestParam.CompId && cus.EmailId != string.Empty
                                            select new { profiledata, cus, mapping }
                                 ).FirstOrDefault();
                        if (existinguser != null)
                        {
                            if (!existinguser.mapping.IsActive)
                            {
                                existinguser.mapping.IsActive = true;
                                existinguser.cus.IsActive = true;
                            }
                            objDecisionPointEntities.SaveChanges();
                            userId = existinguser.cus.Id;
                            companyId = existinguser.cus.CompanyId;
                            ID = Convert.ToString(existinguser.cus.UserId, CultureInfo.InvariantCulture) + "," + existinguser.cus.Password + ", exist";
                            checkexist = true;
                        }
                        if (!checkexist)
                        {

                            var icuser = (from cus in objDecisionPointEntities.DP_User
                                          where (cus.CompanyId == objCompanyDashBoardRequestParam.companyId || cus.UserId == objCompanyDashBoardRequestParam.companyId || (cus.EmailId == objCompanyDashBoardRequestParam.emailId && cus.EmailId != string.Empty))
                                          select cus).FirstOrDefault();


                            if (icuser == null)
                            {
                                #region Insert new record for user

                                user = new DP_User()
                                {
                                    // Add user profile
                                    EmailId = objCompanyDashBoardRequestParam.emailId,
                                    Password = objCompanyDashBoardRequestParam.password,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    ModifyBy = objCompanyDashBoardRequestParam.UserId,
                                    IsTemp = true,
                                    UserId = genUserId,
                                    CompanyId = genCompId,
                                    IsActive = true,
                                    IsDeleted = false,
                                    IsRegistered = false

                                };
                                objDecisionPointEntities.DP_User.Add(user);

                                //Add profile details
                                profile = new DP_Profile()
                                {
                                    UserId = Convert.ToInt32(userId, CultureInfo.InvariantCulture),
                                    Firstname = objCompanyDashBoardRequestParam.fName,
                                    LastName = objCompanyDashBoardRequestParam.lName,
                                    IsPayment = paymentStatus,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    ModifyBy = objCompanyDashBoardRequestParam.UserId,
                                    UserType = Shared.IC,
                                    BusinessName = objCompanyDashBoardRequestParam.companyName
                                };
                                objDecisionPointEntities.DP_Profile.Add(profile);

                                //Add Data in Flow Mapping
                                flow = new DP_FlowMapping()
                                {
                                    FlowId = objCompanyDashBoardRequestParam.flowId,//flow id 2 is used for vendor
                                    UserId = userId,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    UserCompanyId = genCompId,
                                    CreatedCompanyId = objCompanyDashBoardRequestParam.CompId
                                };
                                objDecisionPointEntities.DP_FlowMapping.Add(flow);

                                if (objCompanyDashBoardRequestParam.flowId > 0)
                                {
                                    //Added Doc Flow
                                    docflow = new DP_DocFlowMapping()
                                    {
                                        DocFlowId = 2,//flow id 2 is used for vendor
                                        UserId = Convert.ToInt32(userId, CultureInfo.InvariantCulture),
                                        CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                        UserCompanyId = genCompId,
                                        CreatedCompanyId = objCompanyDashBoardRequestParam.CompId
                                    };
                                    objDecisionPointEntities.DP_DocFlowMapping.Add(docflow);
                                }



                                //vendor type
                                if (objCompanyDashBoardRequestParam.vendortypeId > 0)
                                {
                                    //Add Data in Permission Mapping
                                    DP_VendorTypeMapping objDP_VendorTypeMapping = new DP_VendorTypeMapping()
                                    {
                                        VendorTypeId = objCompanyDashBoardRequestParam.vendortypeId,
                                        UserId = userId,
                                        UserCompanyId = genCompId,
                                        CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                        CreatedDate = DateTime.Now.Date,
                                        IsActive = true,
                                        CreaterCompanyId = objCompanyDashBoardRequestParam.CompId,
                                        Type = Shared.IC,
                                        IsDefault = true,

                                    };
                                    objDecisionPointEntities.DP_VendorTypeMapping.Add(objDP_VendorTypeMapping);
                                }


                                dP_ComapnyVendorMapping = new DP_ComapnyVendorMapping()
                                {
                                    VendorId = Convert.ToInt32(userId, CultureInfo.InvariantCulture),
                                    CompanyId = objCompanyDashBoardRequestParam.CompId,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date,
                                    Invitationstatus = false,
                                    PaymentType = Convert.ToInt32(objCompanyDashBoardRequestParam.PaymentType),
                                    Status = 0,
                                    IsDeleted = 0,
                                    IsActive = true,
                                    StatusChangedate = DateTime.Now.Date,
                                    ReceiverCompanyId = genCompId,
                                    IsMailSent = objCompanyDashBoardRequestParam.IsMailSent,
                                    LastInvitationDate = currentdate,
                                    IsBgCheckReqiured = objCompanyDashBoardRequestParam.IsBackgroundCheck
                                };
                                objDecisionPointEntities.DP_ComapnyVendorMapping.Add(dP_ComapnyVendorMapping);
                                objDecisionPointEntities.SaveChanges();
                                userId = user.Id;
                                companyId = user.CompanyId;
                                ID = Convert.ToString(user.UserId + Shared.Astrik + user.CompanyId, CultureInfo.InvariantCulture);
                                #endregion
                            }
                            else
                            {
                                #region Insert record in mappings


                                //check doc flow
                                var existdocflow = (from flowmap in objDecisionPointEntities.DP_DocFlowMapping
                                                    where flowmap.UserId == icuser.Id && flowmap.DocFlowId == 1
                                                    && flowmap.CreatedCompanyId == objCompanyDashBoardRequestParam.CompId
                                                    && flowmap.UserCompanyId == icuser.CompanyId &&
                                                    flowmap.CreatedBy == objCompanyDashBoardRequestParam.UserId
                                                    select new { flowmap.Id }).FirstOrDefault();
                                if (existdocflow == null)
                                {
                                    docflow = new DP_DocFlowMapping()
                                    {
                                        DocFlowId = 1,
                                        UserId = icuser.Id,
                                        CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                        UserCompanyId = icuser.CompanyId,
                                        CreatedCompanyId = objCompanyDashBoardRequestParam.CompId
                                    };
                                    objDecisionPointEntities.DP_DocFlowMapping.Add(docflow);
                                }
                                //check flow existence
                                var existvendorflow = (from flowmap in objDecisionPointEntities.DP_FlowMapping
                                                       where flowmap.UserId == icuser.Id && flowmap.FlowId == objCompanyDashBoardRequestParam.flowId
                                                       && flowmap.CreatedCompanyId == objCompanyDashBoardRequestParam.CompId &&
                                                        flowmap.CreatedBy == objCompanyDashBoardRequestParam.UserId &&
                                                        flowmap.UserCompanyId == icuser.CompanyId
                                                       select new { flowmap.FlowId }).FirstOrDefault();
                                if (existvendorflow == null)
                                {
                                    flow = new DP_FlowMapping()
                                    {
                                        FlowId = objCompanyDashBoardRequestParam.flowId,
                                        UserId = icuser.Id,
                                        CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                        UserCompanyId = icuser.CompanyId,
                                        CreatedCompanyId = objCompanyDashBoardRequestParam.CompId
                                    };

                                    objDecisionPointEntities.DP_FlowMapping.Add(flow);
                                }
                                else { objCompanyDashBoardRequestParam.flowId = Convert.ToInt32(existvendorflow.FlowId); }

                                //check vendor type
                                var existVT = (from flowmap in objDecisionPointEntities.DP_VendorTypeMapping
                                               where flowmap.UserId == icuser.Id && flowmap.VendorTypeId == objCompanyDashBoardRequestParam.vendortypeId
                                               && flowmap.CreaterCompanyId == objCompanyDashBoardRequestParam.CompId && flowmap.UserCompanyId == icuser.CompanyId
                                               select new { flowmap.Id }).FirstOrDefault();
                                if (existVT == null)
                                {
                                    DP_VendorTypeMapping objDP_VendorTypeMapping = new DP_VendorTypeMapping()
                                    {
                                        VendorTypeId = objCompanyDashBoardRequestParam.vendortypeId,
                                        UserId = icuser.Id,
                                        UserCompanyId = icuser.CompanyId,
                                        CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                        CreatedDate = DateTime.Now.Date,
                                        IsActive = true,
                                        CreaterCompanyId = objCompanyDashBoardRequestParam.CompId,
                                        IsDefault = true,
                                        Type = Shared.IC
                                    };
                                    objDecisionPointEntities.DP_VendorTypeMapping.Add(objDP_VendorTypeMapping);
                                }


                                // }
                                dP_ComapnyVendorMapping = new DP_ComapnyVendorMapping()
                                {
                                    VendorId = Convert.ToInt32(icuser.Id, CultureInfo.InvariantCulture),
                                    CompanyId = objCompanyDashBoardRequestParam.CompId,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date,
                                    Invitationstatus = false,
                                    PaymentType = Convert.ToInt32(objCompanyDashBoardRequestParam.PaymentType),
                                    Status = 0,
                                    IsDeleted = 0,
                                    IsActive = true,
                                    StatusChangedate = DateTime.Now.Date,
                                    ReceiverCompanyId = icuser.CompanyId,
                                    IsMailSent = objCompanyDashBoardRequestParam.IsMailSent,
                                    LastInvitationDate = currentdate,
                                    IsBgCheckReqiured = objCompanyDashBoardRequestParam.IsBackgroundCheck
                                };
                                objDecisionPointEntities.DP_ComapnyVendorMapping.Add(dP_ComapnyVendorMapping);
                                objDecisionPointEntities.SaveChanges();
                                userId = icuser.Id;
                                companyId = icuser.CompanyId;
                                ID = Convert.ToString(icuser.UserId + Shared.Astrik + icuser.CompanyId, CultureInfo.InvariantCulture) + "," + icuser.Password;
                                #endregion

                            }

                        }
                        #endregion
                    }
                    #region Set New Hired Req
                    objJobReqForNewHireRequestParam = new JobReqForNewHireRequestParam()
                    {
                        companyId = companyId,
                        userId = userId,
                        userType = Shared.IC,
                        parentuserId = objCompanyDashBoardRequestParam.UserId,
                        inviteCompanyId = objCompanyDashBoardRequestParam.CompId,
                        ICTypeId = objCompanyDashBoardRequestParam.vendortypeId

                    };
                    InsertJobComplianceReqforNewHired(objJobReqForNewHireRequestParam);
                    //Insert communication for IC
                    InsertReqirementCommToIC(userId, objCompanyDashBoardRequestParam.UserId, Shared.IC, companyId);
                    #endregion

                }
                else if (type.Equals(Shared.NonClient))
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        #region IC Non Clients
                        bool staffexist = false;
                        var existingstaff = (from profiledata in objDecisionPointEntities.DP_Profile
                                             join cus in objDecisionPointEntities.DP_User
                                             on profiledata.UserId equals cus.Id
                                             join mapping in objDecisionPointEntities.DP_ICNonClientsMapping
                                             on cus.Id equals mapping.InvitedUserId
                                             where (cus.EmailId == objCompanyDashBoardRequestParam.emailId && mapping.InviteeCompanyId == objCompanyDashBoardRequestParam.CompId) && cus.EmailId != string.Empty
                                             select new { profiledata.UserType, cus.UserId, cus.CompanyId, cus.Password }
                              ).FirstOrDefault();
                        if (existingstaff != null)
                        {
                            ID = Convert.ToString(existingstaff.UserId, CultureInfo.InvariantCulture) + "," + existingstaff.Password + ", exist";
                            staffexist = true;
                        }
                        if (!staffexist)
                        {
                            var staffuser = (from profiledata in objDecisionPointEntities.DP_Profile
                                             join cus in objDecisionPointEntities.DP_User
                                             on profiledata.UserId equals cus.Id
                                             where cus.EmailId == objCompanyDashBoardRequestParam.emailId //&& cus.IsActive == true
                                             select new { profiledata, cus }
                                 ).FirstOrDefault();
                            if (staffuser == null)
                            {
                                #region Insert In table



                                user = new DP_User()
                                {
                                    // Add user profile
                                    EmailId = objCompanyDashBoardRequestParam.emailId,
                                    Password = objCompanyDashBoardRequestParam.password,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    ModifyBy = objCompanyDashBoardRequestParam.UserId,
                                    IsTemp = true,
                                    UserId = genUserId,
                                    CompanyId = genCompId,
                                    IsActive = true,
                                    IsDeleted = false,
                                    IsRegistered = false

                                };
                                objDecisionPointEntities.DP_User.Add(user);
                                userId = user.Id;
                                //Add profile details
                                profile = new DP_Profile()
                                {
                                    UserId = Convert.ToInt32(userId, CultureInfo.InvariantCulture),
                                    Firstname = objCompanyDashBoardRequestParam.fName,
                                    LastName = objCompanyDashBoardRequestParam.lName,
                                    IsPayment = true,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    ModifyBy = objCompanyDashBoardRequestParam.UserId,
                                    UserType = Shared.NonClient,
                                    BusinessName = objCompanyDashBoardRequestParam.companyName

                                };
                                objDecisionPointEntities.DP_Profile.Add(profile);
                                // add data in staff mapping
                                DP_ICNonClientsMapping objDPICNonClientsMapping = new DP_ICNonClientsMapping()
                                {
                                    InviteeCompanyId = objCompanyDashBoardRequestParam.CompId,
                                    InvitedUserId = Convert.ToInt32(userId, CultureInfo.InvariantCulture),
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date,
                                    InviteeUserId = objCompanyDashBoardRequestParam.UserId,
                                    InvitedCompanyId = genCompId,
                                    IsActive = true,
                                    LastInvitationDate = currentdate,
                                    IsMailSent = objCompanyDashBoardRequestParam.IsMailSent,
                                    AllowToView = objCompanyDashBoardRequestParam.AllowToView
                                };
                                objDecisionPointEntities.DP_ICNonClientsMapping.Add(objDPICNonClientsMapping);
                                objDecisionPointEntities.SaveChanges();
                                //append company id with user id for set the last invitation date if user not exist
                                ID = Convert.ToString(user.UserId + Shared.Astrik + user.CompanyId, CultureInfo.InvariantCulture);
                                #endregion
                            }
                            else
                            {
                                // add data in staff mapping
                                DP_ICNonClientsMapping objDPICNonClientsMapping = new DP_ICNonClientsMapping()
                                {
                                    InviteeCompanyId = objCompanyDashBoardRequestParam.CompId,
                                    InvitedUserId = Convert.ToInt32(staffuser.cus.Id, CultureInfo.InvariantCulture),
                                    CreatedBy = objCompanyDashBoardRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date,
                                    InviteeUserId = objCompanyDashBoardRequestParam.UserId,
                                    InvitedCompanyId = staffuser.cus.CompanyId,
                                    IsActive = true,
                                    LastInvitationDate = currentdate,
                                    IsMailSent = objCompanyDashBoardRequestParam.IsMailSent,
                                    AllowToView = objCompanyDashBoardRequestParam.AllowToView
                                };
                                objDecisionPointEntities.DP_ICNonClientsMapping.Add(objDPICNonClientsMapping);
                                objDecisionPointEntities.SaveChanges();
                                ID = Convert.ToString(staffuser.cus.UserId + Shared.Astrik + staffuser.cus.CompanyId, CultureInfo.InvariantCulture) + "," + staffuser.cus.Password;
                            }
                        }
                        #endregion
                    }
                }

                return ID;


            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used for update the last invite date of user
        /// </summary>
        /// <returns></returns>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>3 Nov 2014</CreatedDate>
        public int UpdateLastInvite(string companyId, int userId, string userType)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //update last inviation date for staff
                    if (userType.Trim().ToLower().Equals(Shared.Staff.Trim().ToLower()))
                    {
                        var getInvtedDetails = (from user in objDecisionPointEntities.DP_CompanyStaffMapping
                                                where user.CompanyId == companyId && user.StaffId == userId && user.IsActive == true
                                                select user).FirstOrDefault();
                        if (!object.Equals(getInvtedDetails, null))
                        {
                            getInvtedDetails.LastInvitationDate = currentdate;
                        }
                    }
                    //update last inviation date for ic non clients
                    else if (userType.Equals(Shared.NonClient))
                    {
                        var query = (from icnonclientMap in objDecisionPointEntities.DP_ICNonClientsMapping
                                     where icnonclientMap.InvitedUserId == userId && icnonclientMap.InviteeCompanyId == companyId
                                     select icnonclientMap).FirstOrDefault();
                        if (query != null)
                        {
                            //update last date of invitation mail
                            query.LastInvitationDate = currentdate;
                        }
                    }
                    //update last inviation date for clients
                    else
                    {
                        var getInvtedDetails = (from user in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                where user.CompanyId == companyId && user.VendorId == userId && user.IsActive == true
                                                select user).FirstOrDefault();
                        if (!object.Equals(getInvtedDetails, null))
                        {
                            getInvtedDetails.LastInvitationDate = currentdate;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Ued to get Company Name
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>string</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>feb 6 2014</createdDate>
        public string GetCompanyName(string companyId)
        {
            try
            {
                string name = string.Empty;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.CompanyId == companyId
                                 select profile.BusinessName).FirstOrDefault();
                    name = query;
                    if (query == null)
                    {
                        var query2 = (from user in objDecisionPointEntities.DP_User
                                      join profile in objDecisionPointEntities.DP_Profile
                                      on user.Id equals profile.UserId
                                      where user.UserId == companyId
                                      select profile.LastName).FirstOrDefault();
                        name = query2;
                    }

                    return name;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used to genrate the Company Id
        /// </summary>
        /// <returns>retrun genrated user id</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 30 2014</createdDate>
        public string GenrateCompanyId()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                next:
                    var random = new Random(System.DateTime.Now.Millisecond);
                    string randomNumber = Convert.ToString(random.Next(0, 1000000), CultureInfo.InvariantCulture);

                    var res = (from cus in objDecisionPointEntities.DP_User
                               where cus.CompanyId == randomNumber
                               select cus).FirstOrDefault();

                    if (res != null || randomNumber.Length < 6)
                    {
                        goto next;
                    }
                    return randomNumber;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used to genrate the user Id
        /// </summary>
        /// <returns>retrun genrated Company id</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 30 2014</createdDate>
        public string GenrateUserId()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                next:
                    var random = GetRandomString(5);
                    var res1 = (from cus in objDecisionPointEntities.DP_User
                                where cus.UserId == random
                                select cus).FirstOrDefault();

                    if (res1 != null)
                    {
                        goto next;
                    }

                    return random;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// get random string
        /// </summary>
        /// <param name="length">length to genrate string</param>
        /// <returns>string type of random numbers</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 30 2014</createdDate>
        public static string GetRandomString(int length)
        {
            var r = new Random();
            return new String(Enumerable.Range(0, length).Select(n => (Char)(r.Next(66, 90))).ToArray());
        }
        /// <summary>
        /// get company Id
        /// </summary>
        /// <returns>get company Id</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 30 2014</createdDate>
        public IEnumerable<CompanyIdResponseParam> getCompanyId()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 select new CompanyIdResponseParam
                                 {
                                     Id = user.Id,
                                     CompanyId = user.CompanyId,
                                     UserId = user.UserId
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get company Id
        /// </summary>
        /// <param name="emailId"></param>
        /// <returns>get company Id</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 30 2014</createdDate>
        public bool CheckExistingEmailId(string emailId)
        {
            bool IsExist = false;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 where user.EmailId == emailId
                                 select new { user.Id }).FirstOrDefault();
                    if (query != null && query.Id > 0)
                    {
                        IsExist = true;
                    }
                    return IsExist;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get admin profile details
        /// </summary>
        /// <param name="userId">company id</param>
        /// <returns> admin profile details</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>feb 3 2014</createdDate>
        public IEnumerable<AdminProfileResponseParam> GetAdminProfile(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query2 = (from user in objDecisionPointEntities.DP_User
                                  join profile in objDecisionPointEntities.DP_Profile
                                  on user.Id equals profile.UserId
                                  where (user.UserId == companyId || user.CompanyId == companyId)
                                  select new AdminProfileResponseParam
                                  {
                                      FirstName = profile.Firstname,
                                      MiddleName = profile.MiddelName,
                                      LastName = profile.LastName,
                                      OfficePhone = profile.Phone,
                                      CellNumber = profile.CellNumber,
                                      Email = user.EmailId,
                                      Password = user.Password,
                                      SecurityAnswer1 = user.Answer1,
                                      SecurityAnswer2 = user.Answer2,
                                      SecurityAnswer3 = user.Answer3,
                                      SecurityQuestion1 = user.Question1,
                                      SecurityQuestion2 = user.Question2,
                                      SecurityQuestion3 = user.Question3,
                                  }).ToList();

                    return query2;
                }
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// Ued to get Company Name
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>string</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>feb 6 2014</createdDate>
        public string GetUserNameFromUserId(string userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    int parentUserId = Convert.ToInt32(userId, CultureInfo.InvariantCulture);
                    var userName = (from user in objDecisionPointEntities.DP_User
                                    join profile in objDecisionPointEntities.DP_Profile
                                    on user.Id equals profile.UserId
                                    where user.Id == parentUserId
                                    select profile.Firstname + Shared.SingleSpace + profile.LastName).FirstOrDefault();
                    return userName;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Ued to get Company Name
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>string</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>feb 6 2014</createdDate>
        public string GetCompanyNameByUserType(string companyId, string usertype)
        {
            try
            {
                string name = string.Empty;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.CompanyId == companyId && profile.UserType == usertype
                                 select profile.BusinessName).FirstOrDefault();
                    name = query;
                    if (query == null)
                    {
                        var query2 = (from user in objDecisionPointEntities.DP_User
                                      join profile in objDecisionPointEntities.DP_Profile
                                      on user.Id equals profile.UserId
                                      where user.UserId == companyId && profile.UserType == usertype
                                      select profile.LastName).FirstOrDefault();
                        name = query2;
                    }

                    return name;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// This method is used to infomation of vendor on the basis of comapny ID
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>VendorBulk</returns>
        /// <createdBy>Rohit</createdBy>
        /// <createdDate>feb 8 2014</createdDate>
        public VendorBulk GetVendorInfo(string companyId, string Usertype)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 join vendormaping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                 on user.Id equals vendormaping.VendorId
                                 join flowMap in objDecisionPointEntities.DP_FlowMapping
                                 on new { a = vendormaping.CreatedBy, b = vendormaping.CompanyId, c = vendormaping.VendorId }
                                 equals new { a = flowMap.CreatedBy, b = flowMap.CreatedCompanyId, c = flowMap.UserId }
                                 //on user.Id equals flowMap.UserId
                                 join flow in objDecisionPointEntities.DP_FlowMaster on flowMap.FlowId equals flow.Id
                                 join docflowMap in objDecisionPointEntities.DP_DocFlowMapping
                                 on new { a = vendormaping.CreatedBy, b = vendormaping.CompanyId, c = (int)vendormaping.VendorId }
                                 equals new { a = docflowMap.CreatedBy, b = docflowMap.CreatedCompanyId, c = docflowMap.UserId }
                                 //on user.Id equals docflowMap.UserId
                                 join docflow in objDecisionPointEntities.DP_DocFlow on docflowMap.DocFlowId equals docflow.Id

                                 where user.CompanyId == companyId && (profile.UserType == Usertype)
                                 select new VendorBulk
                                 {
                                     CompanyId = companyId,
                                     CompanyName = profile.BusinessName,
                                     EmailId = user.EmailId,
                                     FName = profile.Firstname,
                                     LName = profile.LastName,
                                     FlowId = (int)((flowMap.FlowId == null) ? 0 : flowMap.FlowId),
                                     FlowValue = flow.Flow,
                                     DocFlowId = (int)((docflowMap.DocFlowId == null) ? 0 : docflowMap.DocFlowId),
                                     DocFlowValue = docflow.DocFlow,
                                     PaymentId = (int)((vendormaping.PaymentType == null) ? 0 : vendormaping.PaymentType)

                                 }
                                 ).FirstOrDefault();

                    return query;
                }


            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Used to get company Id of staff
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>int</returns>
        /// <createdBy>Rohit</createdBy>
        /// <createdDate>feb 8 2014</createdDate>
        public int GetStaffCompanyId(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.CompanyId == companyId && profile.UserType == Shared.Company
                                 select user.Id).FirstOrDefault();

                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// used to get the email of admin
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>string</returns>
        /// <createdBy>sumit</createdBy>
        /// <createdDate>feb 11 2014</createdDate>
        public int GetAdminUserId(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.CompanyId == companyId && profile.UserType == Shared.Company
                                 select user.Id).FirstOrDefault();

                    return Convert.ToInt32(query, CultureInfo.InvariantCulture);
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to get the invitation flow
        /// </summary>
        /// <param name="userId"></param>
        /// <returns>string</returns>
        /// <createdBy>Rohit</createdBy>
        /// <createdDate>feb 8 2014</createdDate>
        public string GetInvitationFlow(string userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join flow in objDecisionPointEntities.DP_FlowMapping
                                 on user.Id equals flow.UserId
                                 where user.UserId == userId
                                 select flow.FlowId).FirstOrDefault();

                    return query.ToString();
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to set the temp status
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="inviteeCompanyId"></param>
        /// <returns>int</returns>
        /// <createdBy>sumit</createdBy>
        /// <createdDate>feb 8 2014</createdDate>
        public int SetTempPay(int userId)
        {
            try
            {
                int? Ids = userId;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.Id == userId
                                 select profile).FirstOrDefault();
                    if (!object.Equals(query, null))
                    {
                        query.IsPayment = true;
                    }

                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// make payment 
        /// </summary>
        /// <param name="objpayment">pass values for saving</param>
        /// <returns>int</returns>
        /// <createdBy>sumit</createdBy>
        /// <createdDate>feb 8 2014</createdDate>
        public int MakePayment(PaymentAmountResponseParam objpayment)
        {
            try
            {
                int? Ids = objpayment.userId;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //insert into company payement
                    DP_CompanyPayment objDP_CompanyPayment = new DP_CompanyPayment
                    {
                        CompanyId = objpayment.CompanyCode,
                        InviteeCompanyId = Convert.ToString(objpayment.InviteeCompanyId),
                        TransactionType = objpayment.TransactionType,
                        AnnualLisenceFee = objpayment.CompanyFee,
                        NoOfPartners = objpayment.NoOfPartners,
                        PerPartnerFee = objpayment.PerFieldStaffFee,
                        NoOfStaff = objpayment.NoOfStaff,
                        PerStaffFee = objpayment.PerOfficeStaffFee,
                        NoOfIC = objpayment.NoOfIc,
                        PerIcFee = objpayment.PerIcFee,
                        IsInvoice = objpayment.IsInvoice,
                        BusinessName = objpayment.BusinessName,
                        TransactionCode = objpayment.TransactionCode,
                        TransactionMessage = objpayment.TransactionMessage,
                        CreateDate = System.DateTime.Now.Date,
                        CreatedBy = objpayment.userId,
                        PayerEmail = objpayment.PayerEmailId,
                        PayAmount = objpayment.PayAmount,
                        ReceiverEmail = objpayment.ReceiverEmailId,
                        PaymentDate = objpayment.PaymentDate,
                        Currency = objpayment.Currency
                    };
                    objDecisionPointEntities.DP_CompanyPayment.Add(objDP_CompanyPayment);

                    //Get record of that particular messages which we are going to delete
                    var chkUser = (from user in objDecisionPointEntities.DP_User
                                   join profile in objDecisionPointEntities.DP_Profile
                                   on user.Id equals profile.UserId
                                   where user.Id == objpayment.userId
                                   select profile).FirstOrDefault();
                    if (!object.Equals(chkUser, null))
                    {
                        chkUser.IsPayment = true;
                    }
                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Make Recurring Payment
        /// </summary>
        /// <param name="objRecurring">RecurringPaymentResponseParam</param>
        /// <createdby>sumit saurav</createdby>
        /// <createddate>23/may/2014</createddate>
        /// <returns>int type result</returns>
        public int MakeRecurringPayment(RecurringPaymentResponseParam objRecurring)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (objRecurring.Type.Equals("insert"))
                    {
                        DP_RecurringPayment dP_RecurringPayment = new DP_RecurringPayment
                        {
                            UserId = objRecurring.UserId,
                            CustomerId = objRecurring.CustomerId,
                            Amount = objRecurring.Amount,
                            Remark = objRecurring.Remark,
                            CreatedDate = DateTime.Now,
                            CreatedBy = objRecurring.UserId,
                        };
                        objDecisionPointEntities.DP_RecurringPayment.Add(dP_RecurringPayment);
                    }
                    else if (objRecurring.Type.Equals("update"))
                    {
                        var query = (from recurringpay in objDecisionPointEntities.DP_RecurringPayment
                                     where recurringpay.UserId == objRecurring.UserId
                                     select recurringpay).FirstOrDefault();
                        if (query != null)
                        {
                            query.CustomerId = objRecurring.CustomerId;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Change registration status
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="invitecompanyid"></param>
        /// <param name="type"></param>
        /// <param name="companyId"></param>
        /// <returns>int</returns>
        /// <createdBy>sumit & bobi</createdBy>
        /// <createdDate>march 1 2014</createdDate>
        public int ChangeRegistrationStatus(int userId, int inviteCompanyid, string type, string companyId)
        {
            #region globalatthisblock
            int Isupdated = 0;

            #endregion

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals(Shared.Company) || type.Equals(Shared.IC))
                    {
                        //Get record of that particular user which we are going to update
                        var query = (from user in objDecisionPointEntities.DP_User
                                     join mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     on user.Id equals mapping.VendorId
                                     where user.Id == userId
                                         && mapping.CreatedBy == inviteCompanyid
                                     select new { user, mapping }).FirstOrDefault();
                        if (query != null)
                        {
                            query.user.IsRegistered = true;
                            query.mapping.Invitationstatus = true;
                            query.mapping.Status = 1;
                            query.mapping.IsDeleted = 1;
                            query.user.RegisteredDate = DateTime.Now.Date;

                        }
                    }
                    else if (type.Equals(Shared.NonClient))
                    {
                        var query = (from user in objDecisionPointEntities.DP_User
                                     join mapping in objDecisionPointEntities.DP_ICNonClientsMapping
                                     on user.Id equals mapping.InvitedUserId
                                     where user.Id == userId
                                         && mapping.CreatedBy == inviteCompanyid
                                     select new { user, mapping }).FirstOrDefault();
                        if (query != null)
                        {
                            query.user.IsRegistered = true;
                            query.mapping.Invitationstatus = true;
                            query.user.RegisteredDate = DateTime.Now.Date;

                        }
                    }
                    else
                    {
                        //Get record of that particular user which we are going to update
                        var query = (from user in objDecisionPointEntities.DP_User
                                     join mapping in objDecisionPointEntities.DP_CompanyStaffMapping
                                     on user.Id equals mapping.StaffId
                                     where user.Id == userId
                                      && mapping.CreatedBy == inviteCompanyid
                                     select new { user, mapping }).FirstOrDefault();
                        if (query != null)
                        {
                            query.user.IsRegistered = true;
                            query.mapping.Invitationstatus = true;
                            query.mapping.Status = 1;
                            query.user.RegisteredDate = DateTime.Now.Date;

                        }
                    }
                    //Finally saved the changes in database
                    Isupdated = objDecisionPointEntities.SaveChanges();
                }
                if (!type.Equals(Shared.NonClient))
                {
                    //Insert communication for Staff
                    InsertReqirementCommToStaff(userId, inviteCompanyid, type, companyId);
                    //Insert communication for IC
                    InsertReqirementCommToIC(userId, inviteCompanyid, type, companyId);
                    //Insert communication for Vendor
                    InsertReqirementCommToVendor(userId, inviteCompanyid, type, companyId);
                }

            }
            catch
            {
                throw;
            }
            return Isupdated;
        }

        /// <summary>
        /// Used to insert the communication to new hired staff 
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="inviteCompanyid"></param>
        /// <param name="type"></param>
        /// <param name="companyId"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>13 june 2014</createddate>
        private void InsertReqirementCommToStaff(int userId, int inviteCompanyid, string type, string companyId)
        {
            #region globalatthisblock

            bool Ismatched = false;
            int DOCID = 0;
            string DOCTYPE = string.Empty;
            int VERSIONNO = 0;
            DateTime dueDate;

            #endregion
            try
            {
                #region Staff
                //Send Reqiured for New Hire Document
                //get new hired document
                if (type.ToLower().Equals("staff".ToLower()))
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        var query1 = (from document in objDecisionPointEntities.DP_DocumentDetails
                                      where document.UserId == inviteCompanyid
                                       && document.ReqNewStaff == true && document.IsDeleted == false
                                      select new { document }).ToList();
                        if (query1 != null && query1.Count > 0)
                        {
                            foreach (var item in query1)
                            {

                                Ismatched = MatchFilter(item.document.Id, userId, "staff", companyId);
                                using (objDecisionPointEntities = new DecisionPointEntities())
                                {
                                    if (Ismatched)
                                    {
                                        DOCID = item.document.Id;
                                        DOCTYPE = item.document.DocType;
                                        VERSIONNO = (int)(item.document.VersionNo == null ? 0 : item.document.VersionNo);

                                        dueDate = System.DateTime.Now.Date.AddDays((double)(item.document.DaysToComplete == null ? 0 : item.document.DaysToComplete));

                                        var chkquery = (from recipient in objDecisionPointEntities.DP_Recipient
                                                        where recipient.RecipientUserId == userId && recipient.DocId == DOCID
                                                        select new { recipient }).FirstOrDefault();
                                        if (chkquery == null)
                                        {
                                            DP_Recipient objDPRecipient = new DP_Recipient
                                            {
                                                RecipientUserId = userId,
                                                DeliveredUserId = inviteCompanyid,
                                                DocId = DOCID,
                                                Type = DOCTYPE,
                                                Status = Shared.New,
                                                SentDate = currentdate,
                                                MoveInHistory = false,
                                                DocSeqNo = 1,
                                                IsActive = true,
                                                VersionNo = VERSIONNO,
                                                UserType = "staff",
                                                RecipeintDueDate = dueDate,
                                                DeliveredCompanyId = item.document.CompanyId,
                                                RecipientCompanyid = companyId,
                                                CreatedDate = currentdate,
                                                CommReceivedDate = currentdate.AddDays((double)(((dueDate - currentdate).TotalDays <= 30 ? 0 : (dueDate - currentdate).TotalDays) - 30))
                                            };
                                            objDecisionPointEntities.DP_Recipient.Add(objDPRecipient);

                                            objDecisionPointEntities.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                    }

                }
                #endregion
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Used to insert the communication to new hired IC 
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="inviteCompanyid"></param>
        /// <param name="type"></param>
        /// <param name="companyId"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>13 june 2014</createddate>
        private void InsertReqirementCommToIC(int userId, int inviteCompanyid, string type, string companyId)
        {
            #region globalatthisblock

            bool Ismatched = false;
            DateTime dueDate;

            #endregion
            try
            {
                #region IC
                if (type.ToLower().Equals("ic".ToLower()))
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        var query1 = (from document in objDecisionPointEntities.DP_DocumentDetails
                                      where document.UserId == inviteCompanyid
                                       && document.ReqNewIC == true && document.IsDeleted == false
                                      select new { document }).ToList();
                        if (query1 != null && query1.Count > 0)
                        {
                            foreach (var item in query1)
                            {

                                Ismatched = MatchFilter(item.document.Id, userId, "ic", companyId);
                                using (objDecisionPointEntities = new DecisionPointEntities())
                                {
                                    if (Ismatched)
                                    {
                                        dueDate = System.DateTime.Now.Date.AddDays((double)(item.document.DaysToComplete == null ? 0 : item.document.DaysToComplete));
                                        var chkquery = (from recipient in objDecisionPointEntities.DP_Recipient
                                                        where recipient.RecipientUserId == userId && recipient.DocId == item.document.Id
                                                        select new { recipient }).FirstOrDefault();
                                        if (chkquery == null)
                                        {
                                            DP_Recipient objDPRecipient = new DP_Recipient
                                            {
                                                RecipientUserId = userId,
                                                DeliveredUserId = inviteCompanyid,
                                                DocId = item.document.Id,
                                                Type = item.document.DocType,
                                                Status = Shared.New,
                                                SentDate = currentdate,
                                                MoveInHistory = false,
                                                DocSeqNo = 1,
                                                IsActive = true,
                                                VersionNo = item.document.VersionNo,
                                                UserType = "ic",
                                                RecipeintDueDate = dueDate,
                                                DeliveredCompanyId = item.document.CompanyId,
                                                RecipientCompanyid = companyId,
                                                CreatedDate = currentdate,
                                                CommReceivedDate = currentdate.AddDays((double)(((dueDate - currentdate).TotalDays <= 30 ? 0 : (dueDate - currentdate).TotalDays) - 30))
                                            };
                                            objDecisionPointEntities.DP_Recipient.Add(objDPRecipient);

                                            objDecisionPointEntities.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }

                    }

                }
                #endregion
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// Used to insert the communication to new hired vendor 
        /// </summary>
        /// <param name="userId">userId</param>
        /// <param name="inviteCompanyid">invitecompanyid</param>
        /// <param name="type">type</param>
        /// <param name="companyId">companyId</param>
        /// <createdby>bobi</createdby>
        /// <createddate>13 june 2014</createddate>
        private void InsertReqirementCommToVendor(int userId, int inviteCompanyid, string type, string companyId)
        {
            #region globalatthisblock

            bool Ismatched = false;
            DateTime dueDate;

            #endregion
            try
            {
                #region Vendor
                if (type.ToLower().Equals("vendor".ToLower()))
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        var query1 = (from document in objDecisionPointEntities.DP_DocumentDetails
                                      where document.UserId == inviteCompanyid
                                       && document.ReqNewVendor == true && document.IsDeleted == false
                                      select new { document }).ToList();
                        if (query1 != null && query1.Count > 0)
                        {
                            foreach (var item in query1)
                            {

                                Ismatched = MatchFilter(item.document.Id, userId, "vendor", companyId);
                                using (objDecisionPointEntities = new DecisionPointEntities())
                                {
                                    if (Ismatched)
                                    {
                                        dueDate = System.DateTime.Now.Date.AddDays((double)(item.document.DaysToComplete == null ? 0 : item.document.DaysToComplete));
                                        var chkquery = (from recipient in objDecisionPointEntities.DP_Recipient
                                                        where recipient.RecipientUserId == userId && recipient.DocId == item.document.Id
                                                        select new { recipient }).FirstOrDefault();
                                        if (chkquery == null)
                                        {
                                            DP_Recipient objDPRecipient = new DP_Recipient
                                            {
                                                RecipientUserId = userId,
                                                DeliveredUserId = inviteCompanyid,
                                                DocId = item.document.Id,
                                                Type = item.document.DocType,
                                                Status = Shared.New,
                                                SentDate = currentdate,
                                                MoveInHistory = false,
                                                DocSeqNo = 1,
                                                IsActive = true,
                                                VersionNo = item.document.VersionNo,
                                                UserType = "vendor",
                                                RecipeintDueDate = dueDate,
                                                DeliveredCompanyId = item.document.CompanyId,
                                                RecipientCompanyid = companyId,
                                                CreatedDate = currentdate,
                                                CommReceivedDate = currentdate.AddDays((double)(((dueDate - currentdate).TotalDays <= 30 ? 0 : (dueDate - currentdate).TotalDays) - 30))
                                            };
                                            objDecisionPointEntities.DP_Recipient.Add(objDPRecipient);


                                            objDecisionPointEntities.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                    }

                }
                #endregion
            }
            catch
            {

                throw;
            }
        }


        /// <summary>
        /// Used to match communication filter details
        /// </summary>
        /// <param name="docid">docid</param>
        /// <param name="userId">userId</param>
        /// <param name="type">type</param>
        /// <param name="companyId">companyId</param>
        /// <returns>bool</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 1 2014</createdDate>
        public bool MatchFilter(int docid, int userId, string type, string companyId)
        {
            #region global

            string usertitle = null;
            IList<int> vendoruserservice = null;
            bool IsMatched = false;
            //bool IsRoleMatched = false;
            bool IsTitleMatched = false;
            bool IsServiceMatched = false;
            bool IslocationMatched = false;

            IList<string> filtertitle = null;
            #endregion
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var chkfilter = (from filter in objDecisionPointEntities.DP_CommRecipientFilter
                                     where filter.DocId == docid && filter.FilterType != "type"
                                     select new { filter }).ToList();
                    if (chkfilter != null && chkfilter.Count > 0)
                    {
                        //get title
                        filtertitle = chkfilter.Where(x => x.filter.FilterType == "title").Select(x => x.filter.Filtervalue).ToList();
                        if (filtertitle != null && filtertitle.Count() > 0)
                        {
                            if (type.Equals("staff"))
                            {
                                usertitle = GetUserTitle(userId, companyId).Select(x => x.titleName).FirstOrDefault();
                            }
                            if (!string.IsNullOrEmpty(usertitle))
                            {
                                if (filtertitle.Contains(usertitle))
                                {
                                    IsTitleMatched = true;
                                }
                                else
                                {
                                    IsTitleMatched = false;
                                }
                            }
                        }
                        else { IsTitleMatched = true; }

                        //get service
                        IList<string> filterservice = chkfilter.Where(x => x.filter.FilterType == "service").Select(x => x.filter.Filtervalue).ToList();
                        if (filterservice != null && filterservice.Count() > 0)
                        {
                            var intservicefilters = filterservice.Select(x => int.Parse(x)).ToList();
                            if (type.Equals("staff") || type.Equals("ic"))
                            {
                                vendoruserservice = GetServicesOfNewHired(userId, companyId).Select(x => x.id).ToList();
                                if (!object.Equals(vendoruserservice, null) && vendoruserservice.Count > 0)
                                {
                                    foreach (var fser in intservicefilters)
                                    {
                                        foreach (var item in vendoruserservice)
                                        {
                                            if (item == fser)
                                            {
                                                IsServiceMatched = true;
                                                break;
                                            }
                                        }
                                        if (IsServiceMatched)
                                        {
                                            break;
                                        }
                                    }
                                }
                            }
                            else if (type.Equals("vendor"))
                            {
                                int arraycount = 0;
                                int[] finalservicelist = new int[1];


                                foreach (int ids in intservicefilters)
                                {

                                    var STM = (from ST in objDecisionPointEntities.DP_ServiceTranslationTable
                                               where ST.ChildServiceId == ids && ST.ChildCompanyId == companyId
                                               select (int)ST.ParentServiceId).ToList();
                                    arraycount = finalservicelist.Count() - 1;
                                    Array.Resize(ref finalservicelist, ((arraycount + 1) + (STM.Count)));
                                    STM.CopyTo(finalservicelist, arraycount);



                                }
                                vendoruserservice = GetServices("", companyId).Select(x => x.id).ToList();

                                if (!object.Equals(vendoruserservice, null) && vendoruserservice.Count > 0)
                                {
                                    foreach (var fser in finalservicelist)
                                    {
                                        foreach (var item in vendoruserservice)
                                        {
                                            if (item == fser)
                                            {
                                                IsServiceMatched = true;
                                                break;
                                            }
                                        }
                                        if (IsServiceMatched)
                                        {
                                            break;
                                        }
                                    }
                                }
                            }

                        }
                        else { IsServiceMatched = true; }
                        //get roles
                        IList<string> filterlocation = chkfilter.Where(x => x.filter.FilterType == "location").Select(x => x.filter.Filtervalue).ToList();
                        if (filterlocation != null && filterlocation.Count() > 0)
                        {
                            //userlocation = GetZipList(userId).Select(x => x.ZipCode).ToList();
                            //if (userlocation != null && userlocation.Count > 0)
                            //{
                            //    foreach (var floc in filterlocation)
                            //    {
                            //        foreach (var item in userlocation)
                            //        {
                            //            if (item.Trim().ToLower(CultureInfo.InvariantCulture) == floc.Trim().ToLower(CultureInfo.InvariantCulture))
                            //            {
                            //                IslocationMatched = true;
                            //                break;
                            //            }
                            //        }
                            //        if (IslocationMatched)
                            //        {
                            //            break;
                            //        }

                            //    }

                            //}
                        }
                        else { IslocationMatched = true; }

                        if (IsTitleMatched && IsServiceMatched && IslocationMatched)
                        {
                            IsMatched = true;
                        }
                    }
                    else
                    {
                        IsMatched = true;
                    }

                }
            }
            catch
            {
                throw;
            }
            return IsMatched;
        }
        #region Setup Training

        /// <summary>
        /// Used to genrate the policy number
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>retrun genrated user id</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 1 2014</createdDate>
        public string GenratePolicyNo(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    string randomNumber = string.Empty;
                    var res = (from cus in objDecisionPointEntities.DP_DocumentDetails
                               where cus.CompanyId == companyId && cus.PolicyNo != null && cus.PolicyNo != string.Empty
                               select new UserDashBoardResponseParam
                               {
                                   policyNo = cus.PolicyNo
                               }).ToList();

                    if (res != null && res.Count > 0)
                    {
                        var col = res.Select(x => x.policyNo.Split('-')[1]).ToArray();
                        int finalres = Convert.ToInt32(col[0], CultureInfo.InvariantCulture);
                        foreach (var item in col)
                        {
                            if (finalres < Convert.ToInt32(item))
                            {
                                finalres = Convert.ToInt32(item);
                            }
                        }
                        if (companyId.Length >= 6)
                        {
                            randomNumber = companyId.Substring(2, 4).Substring(1, 3) + "-" + ((finalres + 1)).ToString();
                        }
                    }
                    else
                    {
                        if (companyId.Length >= 6)
                        {
                            randomNumber = companyId.Substring(2, 4).Substring(1, 3) + "-" + "1";
                        }
                    }
                    return randomNumber;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save the deatil for setup training
        /// </summary>
        /// <param name="doctitle"></param>
        /// <param name="duedate"></param>
        /// <param name="intro"></param>
        /// <param name="doctype"></param>
        /// <returns>string</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 1 2014</createdDate>
        public string SaveCommunication(CommunicationBasicDetailsRequestParam objCommunicationBasicDetailsRequestParam, string type, string docid)
        {

            string policyNo = GenratePolicyNo(objCommunicationBasicDetailsRequestParam.CompanyId);
            DateTime defaultdatetime1 = new DateTime();
            DateTime defaultdatetime2 = new DateTime();

            //check due date
            if (objCommunicationBasicDetailsRequestParam.DueDate == Convert.ToDateTime("1/1/0001 12:00:00 AM", CultureInfo.InvariantCulture))
            {
                defaultdatetime1 = objCommunicationBasicDetailsRequestParam.DueDate;

            }
            //check effective date
            if (objCommunicationBasicDetailsRequestParam.EffectiveDate == Convert.ToDateTime("1/1/0001 12:00:00 AM", CultureInfo.InvariantCulture))
            {
                defaultdatetime2 = objCommunicationBasicDetailsRequestParam.EffectiveDate;

            }


            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //update communication
                    if (type.Trim().ToLower().Equals(Shared.Update.Trim().ToLower()) || type.Trim().ToLower().Equals(Shared.IncomingUpdate.Trim().ToLower()))
                    {
                        int documentid = Convert.ToInt32(docid, CultureInfo.InvariantCulture);
                        var res = (from doc in objDecisionPointEntities.DP_DocumentDetails
                                   where doc.Id == documentid
                                   select new { doc }).FirstOrDefault();
                        if (res != null)
                        {
                            res.doc.Title = objCommunicationBasicDetailsRequestParam.DocTitle;
                            res.doc.DocType = objCommunicationBasicDetailsRequestParam.DocType;
                            res.doc.Introduction = objCommunicationBasicDetailsRequestParam.Instruction;
                            res.doc.DueDate = (objCommunicationBasicDetailsRequestParam.DueDate == null || objCommunicationBasicDetailsRequestParam.DueDate == defaultdatetime1) ? defaultdatetime3 : objCommunicationBasicDetailsRequestParam.DueDate;
                            res.doc.ModifyBy = objCommunicationBasicDetailsRequestParam.UserId;
                            res.doc.ModifyDate = DateTime.Now.Date;
                            res.doc.Reference = objCommunicationBasicDetailsRequestParam.Reference;
                            res.doc.Retake = objCommunicationBasicDetailsRequestParam.retake;
                            res.doc.HOC = objCommunicationBasicDetailsRequestParam.HOC;
                            res.doc.EffectiveDate = (objCommunicationBasicDetailsRequestParam.EffectiveDate == null || objCommunicationBasicDetailsRequestParam.EffectiveDate == defaultdatetime2) ? defaultdatetime3 : objCommunicationBasicDetailsRequestParam.EffectiveDate;
                            res.doc.ReqNewStaff = objCommunicationBasicDetailsRequestParam.RequHirestaff;
                            res.doc.ReqNewIC = objCommunicationBasicDetailsRequestParam.RequHireic;
                            res.doc.ReqNewVendor = objCommunicationBasicDetailsRequestParam.RequHirevendor;
                            res.doc.DaysToComplete = objCommunicationBasicDetailsRequestParam.DaysToComplete;
                            res.doc.DocGroup = objCommunicationBasicDetailsRequestParam.Group;
                            res.doc.DocTitles = objCommunicationBasicDetailsRequestParam.DocTitles;
                            res.doc.VideoTitle = objCommunicationBasicDetailsRequestParam.VideoTitles;
                            res.doc.ScormTitles = objCommunicationBasicDetailsRequestParam.ScormTitles;
                            res.doc.OnStaging = objCommunicationBasicDetailsRequestParam.Onstaging;
                            res.doc.OnLib = objCommunicationBasicDetailsRequestParam.OnLib;
                            res.doc.IsEmployementReq = objCommunicationBasicDetailsRequestParam.IsEmpReq;
                            objDecisionPointEntities.SaveChanges();
                        }
                        //update recipient due date for all
                        var resrecipient = (from doc in objDecisionPointEntities.DP_Recipient
                                            where doc.DocId == documentid
                                            select new { doc });
                        if (resrecipient != null)
                        {
                            foreach (var item in resrecipient)
                            {
                                item.doc.RecipeintDueDate = (objCommunicationBasicDetailsRequestParam.DueDate == null || objCommunicationBasicDetailsRequestParam.DueDate == defaultdatetime1) ? defaultdatetime3 : objCommunicationBasicDetailsRequestParam.DueDate;

                            }
                            objDecisionPointEntities.SaveChanges();
                        }
                        //move the lib
                        if (objCommunicationBasicDetailsRequestParam.OnLib)
                        {
                            var checkres = (from recipient in objDecisionPointEntities.DP_Recipient
                                            join document in objDecisionPointEntities.DP_DocumentDetails
                                            on recipient.DocId equals document.Id
                                            where recipient.RecipientCompanyid == objCommunicationBasicDetailsRequestParam.CompanyId && recipient.DeliveredCompanyId == objCommunicationBasicDetailsRequestParam.CompanyId && recipient.DocId == res.doc.Id
                                       && document.VersionNo == res.doc.VersionNo && recipient.Status == Shared.Forward
                                            select recipient.Id).ToList();
                            if (checkres == null || checkres.Count <= 0)
                            {
                                //insert sender  user detail in database
                                DP_Recipient objSenderDPRecipient = new DP_Recipient
                                {
                                    RecipientUserId = objCommunicationBasicDetailsRequestParam.UserId,
                                    DeliveredUserId = objCommunicationBasicDetailsRequestParam.UserId,
                                    DocId = res.doc.Id,
                                    Type = res.doc.DocType,
                                    Status = Shared.Forward,
                                    SentDate = DateTime.Now.Date,
                                    MoveInHistory = true,
                                    DocSeqNo = 0,
                                    IsActive = true,
                                    VersionNo = res.doc.VersionNo,
                                    UserType = Shared.Staff,
                                    RecipeintDueDate = (res.doc.DueDate == null || res.doc.DueDate == defaultdatetime1) ? defaultdatetime3 : res.doc.DueDate,
                                    DeliveredCompanyId = objCommunicationBasicDetailsRequestParam.CompanyId,
                                    RecipientCompanyid = objCommunicationBasicDetailsRequestParam.CompanyId,
                                    CreatedDate = currentdate
                                };
                                objDecisionPointEntities.DP_Recipient.Add(objSenderDPRecipient);
                                objDecisionPointEntities.SaveChanges();
                            }
                        }
                        return res.doc.Id + Shared.Colon + res.doc.VersionNo;
                    }
                    //create colne of communication
                    else if (type.Trim().ToLower().Equals(Shared.Clone.Trim().ToLower()))
                    {
                        int versiono = 2;
                        DP_DocumentDetails objDocumentDetails = new DP_DocumentDetails
                        {

                            Title = objCommunicationBasicDetailsRequestParam.DocTitle,
                            DocType = objCommunicationBasicDetailsRequestParam.DocType,
                            Introduction = objCommunicationBasicDetailsRequestParam.Instruction,
                            DueDate = (objCommunicationBasicDetailsRequestParam.DueDate == null || objCommunicationBasicDetailsRequestParam.DueDate == defaultdatetime1) ? defaultdatetime3 : objCommunicationBasicDetailsRequestParam.DueDate,
                            UserId = objCommunicationBasicDetailsRequestParam.UserId,
                            CreatedBy = objCommunicationBasicDetailsRequestParam.UserId,
                            CreatedDate = DateTime.Now.Date,

                            Reference = objCommunicationBasicDetailsRequestParam.Reference,
                            IsDeleted = false,
                            CompanyId = objCommunicationBasicDetailsRequestParam.CompanyId,
                            PolicyNo = docid,
                            EffectiveDate = (objCommunicationBasicDetailsRequestParam.EffectiveDate == null || objCommunicationBasicDetailsRequestParam.EffectiveDate == defaultdatetime2) ? defaultdatetime3 : objCommunicationBasicDetailsRequestParam.EffectiveDate,
                            VersionNo = versiono,
                            Retake = objCommunicationBasicDetailsRequestParam.retake,
                            HOC = objCommunicationBasicDetailsRequestParam.HOC,
                            ReqNewStaff = objCommunicationBasicDetailsRequestParam.RequHirestaff,
                            ReqNewIC = objCommunicationBasicDetailsRequestParam.RequHireic,
                            ReqNewVendor = objCommunicationBasicDetailsRequestParam.RequHirevendor,
                            DaysToComplete = objCommunicationBasicDetailsRequestParam.DaysToComplete,
                            DocGroup = objCommunicationBasicDetailsRequestParam.Group,
                            DocTitles = objCommunicationBasicDetailsRequestParam.DocTitles,
                            VideoTitle = objCommunicationBasicDetailsRequestParam.VideoTitles,
                            ScormTitles = objCommunicationBasicDetailsRequestParam.ScormTitles,
                            OnStaging = objCommunicationBasicDetailsRequestParam.Onstaging,
                            OnLib = objCommunicationBasicDetailsRequestParam.OnLib,
                            IsEmployementReq = objCommunicationBasicDetailsRequestParam.IsEmpReq
                        };
                        objDecisionPointEntities.DP_DocumentDetails.Add(objDocumentDetails);
                        objDecisionPointEntities.SaveChanges();

                        return objDocumentDetails.Id + Shared.Colon + objDocumentDetails.VersionNo;
                    }
                    //save communication
                    else
                    {

                        int versiono = 1;
                        DP_DocumentDetails objDocumentDetails = new DP_DocumentDetails
                        {
                            Title = objCommunicationBasicDetailsRequestParam.DocTitle,
                            DocType = objCommunicationBasicDetailsRequestParam.DocType,
                            Introduction = objCommunicationBasicDetailsRequestParam.Instruction,
                            DueDate = (objCommunicationBasicDetailsRequestParam.DueDate == null || objCommunicationBasicDetailsRequestParam.DueDate == defaultdatetime1) ? defaultdatetime3 : objCommunicationBasicDetailsRequestParam.DueDate,
                            UserId = objCommunicationBasicDetailsRequestParam.UserId,
                            CreatedBy = objCommunicationBasicDetailsRequestParam.UserId,
                            CreatedDate = DateTime.Now.Date,
                            Reference = objCommunicationBasicDetailsRequestParam.Reference,
                            IsDeleted = false,
                            CompanyId = objCommunicationBasicDetailsRequestParam.CompanyId,
                            PolicyNo = policyNo,
                            EffectiveDate = (objCommunicationBasicDetailsRequestParam.EffectiveDate == null || objCommunicationBasicDetailsRequestParam.EffectiveDate == defaultdatetime2) ? defaultdatetime3 : objCommunicationBasicDetailsRequestParam.EffectiveDate,
                            VersionNo = versiono,
                            Retake = objCommunicationBasicDetailsRequestParam.retake,
                            ReqNewStaff = objCommunicationBasicDetailsRequestParam.RequHirestaff,
                            ReqNewIC = objCommunicationBasicDetailsRequestParam.RequHireic,
                            ReqNewVendor = objCommunicationBasicDetailsRequestParam.RequHirevendor,
                            DaysToComplete = objCommunicationBasicDetailsRequestParam.DaysToComplete,
                            HOC = objCommunicationBasicDetailsRequestParam.HOC,
                            DocGroup = objCommunicationBasicDetailsRequestParam.Group,
                            DocTitles = objCommunicationBasicDetailsRequestParam.DocTitles,
                            VideoTitle = objCommunicationBasicDetailsRequestParam.VideoTitles,
                            ScormTitles = objCommunicationBasicDetailsRequestParam.ScormTitles,
                            OnStaging = objCommunicationBasicDetailsRequestParam.Onstaging,
                            OnLib = objCommunicationBasicDetailsRequestParam.OnLib,
                            IsEmployementReq = objCommunicationBasicDetailsRequestParam.IsEmpReq
                        };
                        objDecisionPointEntities.DP_DocumentDetails.Add(objDocumentDetails);
                        objDecisionPointEntities.SaveChanges();
                        //move the lib
                        if (objCommunicationBasicDetailsRequestParam.OnLib)
                        {
                            var checkres = (from recipient in objDecisionPointEntities.DP_Recipient
                                            join document in objDecisionPointEntities.DP_DocumentDetails
                                            on recipient.DocId equals document.Id
                                            where recipient.RecipientCompanyid == objCommunicationBasicDetailsRequestParam.CompanyId && recipient.DeliveredCompanyId == objCommunicationBasicDetailsRequestParam.CompanyId && recipient.DocId == objDocumentDetails.Id
                                       && document.VersionNo == objDocumentDetails.VersionNo && recipient.Status == Shared.Forward
                                            select recipient.Id).ToList();
                            if (checkres == null || checkres.Count <= 0)
                            {
                                //insert sender  user detail in database
                                DP_Recipient objSenderDPRecipient = new DP_Recipient
                                {
                                    RecipientUserId = objCommunicationBasicDetailsRequestParam.UserId,
                                    DeliveredUserId = objCommunicationBasicDetailsRequestParam.UserId,
                                    DocId = objDocumentDetails.Id,
                                    Type = objDocumentDetails.DocType,
                                    Status = Shared.Forward,
                                    SentDate = DateTime.Now.Date,
                                    MoveInHistory = true,
                                    DocSeqNo = 0,
                                    IsActive = true,
                                    VersionNo = objDocumentDetails.VersionNo,
                                    UserType = Shared.Staff,
                                    RecipeintDueDate = (objDocumentDetails.DueDate == null || objDocumentDetails.DueDate == defaultdatetime1) ? defaultdatetime3 : objDocumentDetails.DueDate,
                                    DeliveredCompanyId = objCommunicationBasicDetailsRequestParam.CompanyId,
                                    RecipientCompanyid = objCommunicationBasicDetailsRequestParam.CompanyId,
                                    CreatedDate = currentdate
                                };
                                objDecisionPointEntities.DP_Recipient.Add(objSenderDPRecipient);
                                objDecisionPointEntities.SaveChanges();
                            }
                        }
                        return objDocumentDetails.Id + Shared.Colon + objDocumentDetails.VersionNo;
                    }

                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save the likns inculded in setup traininhs
        /// </summary>
        /// <param name="docId"></param>
        /// <param name="linkValue"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 1 2014</createdDate>
        public int SaveCommLinks(int docId, string linkValue, string type, int linkId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals("update") && linkId != 0)
                    {

                        var res = (from doclink in objDecisionPointEntities.DP_CommLinks
                                   where doclink.DocMsgId == docId && doclink.Id == linkId
                                   select new { doclink }).FirstOrDefault();
                        if (res != null)
                        {
                            res.doclink.LinkURL = linkValue;

                        }

                    }
                    else
                    {
                        DP_CommLinks objCommLinks = new DP_CommLinks
                        {
                            LinkURL = linkValue,
                            IsDeleted = false,
                            DocMsgId = docId
                        };
                        objDecisionPointEntities.DP_CommLinks.Add(objCommLinks);
                    }
                    return objDecisionPointEntities.SaveChanges();

                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save the reqiured actions inculded in setup traininhs
        /// </summary>
        /// <param name="docId"></param>
        /// <param name="linkValue"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 1 2014</createdDate>
        public int SaveCommReqActions(int docId, string reqActionval, string type, int reqActionId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals("update") && reqActionId != 0)
                    {

                        var res = (from docaction in objDecisionPointEntities.DP_CommRquiredActions
                                   where docaction.DocMsgId == docId && docaction.Id == reqActionId
                                   select new { docaction }).FirstOrDefault();
                        if (res != null)
                        {
                            res.docaction.Condition = reqActionval;

                        }

                    }
                    else
                    {
                        DP_CommRquiredActions objCommRquiredActions = new DP_CommRquiredActions
                        {
                            Condition = reqActionval,
                            IsDeleted = false,
                            DocMsgId = docId
                        };
                        objDecisionPointEntities.DP_CommRquiredActions.Add(objCommRquiredActions);
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save the reqiured actions inculded in setup traininhs
        /// </summary>
        /// <param name="docId"></param>
        /// <param name="linkValue"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>may 5 2014</createdDate>
        public int RemoveReqActions(int reqActionId, string type)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals("action"))
                    {
                        var res = (from docaction in objDecisionPointEntities.DP_CommRquiredActions
                                   where docaction.Id == reqActionId
                                   select new { docaction }).FirstOrDefault();
                        if (res != null)
                        {
                            objDecisionPointEntities.DP_CommRquiredActions.Remove(res.docaction);
                        }
                    }
                    else if (type.Equals("link"))
                    {
                        var res = (from docaction in objDecisionPointEntities.DP_CommLinks
                                   where docaction.Id == reqActionId
                                   select new { docaction }).FirstOrDefault();
                        if (res != null)
                        {
                            objDecisionPointEntities.DP_CommLinks.Remove(res.docaction);
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save the com contents inculded in setup trainings
        /// </summary>
        /// <param name="docId"></param>
        /// <param name="files"></param>
        /// <param name="filetype"></param>
        /// <param name="scormname"></param>
        /// <param name="title"></param>
        /// <param name="type"></param>
        /// <param name="userId"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 1 2014</createdDate>
        public int SaveCommContents(CommContentRequestParam commContentRequestParam)
        {
            try
            {

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (commContentRequestParam.type.Equals("update"))
                    {

                        var res = (from content in objDecisionPointEntities.DP_CommContents
                                   where content.DocMsgId == commContentRequestParam.docId && content.Filetype == commContentRequestParam.filetype
                                   select new { content }).ToList();
                        if (res != null)
                        {
                            foreach (var content in res)
                            {
                                objDecisionPointEntities.DP_CommContents.Remove(content.content);
                            }

                        }

                    }
                    int index = 0;
                    string filetitle = string.Empty;
                    if (!string.IsNullOrEmpty(commContentRequestParam.files))
                    {
                        IList<string> documentsfiles = new List<string>();
                        documentsfiles = commContentRequestParam.files.Split(',');
                        foreach (var docfile in documentsfiles)
                        {
                            if (commContentRequestParam.filetype.Equals("scorm"))
                            {
                                IList<string> scormnames = new List<string>();
                                scormnames = commContentRequestParam.scormname.Split(',');
                                if (scormnames != null && scormnames.Count > 0)
                                {
                                    filetitle = scormnames[index];

                                }
                            }
                            else { filetitle = Path.GetFileName(docfile); }
                            DP_CommContents objDPCommContents = new DP_CommContents
                            {
                                DocMsgId = commContentRequestParam.docId,
                                FileLoc = docfile,
                                Filetype = commContentRequestParam.filetype,
                                FileTitle = filetitle,
                                CreateBy = commContentRequestParam.userId,
                                CreateDate = DateTime.Now.Date,
                                ModifyBy = commContentRequestParam.userId,
                                ModifyDate = DateTime.Now.Date,
                                Status = false,
                                IsDeleted = false,
                                Title = commContentRequestParam.title


                            };
                            objDecisionPointEntities.DP_CommContents.Add(objDPCommContents);
                            index++;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save the com contents inculded in setup trainings
        /// </summary>
        /// <param name="objpublishCommRequestParam"></param>
        /// <param name="userId"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 1 2014</createdDate>
        public int PublishComm(publishCommRequestParam objpublishCommRequestParam, int userId)
        {
            int Isinserted = 0;
            DateTime defaultdatetime1 = new DateTime();
            int docseqno = 0;
            //check due date
            if (objpublishCommRequestParam.dueDate == Convert.ToDateTime("1/1/0001 12:00:00 AM", CultureInfo.InvariantCulture))
            {
                defaultdatetime1 = objpublishCommRequestParam.dueDate;

            }

            try
            {
                //Insert communcation for admin always
                //InsertCommunicationforAdmin(objpublishCommRequestParam, UserId, defaultdatetime1);
                UpdateStagingstatus(objpublishCommRequestParam.docId);
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //staff
                    IList<string> staffids = new List<string>();
                    if (objpublishCommRequestParam.totalStaff != null && !objpublishCommRequestParam.totalStaff.Equals("0"))
                    {
                        staffids = objpublishCommRequestParam.totalStaff.Split(',');
                    }
                    //ic
                    IList<string> icids = new List<string>();
                    if (objpublishCommRequestParam.totalIC != null && !objpublishCommRequestParam.totalIC.Equals("0"))
                    {
                        icids = objpublishCommRequestParam.totalIC.Split(',');
                    }
                    //vendor
                    IList<string> vendorids = new List<string>();
                    if (objpublishCommRequestParam.totalVendor != null && !objpublishCommRequestParam.totalVendor.Equals("0"))
                    {
                        vendorids = objpublishCommRequestParam.totalVendor.Split(',');
                    }
                    //client
                    IList<string> clientids = new List<string>();
                    if (objpublishCommRequestParam.totalClient != null && !objpublishCommRequestParam.totalClient.Equals("0"))
                    {
                        clientids = objpublishCommRequestParam.totalClient.Split(',');
                    }
                    if (staffids != null)
                    {
                        if (staffids.Count > 0)
                        {
                            #region Staff
                            foreach (var id in staffids)
                            {
                                if (!id.Equals(Shared.Zero) && !id.Equals(Shared.Zero + Shared.Colon + Shared.Zero))
                                {
                                    int recipientId = Convert.ToInt32(id.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                                    string recipientCompanyId = Convert.ToString(id.Split(char.Parse(Shared.Colon))[1], CultureInfo.InvariantCulture);
                                    using (objDecisionPointEntities = new DecisionPointEntities())
                                    {
                                        var checkres = (from recipient in objDecisionPointEntities.DP_Recipient
                                                        join document in objDecisionPointEntities.DP_DocumentDetails
                                                        on recipient.DocId equals document.Id
                                                        where recipient.RecipientUserId == recipientId && recipient.DeliveredCompanyId == objpublishCommRequestParam.CompanyId
                                                        && recipient.DocId == objpublishCommRequestParam.docId
                                                        && document.VersionNo == objpublishCommRequestParam.versionno
                                                        select recipient).FirstOrDefault();
                                        if (object.Equals(checkres, null))
                                        {
                                            var res = (from recipient in objDecisionPointEntities.DP_Recipient
                                                       where recipient.RecipientUserId == recipientId
                                                       select recipient.DocSeqNo).Max();
                                            docseqno = 0;
                                            if (res != null)
                                            {
                                                docseqno = (int)(res + 1);
                                            }
                                            else
                                            {
                                                docseqno = 1;
                                            }

                                            //insert reciver user details
                                            // if (!recipientId.Equals(userId))
                                            //{
                                            DP_Recipient objDPRecipient = new DP_Recipient
                                            {
                                                RecipientUserId = recipientId,
                                                DeliveredUserId = userId,
                                                DocId = objpublishCommRequestParam.docId,
                                                Type = objpublishCommRequestParam.Doctype,
                                                Status = Shared.New,
                                                SentDate = DateTime.Now.Date,
                                                MoveInHistory = false,
                                                DocSeqNo = docseqno,
                                                IsActive = true,
                                                VersionNo = objpublishCommRequestParam.versionno,
                                                UserType = Shared.Staff,
                                                RecipeintDueDate = (objpublishCommRequestParam.dueDate == null || objpublishCommRequestParam.dueDate == defaultdatetime1) ? defaultdatetime3 : objpublishCommRequestParam.dueDate,
                                                DeliveredCompanyId = objpublishCommRequestParam.CompanyId,
                                                RecipientCompanyid = recipientCompanyId,
                                                CreatedDate = DateTime.Now.Date,
                                                CommReceivedDate = (objpublishCommRequestParam.dueDate == null || objpublishCommRequestParam.dueDate == defaultdatetime1) ? currentdate : currentdate.AddDays((double)((objpublishCommRequestParam.dueDate - currentdate).TotalDays <= 30 ? 0 : (objpublishCommRequestParam.dueDate - currentdate).TotalDays - 30))
                                            };
                                            objDecisionPointEntities.DP_Recipient.Add(objDPRecipient);

                                            Isinserted = objDecisionPointEntities.SaveChanges();


                                        }
                                        else
                                        {
                                            checkres.IsActive = true;
                                            checkres.MoveInHistory = false;
                                            Isinserted = objDecisionPointEntities.SaveChanges();
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    if (icids != null)
                    {
                        if (icids.Count > 0)
                        {
                            #region IC
                            foreach (var id in icids)
                            {
                                if (!id.Equals(Shared.Zero) && !id.Equals(Shared.Zero + Shared.Colon + Shared.Zero))
                                {
                                    int recipientId = Convert.ToInt32(id.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                                    string recipientCompanyId = Convert.ToString(id.Split(char.Parse(Shared.Colon))[1], CultureInfo.InvariantCulture);
                                    using (objDecisionPointEntities = new DecisionPointEntities())
                                    {
                                        var checkres = (from recipient in objDecisionPointEntities.DP_Recipient
                                                        join document in objDecisionPointEntities.DP_DocumentDetails
                                                        on recipient.DocId equals document.Id
                                                        where recipient.RecipientUserId == recipientId && recipient.DeliveredCompanyId == objpublishCommRequestParam.CompanyId
                                                        && recipient.DocId == objpublishCommRequestParam.docId
                                                        && document.VersionNo == objpublishCommRequestParam.versionno
                                                        select recipient).FirstOrDefault();
                                        if (object.Equals(checkres, null))
                                        {
                                            var res = (from recipient in objDecisionPointEntities.DP_Recipient
                                                       where recipient.RecipientUserId == recipientId
                                                       select recipient.DocSeqNo).Max();
                                            docseqno = 0;
                                            if (res != null)
                                            {
                                                docseqno = (int)(res + 1);
                                            }
                                            else
                                            {
                                                docseqno = 1;
                                            }



                                            DP_Recipient objDPRecipient = new DP_Recipient
                                            {
                                                RecipientUserId = recipientId,
                                                DeliveredUserId = userId,
                                                DocId = objpublishCommRequestParam.docId,
                                                Type = objpublishCommRequestParam.Doctype,
                                                Status = Shared.New,
                                                SentDate = DateTime.Now.Date,
                                                MoveInHistory = false,
                                                DocSeqNo = docseqno,
                                                IsActive = true,
                                                VersionNo = objpublishCommRequestParam.versionno,
                                                UserType = "ic",
                                                RecipeintDueDate = (objpublishCommRequestParam.dueDate == null || objpublishCommRequestParam.dueDate == defaultdatetime1) ? defaultdatetime3 : objpublishCommRequestParam.dueDate,
                                                DeliveredCompanyId = objpublishCommRequestParam.CompanyId,
                                                RecipientCompanyid = recipientCompanyId,
                                                CreatedDate = currentdate,
                                                CommReceivedDate = (objpublishCommRequestParam.dueDate == null || objpublishCommRequestParam.dueDate == defaultdatetime1) ? currentdate : currentdate.AddDays((double)((objpublishCommRequestParam.dueDate - currentdate).TotalDays <= 30 ? 0 : (objpublishCommRequestParam.dueDate - currentdate).TotalDays - 30))
                                            };
                                            objDecisionPointEntities.DP_Recipient.Add(objDPRecipient);

                                            Isinserted = objDecisionPointEntities.SaveChanges();
                                        }
                                        else
                                        {
                                            checkres.IsActive = true;
                                            checkres.MoveInHistory = false;
                                            Isinserted = objDecisionPointEntities.SaveChanges();
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    if (vendorids != null)
                    {
                        if (vendorids.Count > 0)
                        {
                            #region Vendor
                            foreach (var id in vendorids)
                            {
                                if (!id.Equals(Shared.Zero) && !id.Equals(Shared.Zero + Shared.Colon + Shared.Zero))
                                {
                                    int recipientId = Convert.ToInt32(id.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                                    string recipientCompanyId = Convert.ToString(id.Split(char.Parse(Shared.Colon))[1], CultureInfo.InvariantCulture);
                                    using (objDecisionPointEntities = new DecisionPointEntities())
                                    {
                                        var checkres = (from recipient in objDecisionPointEntities.DP_Recipient
                                                        join document in objDecisionPointEntities.DP_DocumentDetails
                                                        on recipient.DocId equals document.Id
                                                        where recipient.RecipientUserId == recipientId && recipient.DeliveredCompanyId == objpublishCommRequestParam.CompanyId
                                                        && recipient.DocId == objpublishCommRequestParam.docId
                                                        && document.VersionNo == objpublishCommRequestParam.versionno
                                                        select recipient).FirstOrDefault();
                                        if (object.Equals(checkres, null))
                                        {
                                            var res = (from recipient in objDecisionPointEntities.DP_Recipient
                                                       where recipient.RecipientUserId == recipientId
                                                       select recipient.DocSeqNo).Max();
                                            docseqno = 0;
                                            if (res != null)
                                            {
                                                docseqno = (int)(res + 1);
                                            }
                                            else
                                            {
                                                docseqno = 1;
                                            }
                                            var gettype = (from filter in objDecisionPointEntities.DP_CommRecipientFilter
                                                           where filter.DocId == objpublishCommRequestParam.docId && filter.FilterType == "type" && filter.Filtervalue != Shared.Staff &&
                                                               filter.Filtervalue != ic && filter.Filtervalue.Contains(vendor)
                                                           select new { filter.Filtervalue }
                                                             ).FirstOrDefault();
                                            if (!string.IsNullOrEmpty(gettype.Filtervalue))
                                            {


                                                DP_Recipient objDPRecipient = new DP_Recipient
                                                {
                                                    RecipientUserId = recipientId,
                                                    DeliveredUserId = userId,
                                                    DocId = objpublishCommRequestParam.docId,
                                                    Type = objpublishCommRequestParam.Doctype,
                                                    Status = Shared.New,
                                                    SentDate = DateTime.Now.Date,
                                                    MoveInHistory = false,
                                                    DocSeqNo = docseqno,
                                                    IsActive = true,
                                                    VersionNo = objpublishCommRequestParam.versionno,
                                                    UserType = vendor,
                                                    RecipeintDueDate = (objpublishCommRequestParam.dueDate == null || objpublishCommRequestParam.dueDate == defaultdatetime1) ? defaultdatetime3 : objpublishCommRequestParam.dueDate,
                                                    DeliveredCompanyId = objpublishCommRequestParam.CompanyId,
                                                    RecipientCompanyid = recipientCompanyId,
                                                    CreatedDate = DateTime.Now.Date,
                                                    CommReceivedDate = (objpublishCommRequestParam.dueDate == null || objpublishCommRequestParam.dueDate == defaultdatetime1) ? currentdate : currentdate.AddDays((double)((objpublishCommRequestParam.dueDate - currentdate).TotalDays <= 30 ? 0 : (objpublishCommRequestParam.dueDate - currentdate).TotalDays - 30))
                                                };

                                                objDecisionPointEntities.DP_Recipient.Add(objDPRecipient);
                                            }

                                            Isinserted = objDecisionPointEntities.SaveChanges();
                                        }
                                        else
                                        {
                                            checkres.IsActive = true;
                                            checkres.MoveInHistory = false;
                                            Isinserted = objDecisionPointEntities.SaveChanges();
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    if (clientids != null)
                    {
                        if (clientids.Count > 0)
                        {
                            #region Client
                            foreach (var id in clientids)
                            {
                                if (!id.Equals(Shared.Zero) && !id.Equals(Shared.Zero + Shared.Colon + Shared.Zero))
                                {
                                    int recipientId = Convert.ToInt32(id.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                                    string recipientCompanyId = Convert.ToString(id.Split(char.Parse(Shared.Colon))[1], CultureInfo.InvariantCulture);
                                    using (objDecisionPointEntities = new DecisionPointEntities())
                                    {
                                        var checkres = (from recipient in objDecisionPointEntities.DP_Recipient
                                                        join document in objDecisionPointEntities.DP_DocumentDetails
                                                        on recipient.DocId equals document.Id
                                                        where recipient.RecipientUserId == recipientId && recipient.DeliveredCompanyId == objpublishCommRequestParam.CompanyId && recipient.DocId == objpublishCommRequestParam.docId
                                                        && document.VersionNo == objpublishCommRequestParam.versionno
                                                        select recipient).FirstOrDefault();
                                        if (object.Equals(checkres, null))
                                        {
                                            var res = (from recipient in objDecisionPointEntities.DP_Recipient
                                                       where recipient.RecipientUserId == recipientId
                                                       select recipient.DocSeqNo).Max();
                                            docseqno = 0;
                                            if (res != null)
                                            {
                                                docseqno = (int)(res + 1);
                                            }
                                            else
                                            {
                                                docseqno = 1;
                                            }

                                            var gettype = (from filter in objDecisionPointEntities.DP_CommRecipientFilter
                                                           where filter.DocId == objpublishCommRequestParam.docId && filter.FilterType == "type" && filter.Filtervalue != Shared.Staff &&
                                                               filter.Filtervalue != ic && filter.Filtervalue.Contains(client)
                                                           select new { filter.Filtervalue }
                                                            ).FirstOrDefault();
                                            if (!string.IsNullOrEmpty(gettype.Filtervalue))
                                            {
                                                DP_Recipient objDPRecipient = new DP_Recipient
                                                {
                                                    RecipientUserId = recipientId,
                                                    DeliveredUserId = userId,
                                                    DocId = objpublishCommRequestParam.docId,
                                                    Type = objpublishCommRequestParam.Doctype,
                                                    Status = Shared.New,
                                                    SentDate = DateTime.Now.Date,
                                                    MoveInHistory = false,
                                                    DocSeqNo = docseqno,
                                                    IsActive = true,
                                                    VersionNo = objpublishCommRequestParam.versionno,
                                                    UserType = client,
                                                    RecipeintDueDate = (objpublishCommRequestParam.dueDate == null || objpublishCommRequestParam.dueDate == defaultdatetime1) ? defaultdatetime3 : objpublishCommRequestParam.dueDate,
                                                    DeliveredCompanyId = objpublishCommRequestParam.CompanyId,
                                                    RecipientCompanyid = recipientCompanyId,
                                                    CreatedDate = DateTime.Now.Date,
                                                    CommReceivedDate = (objpublishCommRequestParam.dueDate == null || objpublishCommRequestParam.dueDate == defaultdatetime1) ? currentdate : currentdate.AddDays((double)((objpublishCommRequestParam.dueDate - currentdate).TotalDays <= 30 ? 0 : (objpublishCommRequestParam.dueDate - currentdate).TotalDays - 30))
                                                };
                                                objDecisionPointEntities.DP_Recipient.Add(objDPRecipient);
                                            }

                                            Isinserted = objDecisionPointEntities.SaveChanges();
                                        }
                                        else
                                        {
                                            checkres.IsActive = true;
                                            checkres.MoveInHistory = false;
                                            Isinserted = objDecisionPointEntities.SaveChanges();
                                        }
                                    }
                                }
                            }
                            #endregion
                        }
                    }

                    //check for existing record for forwared communication person
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        var checkres = (from recipient in objDecisionPointEntities.DP_Recipient
                                        join document in objDecisionPointEntities.DP_DocumentDetails
                                        on recipient.DocId equals document.Id
                                        where recipient.RecipientCompanyid == objpublishCommRequestParam.CompanyId
                                        && recipient.DeliveredCompanyId == objpublishCommRequestParam.CompanyId
                                        && recipient.DocId == objpublishCommRequestParam.docId
                                        && document.VersionNo == objpublishCommRequestParam.versionno && recipient.Status == Shared.Forward
                                        select recipient.Id).ToList();
                        if (checkres == null || checkres.Count <= 0)
                        {
                            //insert sender  user detail in database
                            DP_Recipient objSenderDPRecipient = new DP_Recipient
                            {
                                RecipientUserId = userId,
                                DeliveredUserId = userId,
                                DocId = objpublishCommRequestParam.docId,
                                Type = objpublishCommRequestParam.Doctype,
                                Status = Shared.Forward,
                                SentDate = DateTime.Now.Date,
                                MoveInHistory = true,
                                DocSeqNo = 0,
                                IsActive = true,
                                VersionNo = objpublishCommRequestParam.versionno,
                                UserType = Shared.Staff,
                                RecipeintDueDate = (objpublishCommRequestParam.dueDate == null || objpublishCommRequestParam.dueDate == defaultdatetime1) ? defaultdatetime3 : objpublishCommRequestParam.dueDate,
                                DeliveredCompanyId = objpublishCommRequestParam.CompanyId,
                                RecipientCompanyid = objpublishCommRequestParam.CompanyId,
                                CreatedDate = DateTime.Now.Date,
                                // CommReceivedDate = (objpublishCommRequestParam.dueDate == null || objpublishCommRequestParam.dueDate == defaultdatetime1) ? DateTime.Now.Date : commReceivedDate//currentdate.AddDays((double)(SqlFunctions.DateDiff("DAY", currentdate, objpublishCommRequestParam.dueDate) - 30))
                            };
                            objDecisionPointEntities.DP_Recipient.Add(objSenderDPRecipient);
                        }
                        Isinserted = objDecisionPointEntities.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return Isinserted;
        }

        ///// <summary>
        ///// Used for insert the communication to admin my communication always
        ///// </summary>
        ///// <param name="objpublishCommRequestParam">objpublishCommRequestParam</param>
        ///// <param name="UserId">UserId</param>
        ///// <param name="defaultdatetime1">defaultdatetime1</param>
        ///// <createdby>Bobi</createdby>
        ///// <createddate>18 july 2014</createddate>
        //private void InsertCommunicationforAdmin(publishCommRequestParam objpublishCommRequestParam, int UserId, DateTime defaultdatetime1)
        //{
        //    try
        //    {
        //        using (objDecisionPointEntities = new DecisionPointEntities())
        //        {
        //           var checkres = (from recipient in objDecisionPointEntities.DP_Recipient
        //                                                join document in objDecisionPointEntities.DP_DocumentDetails
        //                                                on recipient.DocId equals document.Id
        //                           where recipient.RecipientUserId == UserId && recipient.DeliveredCompanyId == objpublishCommRequestParam.CompanyId
        //                                                && recipient.DocId == objpublishCommRequestParam.docId
        //                                                && document.VersionNo == objpublishCommRequestParam.versionno
        //                                                select recipient).FirstOrDefault();
        //           if (object.Equals(checkres, null))
        //           {
        //               var res = (from recipient in objDecisionPointEntities.DP_Recipient
        //                          where recipient.RecipientUserId == UserId
        //                          select recipient.DocSeqNo).Max();
        //              int docseqno = 0;
        //               if (res != null)
        //               {
        //                   docseqno = (int)(res + 1);
        //               }
        //               else
        //               {
        //                   docseqno = 1;
        //               }

        //                   DP_Recipient objDPRecipient = new DP_Recipient
        //                   {
        //                       RecipientUserId = UserId,
        //                       DeliveredUserId = UserId,
        //                       DocId = objpublishCommRequestParam.docId,
        //                       Type = objpublishCommRequestParam.Doctype,
        //                       Status = Shared.New,
        //                       SentDate = DateTime.Now.Date,
        //                       IsDeleted = false,
        //                       MoveInHistory = false,
        //                       DocSeqNo = docseqno,
        //                       IsActive = true,
        //                       VersionNo = objpublishCommRequestParam.versionno,
        //                       UserType = "staff",
        //                       RecipeintDueDate = (objpublishCommRequestParam.dueDate == null || objpublishCommRequestParam.dueDate == defaultdatetime1) ? defaultdatetime3 : objpublishCommRequestParam.dueDate,
        //                       DeliveredCompanyId = objpublishCommRequestParam.CompanyId,
        //                       RecipientCompanyid = objpublishCommRequestParam.CompanyId,
        //                       CreatedDate = DateTime.Now.Date
        //                   };
        //                   objDecisionPointEntities.DP_Recipient.Add(objDPRecipient);
        //                   //insert into [DP_Performance] for calculate the performance
        //                   //var checkdocperformance = (from performance in objDecisionPointEntities.DP_Performance
        //                   //                           where performance.DocID == objpublishCommRequestParam.docId
        //                   //                           select performance).FirstOrDefault();
        //                   //if (checkdocperformance != null)
        //                   //{
        //                   //    int totalStaff = Convert.ToInt32(checkdocperformance.TotalDocReceivedbystaff) + 1;
        //                   //    checkdocperformance.TotalDocReceivedbystaff = totalStaff;
        //                   //}
        //                   //else
        //                   //{
        //                   //    DP_Performance objDPPerformance = new DP_Performance
        //                   //    {
        //                   //        DeliveredUserID = UserId,
        //                   //        DocID = objpublishCommRequestParam.docId,
        //                   //        TotalDocReceivedbystaff = 1,
        //                   //        TotalDocReceivedbyClient = 0,
        //                   //        TotalDocReceivedbyIC = 0,
        //                   //        TotalDocReceivedbyVendor = 0,
        //                   //        DeliverCompanyID = objpublishCommRequestParam.CompanyId
        //                   //    };
        //                   //    objDecisionPointEntities.DP_Performance.Add(objDPPerformance);
        //                   //}
        //                    objDecisionPointEntities.SaveChanges();

        //           }
        //        }
        //    }
        //    catch
        //    {

        //        throw;
        //    }
        //}

        /// <summary>
        /// Used to save the test rules
        /// </summary>
        /// <param name="objCommTestRulesRequestParam"></param>
        /// <param name="type"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 1 2014</createdDate>
        public int SaveCommTestRules(CommTestRulesRequestParam objCommTestRulesRequestParam, string type)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals("update"))
                    {

                        var res = (from testrule in objDecisionPointEntities.DP_CommTestRules
                                   where testrule.DocId == objCommTestRulesRequestParam.docId && testrule.Id == objCommTestRulesRequestParam.Testruleid
                                   select new { testrule }).ToList();
                        if (res != null)
                        {
                            foreach (var testrule in res)
                            {
                                objDecisionPointEntities.DP_CommTestRules.Remove(testrule.testrule);
                            }

                        }

                    }

                    DP_CommTestRules objDPCommTestRules = new DP_CommTestRules
                    {
                        RandQues = objCommTestRulesRequestParam.RandQues,
                        RandAns = objCommTestRulesRequestParam.RandAns,
                        ReqReTest = objCommTestRulesRequestParam.ReqReTest,
                        ShowWrongeAns = objCommTestRulesRequestParam.ShowWrongeAns,
                        Attempts = objCommTestRulesRequestParam.Attempts,
                        PassingScore = objCommTestRulesRequestParam.PassingScore,
                        DocId = objCommTestRulesRequestParam.docId,
                        Instruction = objCommTestRulesRequestParam.Instruction

                    };
                    objDecisionPointEntities.DP_CommTestRules.Add(objDPCommTestRules);

                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// used to save the Q & Ans
        /// </summary>
        /// <param name="objCommTestRulesRequestParam"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 1 2014</createdDate>
        public int SaveCommQuesAns(CommunicationAssessmentResponseParam objCommunicationAssessmentResponseParam)
        {
            int Isinserted = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (objCommunicationAssessmentResponseParam.type.Equals("ques"))
                    {
                        if (objCommunicationAssessmentResponseParam.savestatus.Equals("update") && (objCommunicationAssessmentResponseParam.assessmentid != 0))
                        {
                            var res = (from ques in objDecisionPointEntities.DP_CommAssesment
                                       join ans in objDecisionPointEntities.DP_CommAnswers
                                       on ques.Id equals ans.QuestionId
                                       where ques.DocMsgId == objCommunicationAssessmentResponseParam.docId && ques.Id == objCommunicationAssessmentResponseParam.assessmentid
                                       select new { ques, ans }).ToList();
                            if (res != null)
                            {
                                foreach (var questions in res)
                                {
                                    objDecisionPointEntities.DP_CommAssesment.Remove(questions.ques);
                                }
                                foreach (var answers in res)
                                {
                                    objDecisionPointEntities.DP_CommAnswers.Remove(answers.ans);
                                }
                            }
                        }

                        DP_CommAssesment objDPCommAssesment = new DP_CommAssesment
                        {
                            Question = objCommunicationAssessmentResponseParam.question,
                            DocMsgId = objCommunicationAssessmentResponseParam.docId,
                        };
                        objDecisionPointEntities.DP_CommAssesment.Add(objDPCommAssesment);
                        objDecisionPointEntities.SaveChanges();
                        Isinserted = objDPCommAssesment.Id;

                    }
                    else if (objCommunicationAssessmentResponseParam.type.Equals("ans"))
                    {
                        IList<string> answers = new List<string>();
                        if (answers != null)
                        {
                            answers = objCommunicationAssessmentResponseParam.question.Split(',');
                        }
                        foreach (var ans in answers)
                        {
                            string[] answithstatus = ans.Split(':');

                            DP_CommAnswers DPCommAnswers = new DP_CommAnswers
                            {
                                QuestionId = objCommunicationAssessmentResponseParam.docId,
                                Answer = answithstatus[0],
                                IsCorrect = Convert.ToBoolean(answithstatus[1], CultureInfo.InvariantCulture)

                            };
                            objDecisionPointEntities.DP_CommAnswers.Add(DPCommAnswers);
                        }
                        Isinserted = objDecisionPointEntities.SaveChanges();
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
            return Isinserted;
        }
        /// <summary>
        /// Used to get existing communication details
        /// </summary>
        /// <param name="docId"></param>
        /// <param name="type"></param>
        /// <returns>Ilist</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 6 2014</createdDate>
        public IList<CommDetailsResponseParam> GetCommDetails(int docId, string type)
        {
            IList<CommDetailsResponseParam> finalList = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals("documentdetail"))
                    {
                        var query = (from document in objDecisionPointEntities.DP_DocumentDetails
                                     where document.Id == docId
                                     select new CommDetailsResponseParam
                                     {
                                         DocTitle = document.Title,
                                         DocType = document.DocType,
                                         DueDate = (DateTime)document.DueDate,
                                         Reference = document.Reference,
                                         Instruction = document.Introduction,
                                         Reqnewhirestaff = (bool)document.ReqNewStaff == null ? false : (bool)document.ReqNewStaff,
                                         Reqnewhireic = (bool)document.ReqNewIC == null ? false : (bool)document.ReqNewIC,
                                         Reqnewhirevendor = (bool)document.ReqNewVendor == null ? false : (bool)document.ReqNewVendor,
                                         Retake = document.Retake,
                                         Effectivedate = document.EffectiveDate == null ? System.DateTime.Now : document.EffectiveDate,
                                         policyno = document.PolicyNo,
                                         versionno = (int)document.VersionNo == null ? 0 : (int)document.VersionNo,
                                         HOC = document.HOC == null ? string.Empty : document.HOC,
                                         DaysOfCompletion = (int)(document.DaysToComplete == null ? 0 : document.DaysToComplete),
                                         Group = document.DocGroup,
                                         DocTitles = document.DocTitles,
                                         VideoTitles = document.VideoTitle,
                                         ScormTitles = document.ScormTitles

                                     }).ToList();
                        finalList = query;
                    }
                    if (type.Equals("links"))
                    {
                        var query = (from lkn in objDecisionPointEntities.DP_CommLinks
                                     where lkn.DocMsgId == docId
                                     select new CommDetailsResponseParam
                                     {
                                         LinkURl = lkn.LinkURL,
                                         LinkId = lkn.Id

                                     }).ToList();
                        finalList = query;
                    }
                    if (type.Equals("content"))
                    {
                        var query = (from content in objDecisionPointEntities.DP_CommContents
                                     where content.DocMsgId == docId
                                     select new CommDetailsResponseParam
                                     {
                                         FileLoc = content.FileLoc,
                                         Filetitle = content.FileTitle,
                                         Filetype = content.Filetype,
                                         Contentid = content.Id
                                     }).ToList();
                        finalList = query;
                    }
                    if (type.Equals("reqaction"))
                    {
                        var query = (from reqaction in objDecisionPointEntities.DP_CommRquiredActions
                                     where reqaction.DocMsgId == docId
                                     select new CommDetailsResponseParam
                                     {
                                         Condition = reqaction.Condition,
                                         Reqactionid = reqaction.Id

                                     }).ToList();
                        finalList = query;
                    }
                    if (type.Equals("testrule"))
                    {
                        var query = (from testrule in objDecisionPointEntities.DP_CommTestRules
                                     where testrule.DocId == docId
                                     select new CommDetailsResponseParam
                                     {
                                         RandQues = (bool)testrule.RandQues,
                                         RandAns = (bool)testrule.RandAns,
                                         ShowWrongeAns = (bool)testrule.ShowWrongeAns,
                                         ReqReTest = (bool)testrule.ReqReTest,
                                         PassingScore = testrule.PassingScore,
                                         Attempts = testrule.Attempts,
                                         Instruction = testrule.Instruction,
                                         Testruleid = testrule.Id
                                     }).ToList();
                        finalList = query;
                    }

                    if (type.Equals("ques"))
                    {
                        var query = (from assment in objDecisionPointEntities.DP_CommAssesment
                                     where assment.DocMsgId == docId
                                     select new CommDetailsResponseParam
                                     {
                                         Question = assment.Question.Trim(),
                                         AssesmentId = assment.Id

                                     }).ToList();
                        finalList = query;
                    }
                    if (type.Equals("ans"))
                    {
                        var query = (from assment in objDecisionPointEntities.DP_CommAssesment
                                     join ans in objDecisionPointEntities.DP_CommAnswers
                                     on assment.Id equals ans.QuestionId
                                     where assment.DocMsgId == docId
                                     select new CommDetailsResponseParam
                                     {
                                         Answer = ans.Answer.Trim(),
                                         IsCorrect = (bool)ans.IsCorrect,
                                         QuestionId = (int)ans.QuestionId

                                     }).ToList();
                        finalList = query;
                    }
                    return finalList;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to delete video from database
        /// </summary>
        /// <param name="id"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 5 2014</createdDate>
        public int DeleteDocVideo(int id, int type)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //zero for delete the document and video and scorm file form communicatin section
                    if (type.Equals(0))
                    {
                        var contentDetails = (from content in objDecisionPointEntities.DP_CommContents
                                              where content.Id == id
                                              select content).ToList();
                        if (contentDetails != null)
                        {
                            foreach (var content in contentDetails)
                            {
                                objDecisionPointEntities.DP_CommContents.Remove(content);
                            }

                        }
                    }
                    //one for delete the document form JCR section
                    else if (type.Equals(1))
                    {
                        var reqDocDetails = (from content in objDecisionPointEntities.DP_ReqDocUpload
                                             where content.Id == id
                                             select content).ToList();
                        if (reqDocDetails != null)
                        {
                            foreach (var reqdoc in reqDocDetails)
                            {
                                objDecisionPointEntities.DP_ReqDocUpload.Remove(reqdoc);
                            }

                        }
                    }
                    //two for delete the document form license section for electronic and non electronic
                    else if (type.Equals(2))
                    {
                        var licandnsDocDetails = (from content in objDecisionPointEntities.DP_ProfessionalLicenseUploadDocs
                                                  where content.Id == id
                                                  select content).ToList();
                        if (licandnsDocDetails != null)
                        {
                            foreach (var licinsudoc in licandnsDocDetails)
                            {
                                objDecisionPointEntities.DP_ProfessionalLicenseUploadDocs.Remove(licinsudoc);
                            }

                        }
                    }
                    //two for delete the document form insurance section for electronic and non electronic
                    else if (type.Equals(3))
                    {
                        var licandnsDocDetails = (from content in objDecisionPointEntities.DP_InsuranceUploadDocs
                                                  where content.Id == id
                                                  select content).ToList();
                        if (licandnsDocDetails != null)
                        {
                            foreach (var licinsudoc in licandnsDocDetails)
                            {
                                objDecisionPointEntities.DP_InsuranceUploadDocs.Remove(licinsudoc);
                            }

                        }
                    }
                    //three for delete the document form additional req section
                    else if (type.Equals(5))
                    {
                        var backgroundchkDocDetails = (from content in objDecisionPointEntities.DP_AdditionalReqUploadDocs
                                                       where content.Id == id
                                                       select content).ToList();
                        if (backgroundchkDocDetails != null)
                        {
                            foreach (var backgchk in backgroundchkDocDetails)
                            {
                                objDecisionPointEntities.DP_AdditionalReqUploadDocs.Remove(backgchk);
                            }

                        }
                    }
                    //three for delete the document from contract 
                    else if (type.Equals(4))
                    {
                        var contrcatDocDetails = (from content in objDecisionPointEntities.DP_CreateContractDocMaster
                                                  where content.Id == id
                                                  select content).ToList();
                        if (contrcatDocDetails != null)
                        {
                            foreach (var contractchk in contrcatDocDetails)
                            {
                                objDecisionPointEntities.DP_CreateContractDocMaster.Remove(contractchk);
                            }

                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to delete assesment from database
        /// </summary>
        /// <param name="id"></param>
        /// <returns>int</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 5 2014</createdDate>
        public int DeleteAssesment(int id)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var resquest = (from ques in objDecisionPointEntities.DP_CommAssesment
                                    where ques.Id == id
                                    select new { ques }).ToList();
                    if (resquest != null && resquest.Count > 0)
                    {
                        foreach (var questions in resquest)
                        {
                            objDecisionPointEntities.DP_CommAssesment.Remove(questions.ques);
                        }

                    }
                    var res = (from ques in objDecisionPointEntities.DP_CommAssesment
                               join ans in objDecisionPointEntities.DP_CommAnswers
                               on ques.Id equals ans.QuestionId
                               where ques.Id == id
                               select new { ans }).ToList();
                    if (res != null && res.Count > 0)
                    {
                        foreach (var answers in res)
                        {
                            objDecisionPointEntities.DP_CommAnswers.Remove(answers.ans);
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to get unsent document details
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="companyId"></param>
        /// <returns>IEnumerable</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 5 2014</createdDate>
        public IEnumerable<UserDashBoardResponseParam> GetUnSentDocumentsDetails(int userId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //  IEnumerable<UserDashBoardResponseParam> query = null;

                    var query = (from documents in objDecisionPointEntities.DP_DocumentDetails
                                 join user in objDecisionPointEntities.DP_User
                                  on documents.UserId equals user.Id
                                 join profileuser in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profileuser.UserId
                                 where documents.CompanyId == companyId && documents.IsDeleted == false
                                 && documents.OnStaging == true
                                 //&& documents.ReqNewIC==false && documents.ReqNewStaff==
                                 orderby documents.Title
                                 select new UserDashBoardResponseParam
                                 {
                                     DocType = documents.DocType == null ? string.Empty : documents.DocType,
                                     DocTitle = documents.Title == null ? string.Empty : documents.Title,
                                     Docfrom = profileuser.Firstname + Shared.SingleSpace + profileuser.LastName,
                                     reference = documents.Reference,
                                     policyNo = documents.PolicyNo,
                                     DocId = documents.Id,
                                     effectiveDate = documents.CreatedDate,
                                     hourofcredit = documents.HOC == null ? string.Empty : documents.HOC
                                 }).OrderBy(c => c.DocTitle).ToList();

                    //var query1 = (from documents in objDecisionPointEntities.DP_Recipient where documents.DeliveredUserId == userId select (int)documents.DocId).Distinct().ToList();
                    //var dumy = query;
                    //foreach (var item in query.ToList())
                    //{
                    //    foreach (var item1 in query1)
                    //    {
                    //        if (item.DocId == item1)
                    //        {
                    //            dumy.Remove(item);
                    //        }
                    //    }
                    //}
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to update the staging status
        /// </summary>
        /// <param name="docid"></param>
        /// <returns></returns>
        /// <createdby>bobi</createdby>
        /// <createddate>12 june 2014</createddate>
        public int UpdateStagingstatus(int docid)
        {
            int IsUpdate = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from doc in objDecisionPointEntities.DP_DocumentDetails
                               where doc.Id == docid
                               select doc).FirstOrDefault();
                    if (res != null)
                    {
                        res.OnStaging = false;
                        res.OnLib = true;
                    }
                    IsUpdate = objDecisionPointEntities.SaveChanges();

                }
            }
            catch
            {
                throw;
            }
            return IsUpdate;
        }

        /// <summary>
        /// Used to get the details is any recipient complete that comunication or not
        /// </summary>
        /// <param name="docid"></param>
        /// <returns></returns>
        /// <createdby>bobi</createdby>
        /// <createddate>18 june 2014</createddate>
        public bool GetIsAnyRecipient(int docid)
        {
            bool isExist = false;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from doc in objDecisionPointEntities.DP_Recipient
                               where doc.DocId == docid && doc.Status == status
                               select doc).ToList();
                    if (res != null && res.Count > 0)
                    {
                        isExist = true;
                    }
                    else
                    {
                        var resdoc = (from doc in objDecisionPointEntities.DP_CommContents
                                      join Ucontent in objDecisionPointEntities.DP_CommDocSpentTime on doc.Id equals Ucontent.DocId
                                      where doc.DocMsgId == docid && Ucontent.status == true
                                      select doc).ToList();
                        if (resdoc != null && resdoc.Count > 0)
                        {
                            isExist = true;
                        }
                    }
                }
            }
            catch
            {

                throw;
            }
            return isExist;
        }

        #endregion

        #region Services
        /// <summary>
        /// used for added the new service name
        /// </summary>
        /// <param name="ServiceName"></param>
        /// <returns>return one if service is saved else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 14 2014</createdDate>
        public int AddService(string serviceName, int userId, string companyId)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from service in objDecisionPointEntities.DP_ServicesMaster
                               where service.Service == serviceName && service.CompanyId == companyId
                               select service).FirstOrDefault();

                    if (res != null)
                    {
                        return -1;
                    }
                    else
                    {
                        DP_ServicesMaster objDPServiceMaster = new DP_ServicesMaster
                        {
                            Service = serviceName,
                            IsDeleted = false,
                            IsActive = true,
                            CompanyId = companyId,
                            CreatedBy = userId,
                            CreatedDate = DateTime.Now.Date
                        };
                        objDecisionPointEntities.DP_ServicesMaster.Add(objDPServiceMaster);

                        return objDecisionPointEntities.SaveChanges();
                    }
                }
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// used for get the service details
        /// </summary>
        /// <returns>return service detial in ienumerbale form</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetService(string type)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type == "admin")
                    {
                        var query = (from service in objDecisionPointEntities.DP_ServicesMaster
                                     where service.IsDeleted == false
                                     select new CompanyDashBoardResponseParam
                                     {
                                         serviceName = service.Service,
                                         isDeleted = service.IsDeleted,
                                         isActive = service.IsActive,
                                         id = service.Id,
                                     }).ToList();
                        return query;
                    }
                    else
                    {
                        var query = (from service in objDecisionPointEntities.DP_ServicesMaster
                                     where service.IsDeleted == false && service.IsActive == true
                                     select new CompanyDashBoardResponseParam
                                     {
                                         serviceName = service.Service,
                                         isDeleted = service.IsDeleted,
                                         isActive = service.IsActive,
                                         id = service.Id,
                                     }).ToList();
                        return query;
                    }
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for disable and enable the service
        /// </summary>
        /// <param name="serviceId"></param>
        /// <param name="isActive"></param>
        /// <returns>return one if service is disable else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public int DisaEnaService(int serviceId, bool isActive)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from service in objDecisionPointEntities.DP_ServicesMaster
                                 where service.Id == serviceId
                                 select service).FirstOrDefault();
                    if (!object.Equals(query, null))
                    {
                        query.IsActive = isActive;
                    }
                    //disable all JCR related with that service
                    var ReqDocQuery = (from reqdocsen in objDecisionPointEntities.DP_ReqDocSender
                                       join service in objDecisionPointEntities.DP_ReqDocService
                                       on reqdocsen.Id equals service.ReqDocId
                                       where service.ServiceId == serviceId
                                       select new { reqdocsen }).ToList();
                    if (!object.Equals(ReqDocQuery, null) && ReqDocQuery.Count > 0)
                    {
                        foreach (var item in ReqDocQuery)
                        {
                            item.reqdocsen.IsActive = isActive;
                            item.reqdocsen.IsDeleted = isActive ? false : true;
                            var reqdocrecquery = (from reqdocsen in objDecisionPointEntities.DP_ReqDocSender
                                                  join reqdocrec in objDecisionPointEntities.DP_ReqDocReceiver
                                                   on reqdocsen.Id equals reqdocrec.ReqDocId
                                                  where reqdocsen.Id == item.reqdocsen.Id
                                                  select new { reqdocrec }).ToList();
                            if (!object.Equals(reqdocrecquery, null) && reqdocrecquery.Count > 0)
                            {
                                foreach (var recitem in reqdocrecquery)
                                {
                                    recitem.reqdocrec.IsActive = isActive;
                                }
                            }
                        }
                    }
                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for update the service
        /// </summary>
        /// <param name="serviceId"></param>
        /// <param name="servicename"></param>
        /// <param name="companyId"></param>
        /// <returns>return one if client is update else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public int UpdateService(int serviceId, string servicename, String companyId)
        {
            int res;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from service in objDecisionPointEntities.DP_ServicesMaster
                                 where service.Service == servicename && service.CompanyId == companyId
                                 select service).FirstOrDefault();

                    if (query != null && !query.Id.Equals(serviceId))
                    {
                        res = -1;

                    }
                    else
                    {
                        var query1 = (from service in objDecisionPointEntities.DP_ServicesMaster
                                      where service.Id == serviceId
                                      select service).FirstOrDefault(); ;

                        query1.Service = servicename;
                        //Finally saved the changes in local database
                        res = objDecisionPointEntities.SaveChanges();

                    }
                    return res;
                }


            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for insert the IC service
        /// </summary>
        /// <param name="servicesid"></param>
        /// <param name="userId"></param>
        /// <param name="companyId"></param>
        /// <returns>return one if service is insert else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>july 1 2014</createdDate>
        public int SaveICServices(string servicesid, int userId, string companyId)
        {
            int res = 0;
            string parentCompanyId = string.Empty;
            int serviceType = 0;

            IList<string> col2 = new List<string>();
            IList<string> col3 = new List<string>();
            try
            {
                IList<string> col1 = new List<string>();
                col1 = servicesid.Split(char.Parse(Shared.Colon));
                foreach (var items in col1)
                {
                    col2 = items.Split(char.Parse(Shared.Astrik));
                    if (col2.Count >= 2)
                    {
                        if (!string.IsNullOrEmpty(col2[0]))
                        {
                            col3 = col2[0].Split(char.Parse(Shared.DollarSign));
                            if (col1.Count >= 1)
                            {
                                parentCompanyId = col3[0];
                                serviceType = Convert.ToInt32(col3[1], CultureInfo.InvariantCulture);

                            }
                        }
                        using (objDecisionPointEntities = new DecisionPointEntities())
                        {
                            //insert service status in DP_ComapnyVendorMapping as per client list of IC
                            var icClientList = (from map in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                where map.CompanyId == parentCompanyId &&
                                                map.VendorId == userId && map.ReceiverCompanyId == companyId && map.IsActive == true
                                                select map).FirstOrDefault();
                            if (!object.Equals(icClientList, null))
                            {
                                icClientList.ServicesStatus = (byte)serviceType;
                            }

                            //set isactiove false which are unselect by IC
                            var resquery = (from service in objDecisionPointEntities.DP_ServiceMapping
                                            where service.ParentCompanyId == parentCompanyId &&
                                         service.UserId == userId && service.UserCompanyId == companyId
                                            //&& !servicesList.Contains((int)service.ServiceId)
                                            select service).ToList();
                            foreach (var item in resquery)
                            {
                                item.IsActive = false;
                            }
                            if (!string.IsNullOrEmpty(col2[1]))
                            {
                                servicesList = new List<int>();
                                servicesList = col2[1].Split(',').Select(x => Convert.ToInt32(x)).ToList();
                                if (!object.Equals(servicesList, null) && !object.Equals(servicesList, string.Empty))
                                {
                                    //set isactive true which are selected by IC or insert the service which are newly selected by IC
                                    foreach (int item in servicesList)
                                    {
                                        var query = (from service in objDecisionPointEntities.DP_ServiceMapping
                                                     where service.ServiceId == item &&
                                                     service.ParentCompanyId == parentCompanyId &&
                                                     service.UserId == userId && service.UserCompanyId == companyId
                                                     select service).FirstOrDefault();
                                        if (!object.Equals(query, null))
                                        {
                                            query.IsActive = true;
                                        }
                                        else
                                        {
                                            DP_ServiceMapping objDPServiceMapping = new DP_ServiceMapping()
                                            {
                                                UserId = userId,
                                                UserCompanyId = companyId,
                                                ServiceId = item,
                                                IsActive = true,
                                                ParentCompanyId = parentCompanyId
                                            };
                                            objDecisionPointEntities.DP_ServiceMapping.Add(objDPServiceMapping);
                                        }
                                    }
                                }
                            }
                            res = objDecisionPointEntities.SaveChanges();
                        }

                        //insert job compliance reqiurement sections
                        if (!string.IsNullOrEmpty(col2[1]))
                        {
                            JobReqForNewHireRequestParam objJobReqForNewHireRequestParam = new JobReqForNewHireRequestParam()
                            {
                                inviteCompanyId = parentCompanyId,
                                companyId = companyId,
                                userId = userId,
                                userType = Shared.IC,
                                parentuserId = GetParentUserId(parentCompanyId, Shared.Individual)
                            };
                            res = UpdateJobComplianceReqAsPerService(col2[1], objJobReqForNewHireRequestParam);
                        }
                    }
                }

                //set service status in dp_profile for IC

                SetServiceStatusforICInProfile(userId, companyId);
            }
            catch
            {
                throw;
            }
            return res;
        }
        /// <summary>
        /// used to set the serviceStatus in Dp_profile for IC
        /// </summary>
        /// <param name="dnaCount"></param>
        /// <createdby>Bobi</createdby>
        /// <createdDate>6 Nov 2014</createdDate>
        private void SetServiceStatusforICInProfile(int userId, string userCompanyId)
        {
            try
            {
                int dnaCount = 0;

                List<string> icClientList = GetICClientList(userId, true).Select(x => x.companyId).ToList();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    foreach (var item in icClientList)
                    {
                        var clientServiceStatus = (from map in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                   where map.CompanyId == item &&
                                                   map.VendorId == userId && map.ReceiverCompanyId == userCompanyId && map.IsActive == true
                                                   select map).FirstOrDefault();
                        if (!object.Equals(clientServiceStatus, null))
                        {
                            if (clientServiceStatus.ServicesStatus.Equals((byte)2))
                            {
                                dnaCount++;
                            }
                        }
                    }
                    //Check that is Ic select dna for our all clients

                    var profileDetails = (from profile in objDecisionPointEntities.DP_Profile
                                          where profile.UserId == userId
                                          select profile).FirstOrDefault();
                    if (!object.Equals(profileDetails, null))
                    {
                        if (icClientList.Count == dnaCount)
                        {
                            profileDetails.ServicesStatus = 2;
                        }
                        else
                        {
                            profileDetails.ServicesStatus = 0;
                        }
                    }
                    objDecisionPointEntities.SaveChanges();


                }
            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region References
        /// <summary>
        /// used for added the new refrence name
        /// </summary>
        /// <param name="companyId"></param>
        /// <param name="referenceName"></param>
        /// <param name="userId"></param>
        /// <returns>return one if title is saved else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public int AddReference(string referenceName, int userId, string companyId, int groupId)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from refe in objDecisionPointEntities.DP_Reference
                               where refe.Reference == referenceName && refe.CompanyId == companyId && refe.GroupId == groupId
                               select refe).FirstOrDefault();

                    if (res != null)
                    {
                        return -1;
                    }
                    else
                    {
                        DP_Reference objDPReference = new DP_Reference
                        {
                            Reference = referenceName,
                            IsDeleted = false,
                            IsActive = true,
                            CompanyId = companyId,
                            CreatedBy = userId,
                            CreatedDate = DateTime.Now.Date,
                            GroupId = groupId
                        };
                        objDecisionPointEntities.DP_Reference.Add(objDPReference);

                        return objDecisionPointEntities.SaveChanges();
                    }
                }
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// used for get the reference details of any user
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>return title detial in ienumerbale form</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetUserReference(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from refe in objDecisionPointEntities.DP_Reference
                                 where refe.IsDeleted == false && refe.CompanyId == companyId && refe.IsActive == true
                                 select new CompanyDashBoardResponseParam
                                 {
                                     referenceName = refe.Reference,
                                     isDeleted = refe.IsDeleted,
                                     isActive = refe.IsActive,
                                     id = refe.Id,
                                 }).ToList();
                    return query;

                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// used for get all reference of any company
        /// </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <returns>IEnumerable</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetReference(string type, string id, string dgroup)
        {
            IEnumerable<CompanyDashBoardResponseParam> finallist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type == "admin")
                    {
                        var query = (from refe in objDecisionPointEntities.DP_Reference
                                     join groupd in objDecisionPointEntities.DP_Group
                                      on refe.GroupId equals groupd.Id into docgroup
                                     from docg in docgroup.DefaultIfEmpty()
                                     where refe.IsDeleted == false && refe.CompanyId == id
                                     select new CompanyDashBoardResponseParam
                                     {
                                         referenceName = refe.Reference,
                                         isDeleted = refe.IsDeleted,
                                         isActive = refe.IsActive,
                                         id = refe.Id,
                                         groupName = docg.Group
                                     }).ToList();
                        finallist = query;
                    }
                    else if (type.Equals("Communication"))
                    {

                        var query = (from refe in objDecisionPointEntities.DP_Reference
                                     join groupd in objDecisionPointEntities.DP_Group
                                      on refe.GroupId equals groupd.Id into docgroup
                                     from docg in docgroup.DefaultIfEmpty()
                                     where refe.IsDeleted == false && refe.CompanyId == id && refe.IsActive == true
                                     select new CompanyDashBoardResponseParam
                                     {
                                         referenceName = refe.Reference,
                                         isDeleted = refe.IsDeleted,
                                         isActive = refe.IsActive,
                                         id = refe.Id,
                                         groupName = docg.Group
                                     }).ToList();
                        finallist = query;

                        //else if (string.IsNullOrEmpty(dgroup))
                        //{
                        //    finallist = (from list in finallist
                        //                 where list.groupName == dgroup
                        //                 select list).ToList();
                        //}
                    }
                    List<string> groupvalues = new List<string>();
                    if (!string.IsNullOrEmpty(dgroup) && !dgroup.Equals("All"))
                    {

                        groupvalues = dgroup.Split('*').ToList();
                        finallist = (from list in finallist
                                     where groupvalues.Contains(list.groupName)
                                     select list).ToList();

                    }
                }
            }
            catch
            {
                throw;
            }
            return finallist;
        }
        /// <summary>
        /// Used for disable and enable the title
        /// </summary>
        /// <param name="referenceId"></param>
        /// <param name="isActive"></param>
        /// <returns>return one if title is disable else retrun zero</returns
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public int DisaEnaReference(int referenceId, bool isActive)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from refe in objDecisionPointEntities.DP_Reference
                                 where refe.Id == referenceId
                                 select refe).FirstOrDefault();
                    if (query != null)
                    {
                        query.IsActive = isActive;
                        //disabe or enable sub category as per group
                        var cquery = (from refe in objDecisionPointEntities.DP_Category
                                      where refe.ReferenceId == referenceId
                                      select refe).ToList();
                        if (cquery != null && cquery.Count > 0)
                        {
                            foreach (var item in cquery)
                            {
                                item.IsActive = isActive;
                            }

                        }
                    }

                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for update the reference
        /// </summary>
        /// <param name="companyId"></param><param name="referenceId"></param><param name="referenceName"></param>
        /// <returns>return one if client is update else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public int UpdateReference(int referenceId, string referenceName, string companyId, int groupId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete

                    var query = (from refe in objDecisionPointEntities.DP_Reference
                                 where refe.Reference.Equals(referenceName.ToLower()) && refe.CompanyId == companyId && refe.GroupId == groupId
                                 select refe).FirstOrDefault();
                    if (query != null && !query.Id.Equals(referenceId))
                    {
                        return -1;
                    }
                    else
                    {
                        var query1 = (from refe in objDecisionPointEntities.DP_Reference
                                      where refe.Id == referenceId
                                      select refe).FirstOrDefault();
                        if (query1 != null)
                        {
                            query1.Reference = referenceName;
                            query1.GroupId = groupId;
                        }

                        //Finally saved the changes in local database
                        return objDecisionPointEntities.SaveChanges();
                    }

                }

            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region Announcement
        /// <summary>
        /// Used For get Announcement from Database to display on Login Page
        /// </summary>
        /// <returns>IEnumerable</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public IEnumerable<AnnouncementResponseParam> GetAnnouncement()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from message in objDecisionPointEntities.DP_Announcement

                                 where message.IsDeleted == false
                                 select new AnnouncementResponseParam
                                 {
                                     Id = message.Id,
                                     Announcement = message.Announcement,
                                     UserId = message.UserId,
                                     IsActive = (bool)message.IsActive,
                                     ReleaseDate = message.CreatedDate,
                                     IsClose = (bool)message.IsClose == null ? false : (bool)message.IsClose
                                 }).OrderByDescending(x => x.ReleaseDate).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// used for added & publish the new announcement name
        /// </summary>
        ///<param name="announcement"></param><param name="UserId"></param>
        /// <returns>return one if service is saved else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public int AddAnnoucement(string announcement, int UserId)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from announce in objDecisionPointEntities.DP_Announcement
                               where announce.Announcement == announcement.Trim()
                               select announce).FirstOrDefault();

                    if (res != null)
                    {
                        return -1;
                    }
                    else
                    {
                        DP_Announcement objDPAnnouncement = new DP_Announcement
                        {
                            Announcement = announcement,
                            CreatedDate = System.DateTime.Now.Date,
                            IsDeleted = false,
                            UserId = UserId,
                            IsActive = true,
                            IsClose = false
                        };
                        objDecisionPointEntities.DP_Announcement.Add(objDPAnnouncement);
                        objDecisionPointEntities.SaveChanges();
                        return objDPAnnouncement.Id;
                    }
                }
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// used for added with close status the new announcement name
        /// </summary>
        /// <param name="announcement"></param><param name="announcementId"></param><param name="status"></param><param name="UserId"></param>
        /// <returns>return one if service is saved else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public int AddCloseAnnoucement(string announcement, string status, int announcementId, int UserId)
        {
            int Isupdate = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (status.Equals("Save"))
                    {
                        var res = (from announce in objDecisionPointEntities.DP_Announcement
                                   where announce.Announcement == announcement.Trim()
                                   select announce).FirstOrDefault();

                        if (res != null)
                        {
                            Isupdate = -1;
                        }
                        else
                        {
                            DP_Announcement objDPAnnouncement = new DP_Announcement
                            {
                                Announcement = announcement,
                                CreatedDate = System.DateTime.Now.Date,
                                IsDeleted = false,
                                UserId = UserId,
                                IsActive = true,
                                IsClose = true

                            };
                            objDecisionPointEntities.DP_Announcement.Add(objDPAnnouncement);
                            objDecisionPointEntities.SaveChanges();
                            Isupdate = objDPAnnouncement.Id;
                        }
                    }
                    else if (status.Equals("Edit"))
                    {
                        var query = (from announ in objDecisionPointEntities.DP_Announcement
                                     where announ.Id == announcementId
                                     select announ).FirstOrDefault();
                        query.Announcement = announcement;
                        query.IsClose = true;
                        //Finally saved the changes in local database
                        objDecisionPointEntities.SaveChanges();
                        Isupdate = query.Id;
                    }
                }
            }
            catch
            {
                throw;
            }
            return Isupdate;
        }

        /// <summary>
        /// Used for update the client
        /// </summary>
        /// <param name="announcementId"></param>
        /// <param name="announcement"></param>
        /// <returns>return one if client is update else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public int UpdateAnnoucement(int announcementId, string announcement)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from announ in objDecisionPointEntities.DP_Announcement
                                 where announ.Id == announcementId
                                 select announ).FirstOrDefault();
                    query.Announcement = announcement;
                    query.IsClose = false;
                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for disable and enable the client
        /// </summary>
        /// <param name="announcementId"></param>
        /// <param name="isActive"></param>
        /// <returns>return one if client is disable else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public int DisaEnaAnnoucement(int announcementId, bool isActive)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from announ in objDecisionPointEntities.DP_Announcement
                                 where announ.Id == announcementId
                                 select announ).FirstOrDefault();
                    query.IsActive = isActive;

                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        ///  This method used for remove the document of particular user [We just update the deleted status of that message in loval database]
        /// </summary>
        /// <param name="Id"></param>
        /// <returns>int if messages is deleted return 1 else return zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public int RemoveAnnoucement(int Id)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from announce in objDecisionPointEntities.DP_Announcement
                                 where announce.Id == Id
                                 select announce).FirstOrDefault();
                    query.IsDeleted = true;
                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region Category
        /// <summary>
        /// used for added the new Category name
        /// </summary>
        /// <param name="titleName"></param>
        /// <returns>return one if title is saved else retrun zero</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public int AddCategory(CategoryRequestParam categoryRequestParam)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from refe in objDecisionPointEntities.DP_Category
                               where refe.Category == categoryRequestParam.categoryName && refe.CompanyId == categoryRequestParam.CompanyId && refe.ReferenceId == categoryRequestParam.sourceId && refe.GroupId == categoryRequestParam.groupId
                               select refe).FirstOrDefault();

                    if (res != null)
                    {
                        return -1;
                    }
                    else
                    {
                        DP_Category objDPCategory = new DP_Category
                        {
                            Category = categoryRequestParam.categoryName,
                            IsDeleted = false,
                            IsActive = true,
                            CompanyId = categoryRequestParam.CompanyId,
                            CreatedBy = categoryRequestParam.UserId,
                            CreatedDate = DateTime.Now.Date,
                            ReferenceId = categoryRequestParam.sourceId,
                            GroupId = categoryRequestParam.groupId
                        };
                        objDecisionPointEntities.DP_Category.Add(objDPCategory);

                        return objDecisionPointEntities.SaveChanges();
                    }
                }
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// used for get the title details
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>return title detial in ienumerbale form</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetUserCategory(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from refe in objDecisionPointEntities.DP_Category
                                 where refe.IsDeleted == false && refe.CompanyId == companyId && refe.IsActive == true
                                 select new CompanyDashBoardResponseParam
                                 {
                                     categoryName = refe.Category,
                                     isDeleted = refe.IsDeleted,
                                     isActive = refe.IsActive,
                                     id = refe.Id,
                                 }).ToList();
                    return query;

                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to category details
        /// </summary>
        /// <param name="type"></param>
        /// <param name="ID"></param>
        /// <returns>IEnumerable</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>march 18 2014</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetCategory(string type, string ID, string sourcename, string dgroup)
        {
            IEnumerable<CompanyDashBoardResponseParam> finallist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type == "admin")
                    {
                        var query = (from refe in objDecisionPointEntities.DP_Category
                                     join source in objDecisionPointEntities.DP_Reference
                                     on refe.ReferenceId equals source.Id into doctemp
                                     from doc in doctemp.DefaultIfEmpty()
                                     join groupd in objDecisionPointEntities.DP_Group
                                      on refe.GroupId equals groupd.Id into docgroup
                                     from docg in docgroup.DefaultIfEmpty()
                                     where refe.IsDeleted == false && refe.CompanyId == ID
                                     select new CompanyDashBoardResponseParam
                                     {
                                         categoryName = refe.Category,
                                         isDeleted = refe.IsDeleted,
                                         isActive = refe.IsActive,
                                         id = refe.Id,
                                         referenceName = doc.Reference,
                                         groupName = docg.Group
                                     }).ToList();
                        finallist = query;
                    }
                    else if (type.Equals("Communication"))
                    {
                        var query = (from refe in objDecisionPointEntities.DP_Category
                                     join source in objDecisionPointEntities.DP_Reference
                                     on refe.ReferenceId equals source.Id into doctemp
                                     from doc in doctemp.DefaultIfEmpty()
                                     join groupd in objDecisionPointEntities.DP_Group
                                     on refe.GroupId equals groupd.Id into docgroup
                                     from docg in docgroup.DefaultIfEmpty()
                                     where refe.IsDeleted == false && refe.CompanyId == ID && refe.IsActive == true
                                     select new CompanyDashBoardResponseParam
                                     {
                                         categoryName = refe.Category,
                                         isDeleted = refe.IsDeleted,
                                         isActive = refe.IsActive,
                                         id = refe.Id,
                                         referenceName = doc.Reference,
                                         groupName = docg.Group
                                     }).Distinct().ToList();
                        finallist = query;


                    }
                    if (!string.IsNullOrEmpty(sourcename) && !sourcename.Equals("All"))
                    {
                        finallist = (from list in finallist
                                     where list.referenceName == sourcename
                                     select list).ToList();
                    }
                    List<string> grouplist = new List<string>();
                    grouplist = dgroup.Split('*').ToList();
                    if (!string.IsNullOrEmpty(dgroup) && !dgroup.Equals("All"))
                    {
                        finallist = (from list in finallist
                                     where grouplist.Contains(list.groupName)
                                     select list).ToList();

                    }
                    return finallist;

                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used for disable and enable the category
        /// </summary>
        /// <param name="titleId"></param>
        /// <param name="isActive"></param>
        /// <returns>return one if title is disable else retrun zero</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>march 31 2014</createdDate>
        public int DisaEnaCategory(int categoryId, bool isActive)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from refe in objDecisionPointEntities.DP_Category
                                 where refe.Id == categoryId
                                 select refe).FirstOrDefault();
                    if (query != null)
                    {
                        query.IsActive = isActive;
                    }

                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for update the title
        /// </summary>
        /// <param name="categoryId"></param><param name="categoryName"></param><param name="CompanyId"></param>
        /// <returns>return one if client is update else retrun zero</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>march 31 2014</createdDate>
        public int UpdateCategory(CategoryRequestParam categoryRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete

                    var query = (from refe in objDecisionPointEntities.DP_Category
                                 where refe.Category == categoryRequestParam.categoryName && refe.CompanyId == categoryRequestParam.CompanyId && refe.ReferenceId == categoryRequestParam.sourceId && refe.GroupId == categoryRequestParam.groupId
                                 select refe).FirstOrDefault();
                    if (query != null && !query.Id.Equals(categoryRequestParam.categoryId))
                    {
                        return -1;
                    }
                    else
                    {
                        var query1 = (from refe in objDecisionPointEntities.DP_Category
                                      where refe.Id == categoryRequestParam.categoryId
                                      select refe).FirstOrDefault();
                        if (query1 != null)
                        {
                            query1.Category = categoryRequestParam.categoryName;
                            query1.ReferenceId = categoryRequestParam.sourceId;
                            query1.GroupId = categoryRequestParam.groupId;
                        }
                        //Finally saved the changes in local database
                        return objDecisionPointEntities.SaveChanges();
                    }

                }

            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region Group
        /// <summary>
        /// used for added the new group name
        /// </summary>
        /// <param name="groupName"></param>
        /// <returns>return one if title is saved else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>may 19 2014</createdDate>
        public int AddGroup(string groupName, int UserId, string CompanyId)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from refe in objDecisionPointEntities.DP_Group
                               where refe.Group == groupName && refe.CompanyId == CompanyId
                               select refe).FirstOrDefault();

                    if (res != null)
                    {
                        return -1;
                    }
                    else
                    {
                        DP_Group objgroup = new DP_Group
                        {
                            Group = groupName,
                            IsDeleted = false,
                            IsActive = true,
                            CompanyId = CompanyId,
                            CreatedBy = UserId,
                            CreatedDate = DateTime.Now.Date
                        };
                        objDecisionPointEntities.DP_Group.Add(objgroup);

                        return objDecisionPointEntities.SaveChanges();
                    }
                }
            }
            catch
            {
                throw;
            }

        }

        /// <summary>
        /// Used to group details
        /// </summary>
        /// <param name="type"></param>
        /// <param name="ID"></param>
        /// <returns>IEnumerable</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>may 19 2014</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetGroup(string type, string ID)
        {
            IEnumerable<CompanyDashBoardResponseParam> finallist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.Admin.ToUpper(CultureInfo.InvariantCulture)))
                    {
                        var query = (from refe in objDecisionPointEntities.DP_Group
                                     where refe.IsDeleted == false && refe.CompanyId == ID
                                     select new CompanyDashBoardResponseParam
                                     {
                                         categoryName = refe.Group,
                                         isDeleted = refe.IsDeleted,
                                         isActive = refe.IsActive,
                                         id = refe.Id,
                                     }).ToList();
                        finallist = query;
                    }

                    else if (type.Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.User.ToUpper(CultureInfo.InvariantCulture)))
                    {
                        var query = (from refe in objDecisionPointEntities.DP_Group
                                     where refe.IsDeleted == false && refe.CompanyId == ID && refe.IsActive == true
                                     select new CompanyDashBoardResponseParam
                                     {
                                         categoryName = refe.Group,
                                         isDeleted = refe.IsDeleted,
                                         isActive = refe.IsActive,
                                         id = refe.Id,
                                     }).ToList();
                        finallist = query;
                    }

                    return finallist;

                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used for disable and enable the group
        /// </summary>
        /// <param name="titleId"></param>
        /// <param name="isActive"></param>
        /// <returns>return one if title is disable else retrun zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>may 19 2014</createdDate>
        public int DisaEnaGroup(int groupIdId, bool isActive)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from refe in objDecisionPointEntities.DP_Group
                                 where refe.Id == groupIdId
                                 select refe).FirstOrDefault();
                    if (query != null)
                    {
                        query.IsActive = isActive;
                        //disable or enable category with that group
                        var cquery = (from refe in objDecisionPointEntities.DP_Reference
                                      where refe.GroupId == groupIdId
                                      select refe).ToList();
                        if (cquery != null && cquery.Count > 0)
                        {
                            foreach (var item in cquery)
                            {
                                item.IsActive = isActive;
                            }

                        }
                        //disabe or enable sub category as per group
                        var scquery = (from refe in objDecisionPointEntities.DP_Category
                                       where refe.GroupId == groupIdId
                                       select refe).ToList();
                        if (scquery != null && scquery.Count > 0)
                        {
                            foreach (var item in scquery)
                            {
                                item.IsActive = isActive;
                            }

                        }
                    }

                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for update the Group
        /// </summary>
        /// <param name="groupId"></param><param name="groupName"></param><param name="CompanyId"></param>
        /// <returns>return one if client is update else retrun zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>may 19 2014</createdDate>
        public int UpdateGroup(int groupId, string groupName, string CompanyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete

                    var query = (from refe in objDecisionPointEntities.DP_Group
                                 where refe.Group.Equals(groupName.ToLower()) && refe.CompanyId == CompanyId
                                 select refe).FirstOrDefault();
                    if (query != null && !query.Id.Equals(groupId))
                    {
                        return -1;
                    }
                    else
                    {
                        var query1 = (from refe in objDecisionPointEntities.DP_Group
                                      where refe.Id == groupId
                                      select refe).FirstOrDefault();
                        if (query1 != null)
                        {
                            query1.Group = groupName;

                        }
                        //Finally saved the changes in local database
                        return objDecisionPointEntities.SaveChanges();
                    }

                }

            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region Vendor Type
        /// <summary>
        /// used for added the new vendor type
        /// </summary>
        /// <param name="groupName"></param>
        /// <returns>return one if title is saved else retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>july 7 2014</createdDate>
        public int AddVendorType(string vTypeName, int UserId, string CompanyId)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from VT in objDecisionPointEntities.DP_VendorType
                               where VT.VendorType == vTypeName && VT.CompanyId == CompanyId
                               select VT).FirstOrDefault();

                    if (res != null)
                    {
                        return -1;
                    }
                    else
                    {
                        DP_VendorType objVT = new DP_VendorType
                        {
                            VendorType = vTypeName,
                            IsDeleted = false,
                            IsActive = true,
                            CompanyId = CompanyId,
                            CreatedBy = UserId,
                            CreatedDate = DateTime.Now.Date
                        };
                        objDecisionPointEntities.DP_VendorType.Add(objVT);

                        return objDecisionPointEntities.SaveChanges();
                    }
                }
            }
            catch
            {
                throw;
            }

        }

        /// <summary>
        /// Used to vendor Type
        /// </summary>
        /// <param name="type"></param>
        /// <param name="ID"></param>
        /// <returns>IEnumerable</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>july 7 2014</createdDate>
        public IEnumerable<CompanyDashBoardResponseParam> GetVendorType(string type, string ID)
        {
            IEnumerable<CompanyDashBoardResponseParam> finallist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Trim().ToLower(CultureInfo.InvariantCulture).Equals(Shared.Admin.Trim().ToLower(CultureInfo.InvariantCulture)))
                    {
                        var query = (from VT in objDecisionPointEntities.DP_VendorType
                                     where VT.IsDeleted == false && VT.CompanyId == ID
                                     select new CompanyDashBoardResponseParam
                                     {
                                         categoryName = VT.VendorType,
                                         isDeleted = VT.IsDeleted,
                                         isActive = VT.IsActive,
                                         id = VT.Id,
                                     }).ToList();
                        finallist = query;
                    }
                    else
                    {
                        var query = (from VT in objDecisionPointEntities.DP_VendorType
                                     where VT.IsDeleted == false && VT.IsActive == true && VT.CompanyId == ID
                                     select new CompanyDashBoardResponseParam
                                     {
                                         categoryName = VT.VendorType,
                                         isDeleted = VT.IsDeleted,
                                         isActive = VT.IsActive,
                                         id = VT.Id,
                                     }).ToList();
                        finallist = query;
                    }
                    return finallist;

                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used for disable and enable the vendor type
        /// </summary>
        /// <param name="titleId"></param>
        /// <param name="isActive"></param>
        /// <returns>return one if title is disable else retrun zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>july 7 2014</createdDate>
        public int DisaEnaVendorType(int vTypeId, bool isActive)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from VT in objDecisionPointEntities.DP_VendorType
                                 where VT.Id == vTypeId
                                 select VT).FirstOrDefault();
                    if (query != null)
                    {
                        query.IsActive = isActive;

                    }

                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for update the Vendor Type
        /// </summary>
        /// <param name="groupId"></param><param name="groupName"></param><param name="CompanyId"></param>
        /// <returns>return one if client is update else retrun zero</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>july 7 2014</createdDate>
        public int UpdateVendorType(int vTypeId, string vTypeName, string CompanyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete

                    var query = (from VT in objDecisionPointEntities.DP_VendorType
                                 where VT.VendorType.Equals(vTypeName.ToLower()) && VT.CompanyId == CompanyId
                                 select VT).FirstOrDefault();
                    if (query != null && !query.Id.Equals(vTypeId))
                    {
                        return -1;
                    }
                    else
                    {
                        var query1 = (from refe in objDecisionPointEntities.DP_VendorType
                                      where refe.Id == vTypeId
                                      select refe).FirstOrDefault();
                        if (query1 != null)
                        {
                            query1.VendorType = vTypeName;

                        }
                        //Finally saved the changes in local database
                        return objDecisionPointEntities.SaveChanges();
                    }

                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for add the vendor type for company
        /// </summary>
        /// <param name="objVendorTypeRequestParam"></param>
        /// <returns></returns>
        /// <createdby>bobi</createdby>
        /// <createddate>9 july 2014</createddate>
        public int AddVendorTypeForCompany(VendorTypeRequestParam objVendorTypeRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from VT in objDecisionPointEntities.DP_VendorTypeMapping
                               where VT.UserCompanyId == objVendorTypeRequestParam.UserCompanyId && VT.Type == objVendorTypeRequestParam.TYPE
                               select VT).ToList();

                    if (res != null && res.Count > 0)
                    {
                        foreach (var item in res)
                        {
                            item.IsActive = false;
                        }
                    }
                    if (!string.IsNullOrEmpty(objVendorTypeRequestParam.VendroTypeIds))
                    {
                        vendorTypeList = new List<int>();
                        vendorTypeList = objVendorTypeRequestParam.VendroTypeIds.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                        foreach (int item in vendorTypeList)
                        {
                            var query = (from VT in objDecisionPointEntities.DP_VendorTypeMapping
                                         where VT.UserCompanyId == objVendorTypeRequestParam.UserCompanyId &&
                                         VT.UserId == objVendorTypeRequestParam.UserId &&
                                         VT.VendorTypeId == item && VT.Type == objVendorTypeRequestParam.TYPE
                                         select VT).FirstOrDefault();
                            if (!object.Equals(query, null))
                            {
                                query.IsActive = true;
                            }
                            else
                            {
                                DP_VendorTypeMapping objDP_VendorTypeMapping = new DP_VendorTypeMapping()
                                {
                                    VendorTypeId = item,
                                    UserId = objVendorTypeRequestParam.UserId,
                                    UserCompanyId = objVendorTypeRequestParam.UserCompanyId,
                                    CreatedBy = objVendorTypeRequestParam.CreatedBy,
                                    CreaterCompanyId = objVendorTypeRequestParam.CreatorCompanyID,
                                    CreatedDate = DateTime.Now.Date,
                                    ModifiedBy = objVendorTypeRequestParam.CreatedBy,
                                    ModifiedDate = DateTime.Now.Date,
                                    IsActive = true,
                                    Type = objVendorTypeRequestParam.TYPE,
                                    IsDefault = false
                                };
                                objDecisionPointEntities.DP_VendorTypeMapping.Add(objDP_VendorTypeMapping);
                            }
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();

                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// Used for get the comoany Vendor Type
        /// </summary>
        /// <returns></returns>
        /// <ctreatedby>Bobi</ctreatedby>
        /// <createdDate>9 july 2014</createdDate>
        public IEnumerable<VendorTypeResponseParam> GetCompanyVendorType(string companyId, string type)
        {
            IEnumerable<VendorTypeResponseParam> finallist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //if (string.IsNullOrEmpty(Type))
                    //{
                    var query = (from VTM in objDecisionPointEntities.DP_VendorTypeMapping
                                 join VT in objDecisionPointEntities.DP_VendorType
                                 on VTM.VendorTypeId equals VT.Id
                                 where VTM.IsActive == true && VTM.UserCompanyId == companyId && VT.IsDeleted == false && VTM.Type == type
                                 && VT.IsActive == true
                                 select new VendorTypeResponseParam
                                 {
                                     VendorTypeName = VT.VendorType == null ? string.Empty : VT.VendorType,
                                     VendorTypeId = VT.Id == null ? 0 : VT.Id,
                                     tblId = VTM.Id == null ? 0 : VTM.Id,
                                     UserCompanyId = VTM.UserCompanyId == null ? string.Empty : VTM.UserCompanyId,
                                     CreatorCompanyId = VTM.CreaterCompanyId == null ? string.Empty : VTM.CreaterCompanyId,
                                     IsUserBased = (bool)(VTM.IsDefault == null ? false : VTM.IsDefault)
                                 }).OrderBy(x => x.VendorTypeName).ToList();
                    finallist = query;
                    // }
                    //else
                    //{
                    //    var query = (from VTM in objDecisionPointEntities.DP_VendorTypeMapping
                    //                 join VT in objDecisionPointEntities.DP_VendorType
                    //                 on VTM.VendorTypeId equals VT.Id
                    //                 where VTM.IsActive == true && VTM.UserCompanyId == companyId && VT.IsDeleted == false
                    //                 && VT.IsActive == true && VTM.Type == Type && VTM.IsDefault == true
                    //                 select new VendorTypeResponseParam
                    //                 {
                    //                     VendorTypeName = VT.VendorType == null ? string.Empty : VT.VendorType,
                    //                     VendorTypeId = VT.Id == null ? 0 : VT.Id,
                    //                     tblId = VTM.Id == null ? 0 : VTM.Id,
                    //                     UserCompanyId = VTM.UserCompanyId == null ? string.Empty : VTM.UserCompanyId,
                    //                     CreatorCompanyId = VTM.CreaterCompanyId == null ? string.Empty : VTM.CreaterCompanyId
                    //                 }).OrderBy(x => x.VendorTypeName).ToList();
                    //    finallist = query;
                    //}

                    return finallist;

                }
            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region << Engine Source code >>
        /// <summary>
        /// validate email wether exists or not
        /// </summary>
        /// <param name="email">user email id</param>
        /// <returns>string</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>march 31 2014</createdDate>
        public string CheckEmail(string email)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from security in objDecisionPointEntities.DP_User

                                 where security.EmailId == email && security.IsActive == true && security.IsDeleted == false
                                 select security.Password
                                 ).FirstOrDefault();
                    return Convert.ToString(query, CultureInfo.InvariantCulture);
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get smtp details from Db
        /// </summary>
        /// <returns>mail sending credetials</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>march 31 2014</createdDate>
        public SMTPDetail Getsmtpdetails()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from smtpemailaccount in objDecisionPointEntities.DP_EmailAccount

                                 where smtpemailaccount.IsActive == true
                                 select new SMTPDetail
                                 {
                                     EmailSmtpServerHost = smtpemailaccount.Host,
                                     EmailSmtpServerPort = smtpemailaccount.Port,
                                     EmailSmtpServerSSL = smtpemailaccount.EnableSsl,
                                     EmailSmtpServer = smtpemailaccount.Username,
                                     PasswordSmtpServer = smtpemailaccount.Password
                                 }).FirstOrDefault();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// change password of current user
        /// </summary>
        /// <param name="userId">user id</param>
        /// <param name="Password">password</param>
        /// <returns>change password success or fails</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>march 31 2014</createdDate>
        public int ChangePassword(ChangePasswordRequestParam changePasswordRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    // entity query for fetch user's records such as password, userid from database through user's userid 
                    var query1 = (from x in objDecisionPointEntities.DP_User
                                  join profile in objDecisionPointEntities.DP_Profile
                                  on x.Id equals profile.UserId
                                  where x.Id == changePasswordRequestParam.UserId
                                  select new { x, profile }).FirstOrDefault();
                    if (query1 != null)
                    {
                        if (query1.x.Password != changePasswordRequestParam.Password)
                        {
                            if (query1.profile.UserType.Equals(Shared.Individual) || query1.profile.UserType.Equals(Shared.IC))
                            {
                                if (query1.profile.UserType.Equals(Shared.IC))
                                {
                                    var query2 = (from x in objDecisionPointEntities.DP_User
                                                  join map in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                  on x.Id equals map.VendorId
                                                  where x.Id == changePasswordRequestParam.UserId
                                                  select new { x, map }).FirstOrDefault();
                                    if (query2 != null)
                                    {
                                        query2.x.IsTemp = false;
                                        query2.map.Invitationstatus = true;
                                        query2.x.Password = changePasswordRequestParam.Password;
                                        query2.map.Status = 1;
                                    }
                                }
                                else if (query1.profile.UserType.Equals(Shared.Individual))
                                {
                                    var query2 = (from x in objDecisionPointEntities.DP_User
                                                  join map in objDecisionPointEntities.DP_CompanyStaffMapping
                                                  on x.Id equals map.StaffId
                                                  where x.Id == changePasswordRequestParam.UserId
                                                  select new { x, map }).FirstOrDefault();
                                    if (query2 != null)
                                    {
                                        query2.x.IsTemp = false;
                                        query2.map.Invitationstatus = true;
                                        query2.x.Password = changePasswordRequestParam.Password;
                                        query2.map.Status = 1;
                                    }
                                }

                            }
                            else
                            {
                                query1.x.IsTemp = false;
                                query1.x.Password = changePasswordRequestParam.Password;
                            }
                        }
                    }

                    int result = objDecisionPointEntities.SaveChanges();
                    return result;

                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get security Questions
        /// </summary>
        /// <returns>return list of security questions</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>march 31 2014</createdDate>
        public IEnumerable<SecurityQuestionResponseParam> GetSecurityQuestion()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from security in objDecisionPointEntities.DP_Security

                                 where security.IsDeleted == false
                                 select new SecurityQuestionResponseParam
                                 {
                                     SecurityId = security.Id,
                                     SecurityQuestion = security.Question
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }

        }


        /// <summary>
        /// Method to validate user whether user is authorised or not for application.
        /// </summary>
        /// <param name="UserId">user id</param>
        /// <param name="Password">password</param>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>march 31 2014</createdDate>
        public LoginDetailsResponseParam CheckLogin(string UserId, string Password)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    // entity query for fetch user's records such as User Id, user Type, User Name from database through user's userid and password 
                    var query = (from x in objDecisionPointEntities.DP_User
                                 join y in objDecisionPointEntities.DP_Profile
                                 on x.Id equals y.UserId
                                 where ((x.UserId.Equals(UserId) && x.Password.Equals(Password)) || ((x.EmailId.Equals(UserId)) && x.Password.Equals(Password)))
                                 select new LoginDetailsResponseParam
                                 {
                                     Emailid = x.EmailId,
                                     UserType = y.UserType,
                                     Firstname = y.Firstname,
                                     MiddelName = y.MiddelName,
                                     LastName = y.LastName,
                                     UserId = x.Id,
                                     IsPayment = (bool)(y.IsPayment == null ? false : y.IsPayment),
                                     IsTemp = x.IsTemp,
                                     BusinessName = y.BusinessName,
                                     CompanyId = x.CompanyId,
                                     IsRegistered = x.IsRegistered,
                                     IsActive = (bool)(x.IsActive == null ? false : x.IsActive)
                                 }).FirstOrDefault();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to get IC Payment type
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="companyId"></param>
        /// <returns>int</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>march 31 2014</createdDate>
        public int GetIcPaymentType(int userId, string companyId)
        {
            try
            {
                int result = 0;
                int Id = Convert.ToInt32(companyId, CultureInfo.InvariantCulture);
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var resCompId = (from users in objDecisionPointEntities.DP_User
                                     where users.Id == Id
                                     select users.CompanyId).FirstOrDefault();
                    if (resCompId != null)
                    {
                        var query = (from user in objDecisionPointEntities.DP_User
                                     join vendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     on user.Id equals vendorMap.VendorId
                                     where vendorMap.VendorId == userId && vendorMap.CompanyId == resCompId
                                     select vendorMap.PaymentType).FirstOrDefault();
                        return result = Convert.ToInt32(query, CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        return result;
                    }
                }
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// set company profile
        /// </summary>
        /// <param name="companyProfileRequestParam">parameters to save</param>
        /// <returns>int type sucess or fail message</returns>
        public int SetCompanyProfile(CompanyProfileRequestParam companyProfileRequestParam)
        {
            int updatedStatus = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (companyProfileRequestParam.UserType.Equals(Shared.NonClient) || companyProfileRequestParam.UserType.Equals(Shared.IC))
                    {
                        var res = (from cus in objDecisionPointEntities.DP_User
                                   where cus.Id == companyProfileRequestParam.UserId
                                   select cus).FirstOrDefault();

                        if (res != null)
                        {

                            res.ModifyBy = companyProfileRequestParam.UserId;
                            res.ModifyDate = DateTime.Now;
                            res.Password = companyProfileRequestParam.Password;
                            res.IsTemp = false;
                        }
                        else
                        {
                            updatedStatus = -1;
                        }
                    }
                    var query = (from Profile in objDecisionPointEntities.DP_Profile
                                 where Profile.UserId == companyProfileRequestParam.UserId
                                 select Profile).FirstOrDefault();
                    if (query != null)
                    {
                        query.BusinessName = companyProfileRequestParam.BusinessName;
                        query.OfficePhone = companyProfileRequestParam.OfficePhone;
                        query.Address = companyProfileRequestParam.StreetNumber + Shared.SingleSpace + companyProfileRequestParam.Direction + Shared.SingleSpace + companyProfileRequestParam.StreetName;
                        query.Direction = companyProfileRequestParam.Direction;
                        query.Street = companyProfileRequestParam.StreetName;
                        query.StateId = companyProfileRequestParam.StateId;
                        query.CityId = companyProfileRequestParam.CityId;
                        query.ZipCode = companyProfileRequestParam.ZipCode;
                        query.Fax = companyProfileRequestParam.fax;
                        query.StreetNumber = companyProfileRequestParam.StreetNumber;
                        query.ModifyBy = companyProfileRequestParam.UserId;
                        query.ModifyDate = DateTime.Now;
                        query.CityName = companyProfileRequestParam.CityName;
                        query.CompanyLogo = companyProfileRequestParam.CompanyLogo;
                        query.CertificationNumber = companyProfileRequestParam.CerificationNumber;
                        query.CertificateExpDate = companyProfileRequestParam.CertificateExpDate;
                        query.CertifyingAgency = companyProfileRequestParam.CertifyingAgency;
                        query.BusinessClass = companyProfileRequestParam.BusinessClass;
                    }
                    updatedStatus = objDecisionPointEntities.SaveChanges();
                    return updatedStatus;
                }

            }


            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get company profile details
        /// </summary>
        /// <param name="userId">user id</param>
        /// <returns>company profile list</returns>
        public CompanyProfileResponseParam GetCompanyProfileDetails(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.Id == userId
                                 select new CompanyProfileResponseParam
                                 {
                                     BusinessName = profile.BusinessName,
                                     OfficePhone = profile.OfficePhone,
                                     BusinessAddress = profile.Address,
                                     Direction = profile.Direction,
                                     StreetName = profile.Street,
                                     StateId = profile.StateId,
                                     CityId = profile.CityId,
                                     ZipCode = profile.ZipCode,
                                     fax = profile.Fax,
                                     Email = user.EmailId,
                                     SecurityAnswer1 = user.Answer1,
                                     SecurityAnswer2 = user.Answer2,
                                     SecurityAnswer3 = user.Answer3,
                                     StreetNumber = profile.StreetNumber,
                                     CityName = profile.CityName,
                                     CompanyLogo = profile.CompanyLogo,
                                     Password = user.Password,
                                     CerificationNumber = profile.CertificationNumber,
                                     CertificateExpDate = profile.CertificateExpDate,
                                     CertifyingAgency = profile.CertifyingAgency,
                                     BusinessClass = profile.BusinessClass,
                                     CreatedBy = user.CreatedBy
                                 }).FirstOrDefault();
                    var flowTypeOfUser = (from flowMap in objDecisionPointEntities.DP_FlowMapping
                                          join flowMaster in objDecisionPointEntities.DP_FlowMaster
                                          on flowMap.FlowId equals flowMaster.Id
                                          where flowMap.UserId == userId && flowMap.CreatedBy == query.CreatedBy
                                          select flowMaster.Flow).FirstOrDefault();
                    query.FlowType = flowTypeOfUser;
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// set admin profile
        /// </summary>
        /// <param name="adminProfileRequestParam">parameter ofr admin profile</param>
        /// <returns>int type message for save sucess or fail</returns>
        public int SetAdminProfile(AdminProfileRequestParam adminProfileRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //var check = (from rolemap in objDecisionPointEntities.DP_RoleMapping
                    //             where rolemap.RoleId == 2//rolemap.CompanyId == adminProfileRequestParam.UserId && 
                    //             select rolemap).FirstOrDefault();
                    //if (check != null)
                    //{

                    var res = (from cus in objDecisionPointEntities.DP_User
                               where cus.Id == adminProfileRequestParam.UserId
                               select cus).FirstOrDefault();

                    if (res != null)
                    {
                        res.EmailId = adminProfileRequestParam.Email;
                        res.Password = adminProfileRequestParam.Password;
                        res.Question1 = adminProfileRequestParam.SecurityQuestion1;
                        res.Question2 = adminProfileRequestParam.SecurityQuestion2;
                        res.Question3 = adminProfileRequestParam.SecurityQuestion3;
                        res.Answer1 = adminProfileRequestParam.SecurityAnswer1;
                        res.Answer2 = adminProfileRequestParam.SecurityAnswer2;
                        res.Answer3 = adminProfileRequestParam.SecurityAnswer3;
                        res.ModifyBy = adminProfileRequestParam.UserId;
                        res.ModifyDate = DateTime.Now;
                        res.IsTemp = false;
                        objDecisionPointEntities.SaveChanges();

                    }
                    else
                    {
                        return -1;
                    }

                    var query = (from Profile in objDecisionPointEntities.DP_Profile
                                 where Profile.UserId == adminProfileRequestParam.UserId
                                 select Profile).FirstOrDefault();
                    if (query != null)
                    {
                        query.Firstname = adminProfileRequestParam.FirstName;
                        query.MiddelName = adminProfileRequestParam.MiddleName;
                        query.LastName = adminProfileRequestParam.LastName;
                        query.Nickname = adminProfileRequestParam.NickName;
                        query.CellNumber = adminProfileRequestParam.CellNumber;
                        query.Phone = adminProfileRequestParam.OfficePhone;
                        query.ModifyBy = adminProfileRequestParam.UserId;
                        query.ModifyDate = DateTime.Now;
                    }

                    var query2 = (from staffmap in objDecisionPointEntities.DP_CompanyStaffMapping
                                  where staffmap.CompanyId == adminProfileRequestParam.CompanyId && staffmap.CreatedBy == adminProfileRequestParam.UserId
                                  select staffmap).FirstOrDefault();
                    if (query2 == null)
                    {
                        DP_CompanyStaffMapping objStaffMap = new DP_CompanyStaffMapping()
                        {
                            CompanyId = adminProfileRequestParam.CompanyId,
                            StaffId = adminProfileRequestParam.UserId,
                            Invitationstatus = true,
                            CreatedBy = adminProfileRequestParam.UserId,
                            CreatedDate = DateTime.Now.Date,
                            Status = 1,
                            IsActive = true,
                            StatusChangedate = DateTime.Now.Date,

                        };
                        objDecisionPointEntities.DP_CompanyStaffMapping.Add(objStaffMap);
                    }
                    objDecisionPointEntities.SaveChanges();
                    return 1;
                    #region Commented

                    //}
                    //else
                    //{
                    //    DP_User dP_User = new DP_User
                    //    {
                    //        EmailId = adminProfileRequestParam.Email,
                    //        Password = adminProfileRequestParam.Password,
                    //        Question1 = adminProfileRequestParam.SecurityQuestion1,
                    //        Question2 = adminProfileRequestParam.SecurityQuestion2,
                    //        Question3 = adminProfileRequestParam.SecurityQuestion3,
                    //        Answer1 = adminProfileRequestParam.SecurityAnswer1,
                    //        Answer2 = adminProfileRequestParam.SecurityAnswer2,
                    //        Answer3 = adminProfileRequestParam.SecurityAnswer3,
                    //        IsTemp = false,
                    //    };
                    //    objDecisionPointEntities.DP_User.Add(dP_User);
                    //    objDecisionPointEntities.SaveChanges();
                    //    var id = dP_User.Id;
                    //    DP_Profile dP_Profile = new DP_Profile
                    //    {
                    //        UserId = id,
                    //        Firstname = adminProfileRequestParam.FirstName,
                    //        MiddelName = adminProfileRequestParam.MiddleName,
                    //        LastName = adminProfileRequestParam.LastName,
                    //        CellNumber = adminProfileRequestParam.CellNumber,
                    //        Phone = adminProfileRequestParam.OfficePhone
                    //    };
                    //    objDecisionPointEntities.DP_Profile.Add(dP_Profile);
                    //    objDecisionPointEntities.SaveChanges();
                    //    DP_RoleMapping dP_RoleMapping = new DP_RoleMapping
                    //    {
                    //        RoleId = 2,
                    //        UserId = id,

                    //    };
                    //    objDecisionPointEntities.DP_RoleMapping.Add(dP_RoleMapping);
                    //    objDecisionPointEntities.SaveChanges();
                    //    return 1;
                    //}
                    #endregion

                }
            }


            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get admin profile details
        /// </summary>
        /// <param name="userId">user id</param>
        /// <returns> admin profile details</returns>
        public IEnumerable<AdminProfileResponseParam> GetAdminProfile(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query2 = (from user in objDecisionPointEntities.DP_User
                                  join profile in objDecisionPointEntities.DP_Profile
                                  on user.Id equals profile.UserId
                                  where user.Id == userId
                                  select new AdminProfileResponseParam
                                  {
                                      FirstName = profile.Firstname,
                                      MiddleName = profile.MiddelName,
                                      LastName = profile.LastName,
                                      NickName = profile.Nickname,
                                      OfficePhone = profile.Phone,
                                      CellNumber = profile.CellNumber,
                                      Email = user.EmailId,
                                      Password = user.Password,
                                      SecurityAnswer1 = user.Answer1,
                                      SecurityAnswer2 = user.Answer2,
                                      SecurityAnswer3 = user.Answer3,
                                      SecurityQuestion1 = user.Question1,
                                      SecurityQuestion2 = user.Question2,
                                      SecurityQuestion3 = user.Question3,

                                  }).ToList();

                    return query2;
                }
            }
            catch
            {
                throw;
            }

        }

        /// <summary>
        /// get county list
        /// </summary>
        /// <param name="StateAbbre">state abbreviation</param>
        /// <returns>list of county</returns>
        public IEnumerable<CountyResponseParam> GetCountyList(string StateAbbre)
        {
            try
            {
                List<string> myList = StateAbbre.Split(',').ToList();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from state in objDecisionPointEntities.DP_County
                                 where myList.Contains(state.StateAbbre)
                                 select new CountyResponseParam
                                 {
                                     CountyId = state.Id,
                                     StateAbbre = state.StateAbbre,
                                     CountyName = state.County + ", " + state.StateAbbre
                                 }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get city list by state
        /// </summary>
        /// <param name="StateAbbre">state abbreviations</param>
        /// <returns>list of city serached by state</returns>
        public IEnumerable<CityResponseParam> GetCityListByState(string StateAbbre)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (!string.IsNullOrEmpty(Convert.ToString(StateAbbre, CultureInfo.InvariantCulture)))
                    {
                        var query = (from city in objDecisionPointEntities.DP_City
                                     where city.StateId == Convert.ToInt32(StateAbbre)
                                     select new CityResponseParam
                                     {
                                         CityId = city.Id,
                                         CityName = city.City,
                                         StateName = city.StateAbbre,
                                         CountyName = city.CountyName

                                     }).Distinct().ToList().OrderBy(x => x.CityName);
                        return query;
                    }
                    else
                    {
                        var query = (from city in objDecisionPointEntities.DP_City
                                     select new CityResponseParam
                                     {
                                         CityId = city.Id,
                                         CityName = city.City,
                                         StateName = city.StateAbbre,
                                         CountyName = city.CountyName

                                     }).Distinct().ToList().OrderBy(x => x.CityName);
                        return query;
                    }
                }
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// get payment amount as per company Id
        /// </summary>
        /// <param name="CompanyId"> company id</param>
        /// <returns> list of payment amount including office staff fee filed staff fee</returns>
        public IEnumerable<PaymentAmountResponseParam> getPaymentAmount(string CompanyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from state in objDecisionPointEntities.DP_PayementMaster
                                 where state.CompanyCode == CompanyId
                                 select new PaymentAmountResponseParam
                                 {
                                     Id = state.Id,
                                     CompanyCode = state.CompanyCode,
                                     CompanyFee = state.CompanyFee,
                                     PerFieldStaffFee = state.PerFieldstaffFee,
                                     PerOfficeStaffFee = state.PerOfficestaffFee,
                                     PerIcFee = state.PerICFee,
                                     IsInvoice = state.IsInvoice,
                                 }).ToList();
                    if (query == null || query.Count == 0)
                    {
                        query = (from payement in objDecisionPointEntities.DP_DefaultPaymentMaster
                                 where payement.IsActive == true
                                 select new PaymentAmountResponseParam
                                 {
                                     Id = payement.Id,
                                     CompanyFee = payement.CompanyFee,
                                     PerFieldStaffFee = payement.PerFieldStaffFee,
                                     PerOfficeStaffFee = payement.PerOfficeStaffFee,
                                     PerIcFee = payement.PerIcFee,
                                     IsInvoice = payement.IsInvoice,
                                 }).ToList();
                    }
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// get city list as per zip
        /// </summary>
        /// <param name="Zip">zip code</param>
        /// <returns>list of city</returns>
        public IEnumerable<ZipResponseParam> GetCityListByZipOnComm(string Zip)
        {
            try
            {
                List<string> myList = Zip.Split(',').ToList();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from zip in objDecisionPointEntities.DP_ZipCode
                                 where myList.Contains(zip.Zip)
                                 select new ZipResponseParam
                                 {
                                     CityName = zip.City + ", " + zip.StateAbbre,


                                 }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get city list as per zip
        /// </summary>
        /// <param name="Zip">zip code</param>
        /// <returns>list of city</returns>
        public IEnumerable<ZipResponseParam> GetStateListByZip(string Zip)
        {
            try
            {
                List<string> myList = Zip.Split(',').ToList();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from zip in objDecisionPointEntities.DP_ZipCode
                                 join state in objDecisionPointEntities.DP_State
                                 on zip.StateAbbre equals state.StateAbbre
                                 where myList.Contains(zip.Zip)
                                 select new ZipResponseParam
                                 {
                                     CityName = state.State,
                                     StateAbbre = state.StateAbbre,


                                 }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get city list as per zip
        /// </summary>
        /// <param name="Zip">zip code</param>
        /// <returns>list of city</returns>
        public IEnumerable<ZipResponseParam> GetCountyListByZip(string Zip)
        {
            try
            {
                List<string> myList = Zip.Split(',').ToList();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from zip in objDecisionPointEntities.DP_ZipCode
                                 join county in objDecisionPointEntities.DP_County
                                 on zip.StateAbbre equals county.StateAbbre
                                 where myList.Contains(zip.Zip) && zip.CountyName.Trim() != string.Empty
                                 select new ZipResponseParam
                                 {
                                     ZipId = county.Id,
                                     CityName = zip.City,
                                     StateAbbre = zip.StateAbbre,
                                     CountyName = county.County + Shared.SingleSpace + county.StateAbbre,
                                     ZipCode = zip.Zip

                                 }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// register company 
        /// </summary>
        /// <param name="userRegister">params for saving details of company </param>
        /// <returns>int type save or fail message</returns>
        public int GetCompanyRegister(UserRegisterRequestParam userRegisterRequestParam)
        {
            DP_User user = null;
            DP_Profile profile = null;

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from cus in objDecisionPointEntities.DP_User
                               where cus.EmailId == userRegisterRequestParam.EmailId
                               select cus).FirstOrDefault();

                    if (res != null)
                    {

                    }
                    else
                    {

                        user = new DP_User()
                        {

                            // Add user profile
                            EmailId = userRegisterRequestParam.EmailId,
                            Password = userRegisterRequestParam.Password,
                            CreatedDate = DateTime.Now,
                            ModifyDate = DateTime.Now

                        };

                        objDecisionPointEntities.DP_User.Add(user);

                        //Add profile details
                        profile = new DP_Profile()
                        {
                            Firstname = userRegisterRequestParam.FirstName,
                            MiddelName = userRegisterRequestParam.MiddleName,
                            LastName = userRegisterRequestParam.LastName,
                            StateId = 1,
                            CityId = 1,
                            CreatedDate = DateTime.Now,
                            ModifyDate = DateTime.Now
                        };

                        objDecisionPointEntities.DP_Profile.Add(profile);

                        objDecisionPointEntities.SaveChanges();

                        // var i = user.Id;
                    }

                    objDecisionPointEntities.SaveChanges();

                }
                return 0;
            }

            catch
            {


                throw;
            }

        }

        #endregion

        /// <summary>
        /// method to get vendor list
        /// </summary>
        /// <param name="companyUserID"></param>
        /// <returns></returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>30 Dec 2013</createdDate>
        /// <MODIFIEDBY>Bobi</MODIFIEDBY>
        /// <modifieddate>14 july 2014</modifieddate>
        public IEnumerable<VendorClientList> GetVendorList(FilterRequestParam filterRequestParam)
        {
            IEnumerable<VendorClientList> lstInternalstaffResponseParam = null;

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (filterRequestParam.filtertype.Equals(Shared.Comm))
                    {
                        var query = (from vendor in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     join flowmapping in objDecisionPointEntities.DP_FlowMapping
                                    on new { a = vendor.CreatedBy, b = vendor.CompanyId, c = vendor.VendorId } equals
                               new { a = flowmapping.CreatedBy, b = flowmapping.CreatedCompanyId, c = flowmapping.UserId }
                                     join flowmaster in objDecisionPointEntities.DP_FlowMaster
                                     on flowmapping.FlowId equals flowmaster.Id
                                     join user in objDecisionPointEntities.DP_User
                                     on vendor.VendorId equals user.Id
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on user.Id equals profile.UserId
                                     where vendor.CompanyId == filterRequestParam.CompanyId && flowmaster.Flow == filterRequestParam.uType && profile.UserType != Shared.IC
                                         // && vendor.Invitationstatus == true 
                                     && user.IsActive == true && vendor.IsActive == true
                                     //&& vendor.Status == 1 && user.IsRegistered == true
                                     select new VendorClientList
                                     {
                                         Vendor = profile.BusinessName,
                                         Contact = profile.Firstname + profile.LastName,
                                         emailId = user.EmailId,
                                         phone = string.IsNullOrEmpty(profile.CellNumber) ? string.Empty : profile.CellNumber,
                                         Id = user.Id,
                                         companyId = user.CompanyId,
                                         invitationStatus = (bool)(user.IsRegistered == null ? false : user.IsRegistered),
                                         LastInviteMailDate = vendor.LastInvitationDate,
                                         UserType = flowmaster.Flow,
                                         IsNonMember = vendor.IsNonMember,
                                         Status = vendor.IsNonMember ? Shared.NonMember : user.IsRegistered ? Shared.Member : Shared.Pending,
                                         FirstName = profile.Firstname,
                                         LastName = profile.LastName
                                     }).Distinct().ToList().OrderBy(x => x.Contact);

                        lstInternalstaffResponseParam = query;
                        lstInternalstaffResponseParam = getVendorORDDListafterFilter(lstInternalstaffResponseParam, filterRequestParam).ToList();

                    }


                    else
                    {

                        lstInternalstaffResponseParam = (from profile in objDecisionPointEntities.DP_Profile
                                                         join user in objDecisionPointEntities.DP_User
                                                         on profile.UserId equals user.Id
                                                         join vendormapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                         on user.Id equals vendormapping.VendorId
                                                         join flowmapping in objDecisionPointEntities.DP_FlowMapping
                                                          on new { a = vendormapping.CreatedBy, b = vendormapping.CompanyId, c = vendormapping.VendorId } equals
                                                        new { a = flowmapping.CreatedBy, b = flowmapping.CreatedCompanyId, c = flowmapping.UserId }
                                                         join flowmaster in objDecisionPointEntities.DP_FlowMaster
                                                         on flowmapping.FlowId equals flowmaster.Id
                                                         join docflowmapping in objDecisionPointEntities.DP_DocFlowMapping
                                                         on new { a = (int)vendormapping.VendorId, b = vendormapping.CompanyId } equals new { a = docflowmapping.UserId, b = docflowmapping.CreatedCompanyId } into dFMap
                                                         from dFlowMap in dFMap.DefaultIfEmpty()
                                                         join docflowmaster in objDecisionPointEntities.DP_DocFlow
                                                         on dFlowMap.DocFlowId equals docflowmaster.Id into dFMaster
                                                         from dFlowMaster in dFMaster.DefaultIfEmpty()

                                                         where vendormapping.CompanyId == filterRequestParam.CompanyId && user.IsActive == true
                                                         && vendormapping.IsActive == filterRequestParam.isActive && flowmaster.Flow == filterRequestParam.uType
                                                         && profile.UserType != Shared.IC
                                                         select new VendorClientList
                                                         {
                                                             Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                             FirstName = profile.Firstname,
                                                             LastName = profile.LastName,
                                                             emailId = user.EmailId,
                                                             phone = string.IsNullOrEmpty(profile.CellNumber) ? string.Empty : profile.CellNumber,
                                                             Vendor = profile.BusinessName,
                                                             Id = user.Id,
                                                             companyId = user.CompanyId,
                                                             DocFlow = dFlowMaster.DocFlow,
                                                             DocFTblId = (int)(dFlowMap.Id == null ? 0 : dFlowMap.Id),
                                                             invitationStatus = (bool)(user.IsRegistered == null ? false : user.IsRegistered),
                                                             LastInviteMailDate = vendormapping.LastInvitationDate,
                                                             UserType = flowmaster.Flow,
                                                             IsNonMember = vendormapping.IsNonMember,
                                                             Status = vendormapping.IsNonMember ? Shared.NonMember : user.IsRegistered ? Shared.Member : Shared.Pending
                                                         }).Distinct().OrderBy(x => x.Contact).OrderByDescending(x => x.Status).ToList();
                    }
                }
                return lstInternalstaffResponseParam;
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {

            }
        }

        /// <summary>
        /// method to get Decendant's  list of vendor and client
        /// </summary>
        /// <param name="companyUserID"></param>
        /// <returns></returns>
        /// <createdBy>Mamta Gupta</createdBy>
        /// <createdDate>30 Dec 2013</createdDate>
        public IEnumerable<VendorClientList> GetDecentantVendorList(FilterRequestParam filterRequestParam)
        {
            IEnumerable<VendorClientList> DecendantList = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (filterRequestParam.filtertype.Equals(Shared.Comm))
                    {
                        DecendantList = (from user in objDecisionPointEntities.DP_User
                                         join profile in objDecisionPointEntities.DP_Profile
                                         on user.Id equals profile.UserId
                                         join vendormaping in objDecisionPointEntities.DP_ComapnyVendorMapping on
                                         profile.UserId equals vendormaping.VendorId
                                         join flowMaping in objDecisionPointEntities.DP_FlowMapping
                                          on new { a = vendormaping.CreatedBy, b = vendormaping.CompanyId, c = vendormaping.VendorId } equals
                               new { a = flowMaping.CreatedBy, b = flowMaping.CreatedCompanyId, c = flowMaping.UserId }
                                         //vendormaping.VendorId equals flowMaping.UserId
                                         join flowmaster in objDecisionPointEntities.DP_FlowMaster on flowMaping.FlowId equals flowmaster.Id
                                         join decendants in objDecisionPointEntities.DP_DescendentMapping on
                                         vendormaping.VendorId equals decendants.ChildCompanyId
                                         where
                                             //user.IsRegistered == true && vendormaping.Invitationstatus == true
                                             //&& vendormaping.Status == 1 &&
                                          flowmaster.Flow == filterRequestParam.uType
                                         && decendants.ParentCompanyID == filterRequestParam.UserId && user.IsActive == true && vendormaping.IsActive == true
                                         select new VendorClientList
                                         {
                                             Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                             emailId = user.EmailId,
                                             phone = profile.Phone,
                                             Vendor = profile.BusinessName,
                                             Id = user.Id,
                                             companyId = user.CompanyId
                                         }).Distinct().ToList();

                        DecendantList = getVendorORDDListafterFilter(DecendantList, filterRequestParam).ToList();

                    }


                    else
                    {
                        DecendantList = (from user in objDecisionPointEntities.DP_User
                                         join profile in objDecisionPointEntities.DP_Profile
                                         on user.Id equals profile.UserId
                                         join vendormaping in objDecisionPointEntities.DP_ComapnyVendorMapping on
                                         profile.UserId equals vendormaping.VendorId
                                         join flowMaping in objDecisionPointEntities.DP_FlowMapping
                                          on new { a = vendormaping.CreatedBy, b = vendormaping.CompanyId, c = vendormaping.VendorId } equals
                               new { a = flowMaping.CreatedBy, b = flowMaping.CreatedCompanyId, c = flowMaping.UserId }
                                         // vendormaping.VendorId equals flowMaping.UserId
                                         join flowmaster in objDecisionPointEntities.DP_FlowMaster on flowMaping.FlowId equals flowmaster.Id
                                         join decendants in objDecisionPointEntities.DP_DescendentMapping on
                                         vendormaping.VendorId equals decendants.ChildCompanyId
                                         where user.IsRegistered == true && vendormaping.Invitationstatus == true && vendormaping.Status == 1
                                         && decendants.ParentCompanyID == filterRequestParam.UserId && user.IsActive == true && vendormaping.IsActive == filterRequestParam.isActive
                                         select new VendorClientList
                                         {
                                             Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                             emailId = user.EmailId,
                                             phone = profile.Phone,
                                             Vendor = profile.BusinessName,
                                             Id = user.Id,
                                             companyId = user.CompanyId
                                         }).ToList();

                    }

                }

                return DecendantList;
            }
            catch
            {
                throw;

            }

        }
        /// <summary>
        /// Used for filter the vendor / client /ddvendor and dd clients on commnication recipient page
        /// </summary>
        /// <param name="lstInternalstaffResponseParam">lstInternalstaffResponseParam</param>
        /// <param name="filterRequestParam">filterRequestParam</param>
        /// <returns>IEnumerable<VendorClientList></returns>
        /// <createdby>Bobi</createdby>
        /// <creatyeddate>14 july 2014</creatyeddate>
        private IEnumerable<VendorClientList> getVendorORDDListafterFilter(IEnumerable<VendorClientList> lstInternalstaffResponseParam, FilterRequestParam filterRequestParam)
        {
            try
            {
                //set the global variables
                SetGlobalVariableForCommFilter(filterRequestParam, Shared.Company);
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (lstInternalstaffResponseParam != null && lstInternalstaffResponseParam.Count() > 0)
                    {

                        if (servicefilters.Count > 0)
                        {
                            int arraycount = 0;
                            int[] finalservicelist = new int[1];
                            var intservicefilters = servicefilters.Select(x => int.Parse(x)).ToList();
                            if (filterRequestParam.uType == Shared.Client)
                            {
                                foreach (int ids in intservicefilters)
                                {

                                    var STM = (from ST in objDecisionPointEntities.DP_ServiceTranslationTable
                                               where ST.ChildServiceId == ids && ST.ChildCompanyId == filterRequestParam.CompanyId
                                               select (int)ST.ParentServiceId).ToList();
                                    arraycount = finalservicelist.Count() - 1;
                                    Array.Resize(ref finalservicelist, ((arraycount + 1) + (STM.Count)));
                                    STM.CopyTo(finalservicelist, arraycount);



                                }
                            }
                            else
                            {
                                foreach (int ids in intservicefilters)
                                {
                                    var STM = (from ST in objDecisionPointEntities.DP_ServiceTranslationTable
                                               where ST.ParentServiceId == ids && ST.ParentCompanyId == filterRequestParam.CompanyId
                                               select (int)ST.ChildServiceId).ToList();
                                    arraycount = finalservicelist.Count() - 1;
                                    Array.Resize(ref finalservicelist, ((arraycount + 1) + (STM.Count)));
                                    STM.CopyTo(finalservicelist, arraycount);

                                }
                            }
                            var servicefilterquery = (from list in lstInternalstaffResponseParam
                                                      join servicemaster in objDecisionPointEntities.DP_ServicesMaster
                                                       on list.companyId equals servicemaster.CompanyId
                                                      where (finalservicelist.Contains(servicemaster.Id) || intservicefilters.Contains(servicemaster.Id)) && servicemaster.IsDeleted == false && servicemaster.IsActive == true
                                                      //where servicefilters.Contains(servicemaster.Service) && servicemaster.IsDeleted == false && servicemaster.IsActive == true
                                                      select list).Distinct().ToList();
                            lstInternalstaffResponseParam = servicefilterquery;

                        }

                        if (!string.IsNullOrEmpty(locationType))
                        {
                            if (locationType.Equals(Shared.Zip))
                            {
                                if (zipList.Count > 0)
                                {
                                    lstInternalstaffResponseParam = (from list in lstInternalstaffResponseParam
                                                                     join zipcode in objDecisionPointEntities.DP_ZipMapping
                                                                     on list.Id equals zipcode.UserId
                                                                     where zipList.Contains(zipcode.ZipCode)
                                                                     select list).Distinct().ToList();
                                }
                            }
                            else if (locationType.Equals(Shared.State))
                            {
                                if (stateList.Count > 0)
                                {
                                    //filter as per states
                                    lstInternalstaffResponseParam = (from list in lstInternalstaffResponseParam
                                                                     join state in objDecisionPointEntities.DP_StateMapping
                                                                     on list.Id equals state.UserId
                                                                     where stateList.Contains(state.StateName)
                                                                     select list).Distinct().ToList();
                                    //filter as per county
                                    lstInternalstaffResponseParam = (from list in lstInternalstaffResponseParam
                                                                     join county in objDecisionPointEntities.DP_CountyMapping
                                                                     on list.Id equals county.UserId
                                                                     where countyList.Contains(county.CountyName)
                                                                     select list).Distinct().ToList();
                                    //filter as per city
                                    lstInternalstaffResponseParam = (from list in lstInternalstaffResponseParam
                                                                     join city in objDecisionPointEntities.DP_CityMapping
                                                                     on list.Id equals city.UserId
                                                                     where cityList.Contains(city.CityName)
                                                                     select list).Distinct().ToList();
                                }
                            }
                        }
                    }
                }
                return lstInternalstaffResponseParam;
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// vendor performace screen
        /// </summary>
        /// <param name="companyUserID">int</param>
        /// <param name="isActive">bool</param>
        /// <param name="type">vendor/client</param>
        /// <returns>vendorResponseParam</returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>January 7 2014</createdDate>
        public IEnumerable<VendorResponseParam> VendorPerformance(string companyID, bool isActive, string type, int UserId)
        {
            List<VendorResponseParam> lstVendorResponseParam = new List<VendorResponseParam>();
            List<int?> lstwithdrawnNotComplted = new List<int?>();
            IEnumerable<VendorClientList> lstInternalstaffResponseParam = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    lstInternalstaffResponseParam = (from profile in objDecisionPointEntities.DP_Profile
                                                     join user in objDecisionPointEntities.DP_User on profile.UserId equals user.Id
                                                     join vendormap in objDecisionPointEntities.DP_ComapnyVendorMapping on user.Id equals vendormap.VendorId
                                                     join flowmap in objDecisionPointEntities.DP_FlowMapping on new { a = vendormap.VendorId, b = vendormap.CreatedBy, c = vendormap.CompanyId } equals new { a = flowmap.UserId, b = flowmap.CreatedBy, c = flowmap.CreatedCompanyId }
                                                     into fm
                                                     from fflowmap in fm.DefaultIfEmpty()
                                                     join flowmaster in objDecisionPointEntities.DP_FlowMaster
                                                     on fflowmap.FlowId equals flowmaster.Id
                                                     into fmaster
                                                     from fflowmaster in fmaster.DefaultIfEmpty()
                                                     where vendormap.CompanyId == companyID && vendormap.IsActive == true && user.IsActive == true && fflowmaster.Flow == type && vendormap.Invitationstatus == true
                                                     && vendormap.Status == 1 && profile.UserType != Shared.IC
                                                     select new VendorClientList
                                                     {
                                                         Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                         emailId = user.EmailId,
                                                         phone = profile.Phone,
                                                         Vendor = profile.BusinessName,
                                                         Id = profile.UserId,
                                                         companyId = user.CompanyId
                                                     }).Distinct().ToList();



                    //lstInternalstaffResponseParam = objDecisionPointEntities.DP_Profile.Join(objDecisionPointEntities.DP_User, x => x.UserId, y => y.Id, (x, y) => new { x, y })
                    //                                .Join(objDecisionPointEntities.DP_ComapnyVendorMapping, a => a.x.UserId, b => b.VendorId, (a, b) => new { a, b })
                    //                                .Join(objDecisionPointEntities.DP_FlowMapping, c => c.b.VendorId, d => d.UserId, (c, d) => new { c, d })
                    //                                .Join(objDecisionPointEntities.DP_FlowMaster, e => e.d.FlowId, f => f.Id, (e, f) => new { e, f })
                    //                                .Where(z => z.e.c.b.CompanyId == companyID && (z.e.c.a.y.IsActive == null ? false : z.e.c.a.y.IsActive) == true
                    //                                    && (z.e.c.b.IsActive == null ? false : z.e.c.b.IsActive) == isActive
                    //                                    && z.f.Flow == type && z.e.c.b.Invitationstatus == true
                    //                                    && z.e.c.b.Status == 1 && z.e.c.a.x.UserType != Shared.IC)
                    //                                .Select(m => new VendorClientList { Contact = m.e.c.a.x.Firstname + Shared.SingleSpace + m.e.c.a.x.LastName, emailId = m.e.c.a.y.EmailId, phone = m.e.c.a.x.Phone, Vendor = m.e.c.a.x.BusinessName, Id = m.e.c.a.x.UserId, companyId = m.e.c.a.y.CompanyId }).Distinct().ToList();

                    lstVendorResponseParam = lstInternalstaffResponseParam.Select(x => new VendorResponseParam { VendorID = x.Id, DocumentCompleteByVendors = 0, name = x.Vendor, CompanyCompletion = 0, Received = 0, Forwarded = 0, CompanyId = x.companyId }).ToList();

                    int totNoofDocumentReceived = 0;
                    int totNoofDocumentComplete = 0;

                    //// count no of staf for selected vendor

                    for (int index = 0; index < lstVendorResponseParam.Count(); index++)
                    {
                        totNoofDocumentComplete = 0;
                        totNoofDocumentReceived = 0;
                        int? vendorID = lstVendorResponseParam[index].VendorID;
                        string RecipintcompanyId = lstVendorResponseParam[index].CompanyId;
                        //get list of staff
                        var listOfStaff = objDecisionPointEntities.DP_CompanyStaffMapping.Join(objDecisionPointEntities.DP_User.Where(x => x.IsActive == true && x.IsRegistered == true), a => a.StaffId, b => b.Id, (a, b) => new { a, b }).Where(y => y.a.CompanyId == RecipintcompanyId && y.a.Invitationstatus == true &&
                                           y.a.IsActive == true).Select(s => new { s }).ToList();

                        //get received communication 
                        var rec = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails, a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => w.a.RecipientUserId == vendorID && w.a.DeliveredCompanyId == companyID && w.a.Status != Shared.Forward).Select(x => new { x }).Distinct().ToList();

                        //count forwarded communication 
                        int forwardCommunicationCount = 0;
                        foreach (var item in rec)
                        {
                            var forwarded = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails, a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => w.a.DeliveredCompanyId == RecipintcompanyId && w.a.DocId == item.x.b.Id).Select(x => new { x.b.Id }).Distinct().ToList();
                            if (forwarded.Count > 0)
                            {
                                forwardCommunicationCount++;
                            }
                        }
                        //get withdrwan communication
                        //var withdrawnlist = objDecisionPointEntities.DP_Recipient.Where(x => x.IsActive == false && x.Status!=Shared.Forward).Select(y => y.DocId).Distinct().ToList();
                        //.Join(objDecisionPointEntities.DP_DocumentDetails.Where(x => x.UserId == UserId && x.CompanyId == companyID), a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => w.a.RecipientUserId == vendorID && w.a.Status != Shared.Forward && w.a.IsActive == false).Select(x => new { x }).Distinct().ToList();

                        //get communication which is withdrawn and not completed by user.
                        int count = 0;
                        int withdrawnCompletedCount = 0;
                        foreach (var item in rec)
                        {
                            var aa = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails, a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => w.a.Status == Shared.Completed && w.a.IsActive == false && w.a.DocId == item.x.a.DocId && w.a.DeliveredCompanyId == RecipintcompanyId).Select(x => new { x.b.Id }).Distinct().ToList();
                            if (aa.Count <= 0 && item.x.a.IsActive == false)
                            {
                                count++;
                                lstwithdrawnNotComplted.Add(item.x.a.DocId);
                            }
                            if (aa.Count > 0 && item.x.a.IsActive == false)
                            {
                                withdrawnCompletedCount++;
                            }
                        }

                        //var withdrawnNotComplted = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails.Where(x => x.CompanyId == companyID), a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => w.a.DeliveredUserId == vendorID && w.a.Status==Shared.New && w.a.Status!=Shared.Forward && w.a.IsActive==false).Select(x => new { x.b.Id }).Distinct().ToList();

                        //List<int> lstwithdrawnNotComplted = withdrawnNotComplted.Select(x => x.Id).ToList();
                        // List<int> lstwithdrawnNotComplted = withdrawnNotComplted.Select(x => x.Id).ToList();

                        lstVendorResponseParam[index].Received = rec.Count() - count;
                        lstVendorResponseParam[index].Forwarded = forwardCommunicationCount > count ? (forwardCommunicationCount - count) : forwardCommunicationCount;

                        #region Document received by staff and complete
                        foreach (var item in rec)
                        {
                            for (int iCount = 0; iCount < listOfStaff.Count; iCount++)
                            {
                                int? staffId = listOfStaff[iCount].s.a.StaffId;

                                var NoofDocumentReceived = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails, a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => w.a.RecipientUserId == staffId && w.a.DeliveredCompanyId == RecipintcompanyId && w.a.DocId == item.x.a.DocId && w.a.Status != Shared.Forward).Select(x => new { x }).Distinct().ToList();

                                var noofDocumentComplete = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails, a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => (w.a.RecipientUserId == staffId && w.a.DeliveredCompanyId == RecipintcompanyId && w.a.DocId == item.x.a.DocId && w.a.Status == status)).Select(x => new { x }).Distinct().ToList();

                                var noofwithdrwancompComplete = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails, a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => (w.a.RecipientUserId == staffId && w.a.DeliveredCompanyId == RecipintcompanyId && w.a.DocId == item.x.a.DocId && w.a.Status != status && w.a.Status != Shared.Forward && w.a.IsActive == false)).Select(x => new { x }).Distinct().ToList();
                                if (noofwithdrwancompComplete.Count > 0)
                                {
                                    totNoofDocumentComplete += noofDocumentComplete.Count() + noofwithdrwancompComplete.Count();
                                }
                                else
                                {
                                    totNoofDocumentComplete += noofDocumentComplete.Count();
                                }

                                totNoofDocumentReceived += NoofDocumentReceived.Count();




                            }
                        }

                        if (totNoofDocumentReceived > 0 && totNoofDocumentComplete > 0)
                        {
                            lstVendorResponseParam[index].CompanyCompletion = (totNoofDocumentComplete) * 100 / totNoofDocumentReceived;

                        }
                        #endregion

                        #region Document received by vendor and complete

                        var listofVendors = objDecisionPointEntities.DP_ComapnyVendorMapping.Where(x => x.CompanyId == RecipintcompanyId).Select(s => new { s }).ToList();
                        for (int iCount = 0; iCount < listofVendors.Count; iCount++)
                        {
                            string distantDescendant = listofVendors[iCount].s.VendorId.ToString();
                            listOfStaff = objDecisionPointEntities.DP_CompanyStaffMapping.Join(objDecisionPointEntities.DP_User.Where(x => x.IsActive == true && x.IsRegistered == true), a => a.StaffId, b => b.Id, (a, b) => new { a, b }).Where(y => y.a.CompanyId == distantDescendant && y.a.Invitationstatus == true &&
                                           y.a.IsActive == true).Select(s => new { s }).ToList();
                            //objDecisionPointEntities.DP_CompanyStaffMapping.Where(x => x.CompanyId == distantDescendant).Select(s => new { s }).ToList();

                            for (int jCount = 0; jCount < listOfStaff.Count; jCount++)
                            {
                                int? staffId = listOfStaff[iCount].s.a.StaffId;
                                var NoofDocumentReceived = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails.Where(x => x.CompanyId == companyID), a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => w.a.DeliveredUserId == Convert.ToInt32(distantDescendant) && w.a.RecipientUserId == staffId && !lstwithdrawnNotComplted.Contains(w.b.Id)).Select(x => new { x }).Distinct().ToList();

                                var noofDocumentComplete = objDecisionPointEntities.DP_Recipient.Join(objDecisionPointEntities.DP_DocumentDetails.Where(x => x.CompanyId == companyID), a => a.DocId, b => b.Id, (a, b) => new { a, b }).Where(w => (w.a.DeliveredUserId == Convert.ToInt32(distantDescendant) && w.a.RecipientUserId == staffId && w.a.Status == status)).Select(x => new { x }).Distinct().ToList();
                                totNoofDocumentReceived += NoofDocumentReceived.Count();
                                totNoofDocumentComplete += noofDocumentComplete.Count();
                            }

                            if (totNoofDocumentReceived > 0 && totNoofDocumentComplete > 0)
                            {
                                lstVendorResponseParam[index].DocumentCompleteByVendors = totNoofDocumentComplete * 100 / totNoofDocumentReceived;
                            }
                        }
                        #endregion

                    }
                }
                lstVendorResponseParam = lstVendorResponseParam.Where(x => x.Received != 0).ToList();
                return lstVendorResponseParam;
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {

            }
        }




        /// <summary>
        /// reactive vendor by their id
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 2 2014</createdDate>
        public int ReactiveVendor(int id, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (companyId.Equals(Shared.None))
                    {
                        var result = (from map in objDecisionPointEntities.DP_ComapnyVendorMapping
                                      where map.Id == id
                                      select map).FirstOrDefault();
                        if (result != null)
                        {
                            result.IsActive = true;
                            result.StatusChangedate = DateTime.Now.Date;
                        }
                    }
                    else
                    {
                        var result = (from map in objDecisionPointEntities.DP_ComapnyVendorMapping
                                      join user in objDecisionPointEntities.DP_User
                                      on map.VendorId equals user.Id
                                      where user.Id == id && map.CompanyId == companyId
                                      select map).FirstOrDefault();
                        if (result != null)
                        {
                            result.IsActive = true;
                            result.StatusChangedate = DateTime.Now.Date;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// reactive vendor by their id
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 2 2014</createdDate>
        public int ReactiveBusinessPartners(int id)
        {
            int response;
            using (objDecisionPointEntities = new DecisionPointEntities())
            {

                var result = (from map in objDecisionPointEntities.DP_ComapnyVendorMapping
                              where map.VendorId == id
                              select map).ToList();
                if (!object.Equals(result, null) && result.Count > 0)
                {
                    foreach (var item in result)
                    {
                        item.IsActive = true;
                        item.StatusChangedate = DateTime.Now.Date;
                    }
                    var resultuser = (from user in objDecisionPointEntities.DP_User
                                      where user.Id == id
                                      select user).FirstOrDefault();
                    if (!object.Equals(resultuser, null))
                    {
                        resultuser.IsActive = true;
                    }
                    objDecisionPointEntities.SaveChanges();
                    response = 1;
                }
                else
                {
                    response = 0;
                }
            }


            return response; ;
        }

        /// <summary>
        /// remove vendor by their id
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>Jan 2 2014</createdDate>
        public int RemoveVendor(int id, string companyId)
        {
            int response;
            using (objDecisionPointEntities = new DecisionPointEntities())
            {

                if (companyId.Equals(Shared.None))
                {
                    var result = (from map in objDecisionPointEntities.DP_ComapnyVendorMapping
                                  where map.Id == id
                                  select map).FirstOrDefault();
                    if (result != null)
                    {
                        result.IsActive = false;
                        result.StatusChangedate = DateTime.Now.Date;
                        objDecisionPointEntities.SaveChanges();
                        response = 1;
                    }
                    else
                    {
                        response = 0;
                    }
                }
                else
                {
                    var result = (from map in objDecisionPointEntities.DP_ComapnyVendorMapping
                                  where map.VendorId == id
                                  && map.CompanyId == companyId
                                  select map).FirstOrDefault();
                    if (result != null)
                    {
                        result.IsActive = false;
                        result.StatusChangedate = DateTime.Now.Date;
                        objDecisionPointEntities.SaveChanges();
                        response = 1;
                    }
                    else
                    {
                        response = 0;
                    }
                }

            }

            return response; ;
        }
        /// <summary>
        /// remove vendor by their id
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 2 2014</createdDate>
        public int RemoveBusinessPartners(int id)
        {
            int response;
            using (objDecisionPointEntities = new DecisionPointEntities())
            {

                var result = (from map in objDecisionPointEntities.DP_ComapnyVendorMapping
                              where map.VendorId == id
                              select map).ToList();
                if (!object.Equals(result, null) && result.Count > 0)
                {
                    foreach (var item in result)
                    {
                        item.IsActive = false;
                        item.StatusChangedate = DateTime.Now.Date;
                    }
                    var resultuser = (from user in objDecisionPointEntities.DP_User
                                      where user.Id == id
                                      select user).FirstOrDefault();
                    if (!object.Equals(resultuser, null))
                    {
                        resultuser.IsActive = false;
                    }
                    objDecisionPointEntities.SaveChanges();
                    response = 1;
                }
                else
                {
                    response = 0;
                }


            }

            return response; ;
        }

        #region Performance
        /// <summary>
        /// This method is used to calculate the Performance of Staff
        /// </summary>
        /// <param name="companyID"></param>
        /// <returns></returns>
        public IList<StaffPerformaceRequestParam> GetStaffPerformanceList(int userId, string companyId)
        {
            try
            {
                IList<StaffPerformaceRequestParam> lstStaffPerformance = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    lstStaffPerformance = (from staff in objDecisionPointEntities.DP_CompanyStaffMapping
                                           join receipent in objDecisionPointEntities.DP_Recipient
                                           on staff.StaffId equals receipent.RecipientUserId
                                           join user in objDecisionPointEntities.DP_User
                                           on staff.StaffId equals user.Id
                                           join profile in objDecisionPointEntities.DP_Profile
                                           on user.Id equals profile.UserId
                                           join titleMapping in objDecisionPointEntities.DP_TitleMapping
                                           on new { a = staff.StaffId, b = staff.CompanyId }
                                           equals new { a = titleMapping.UserId, b = titleMapping.CreatedCompanyId }
                                           into TM
                                           from FTM in TM.DefaultIfEmpty()
                                           join title in objDecisionPointEntities.DP_TitleMaster
                                           on FTM.TitleId equals title.Id
                                            into TMaster
                                           from FTMaster in TMaster.DefaultIfEmpty()
                                           where staff.CompanyId == companyId && staff.Status == 1 && receipent.DeliveredCompanyId == companyId
                                           && staff.Invitationstatus == true
                                           && user.IsActive == true && staff.IsActive == true && user.IsRegistered == true && receipent.Status != Shared.Forward
                                           && (receipent.IsActive == true || receipent.Status == status)
                                           select new StaffPerformaceRequestParam
                                           {
                                               StaffId = (int)staff.StaffId,
                                               StaffName = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                               Title = string.IsNullOrEmpty(FTMaster.Title) ? Shared.UnderScore : FTMaster.Title,
                                               TotalDocument = objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.StaffId && x.DeliveredCompanyId == companyId && x.Status != Shared.Forward && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count() - objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.StaffId && x.Status != Shared.Forward && x.DeliveredCompanyId == companyId && (x.Status != status && x.IsActive == false) && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count(),
                                               CompletedDocument = objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.StaffId && x.Status != Shared.Forward && x.DeliveredCompanyId == companyId && x.Status == status && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count(),
                                               WithdrawnCompletedDocument = objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.StaffId && x.Status != Shared.Forward && x.DeliveredCompanyId == companyId && x.Status == status && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count(),
                                               WithdrawnInCompletedDocument = objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.StaffId && x.Status != Shared.Forward && x.DeliveredCompanyId == companyId && (x.Status != status && x.IsActive == false) && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count(),
                                               Performance = (objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.StaffId && x.Status != Shared.Forward && x.DeliveredCompanyId == companyId && x.Status == status && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count()) == 0 ? 0 : (objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.StaffId && x.Status != Shared.Forward && x.DeliveredCompanyId == companyId && x.Status == status && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count()) * 100 / (objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.StaffId && x.Status != Shared.Forward && x.DeliveredCompanyId == companyId && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count() - objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.StaffId && x.Status != Shared.Forward && x.DeliveredCompanyId == companyId && (x.Status != status && x.IsActive == false) && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count())

                                           }
                                    ).Distinct().ToList();
                    return lstStaffPerformance;
                }
            }
            catch
            {

                throw;
            }

        }


        /// <summary>
        /// This method is used to calculate the Performance of IC
        /// </summary>
        /// <param name="companyID"></param>
        /// <returns></returns>
        public IList<StaffPerformaceRequestParam> GetICPerformanceList(int userId, string companyId)
        {
            try
            {
                IList<StaffPerformaceRequestParam> lstICPerformance = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    lstICPerformance = (from staff in objDecisionPointEntities.DP_ComapnyVendorMapping
                                        join receipent in objDecisionPointEntities.DP_Recipient
                                        on staff.VendorId equals receipent.RecipientUserId
                                        join user in objDecisionPointEntities.DP_User
                                        on staff.VendorId equals user.Id
                                        join profile in objDecisionPointEntities.DP_Profile
                                        on user.Id equals profile.UserId
                                        where staff.CompanyId == companyId && staff.Status == 1
                                        && profile.UserType == Shared.IC && user.IsActive == true && (receipent.IsActive == true || receipent.Status == status) && staff.IsActive == true && user.IsRegistered == true && staff.Invitationstatus == true && receipent.DeliveredCompanyId == companyId
                                        select new StaffPerformaceRequestParam
                                        {
                                            StaffId = (int)staff.VendorId,
                                            StaffName = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                            TotalDocument = (objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.VendorId && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count() - objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.VendorId && (x.Status != status && x.IsActive == false) && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count()),
                                            CompletedDocument = objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.VendorId && x.Status == status && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count(),

                                            WithdrawnCompletedDocument = objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.VendorId && x.Status == status && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count(),

                                            WithdrawnInCompletedDocument = objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.VendorId && (x.Status != status && x.IsActive == false) && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count(),

                                            Performance = (objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.VendorId && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count() - objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.VendorId && (x.Status != status && x.IsActive == false) && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count()) == 0 ? 0 : (objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.VendorId && x.Status == status && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count()) * 100 / (objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.VendorId && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count() - objDecisionPointEntities.DP_Recipient.Where(x => x.RecipientUserId == staff.VendorId && (x.Status != status && x.IsActive == false) && objDecisionPointEntities.DP_User.Where(y => y.CompanyId == companyId).Select(d => d.Id).Contains((int)x.DeliveredUserId)).Count())
                                        }
                                   ).Distinct().ToList();


                    return lstICPerformance;
                }
            }
            catch
            {

                throw;
            }

        }


        public IList<ICPaymentModeResponseParam> GetICPaymentMode()
        {
            try
            {
                IList<ICPaymentModeResponseParam> objIcPaymnetMode = null;

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    objIcPaymnetMode = (from q in objDecisionPointEntities.DP_PaymentFlowMaster
                                        where q.Isdeleted == false
                                        select new ICPaymentModeResponseParam
                                        {
                                            PaymentId = q.Id,
                                            PaymentMode = q.PaymentType
                                        }).ToList();

                }
                return objIcPaymnetMode;
            }
            catch
            {
                throw;
            }

        }

        #endregion

        #region Trainng view
        public IList<UserViewRequestParamcs> getUserViewList(int userID, int docID)
        {
            try
            {
                // int receipntID = docID;
                IList<UserViewRequestParamcs> getUserViewList = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    getUserViewList = (from q in objDecisionPointEntities.USP_UserView(userID, docID)
                                       select new UserViewRequestParamcs
                                       {
                                           Name = q.Name,
                                           BusinessName = q.BusinessName,
                                           UserTitle = q.UserTitle,
                                           DocType = q.DocType,
                                           DueDate = q.DueDate.Value,
                                           FileLoc = q.FileLoc,
                                           FileTitle = q.FileTitle,
                                           Filetype = q.Filetype,
                                           Status = q.Status,
                                           CourseName = q.Title,
                                           reference = q.Reference,
                                           Instruction = q.introduction,
                                           DocID = (int)docID,
                                           DocTitle = q.DocTitles,
                                           VideoTitle = q.VideoTitle,
                                           ScormTitle = q.ScormTitles
                                       }).ToList();
                    return getUserViewList;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// Used to get the Training Materials Details of a User for Student View
        /// </summary>
        /// <param name="docID">ID of current document</param>
        /// <returns>List of UserAssesmentParamcs Class</returns>
        public IList<UserAssesmentParamcs> getAssesmentViewList(int docID, bool RandomQuestion)
        {
            try
            {
                IList<UserAssesmentParamcs> getUserAssessmentlist = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (RandomQuestion == true)
                    {
                        getUserAssessmentlist = (from Assessment in objDecisionPointEntities.DP_CommAssesment
                                                 where Assessment.DocMsgId == docID
                                                 select new UserAssesmentParamcs
                                                 {
                                                     Id = Assessment.Id,
                                                     Question = Assessment.Question
                                                 }).OrderBy(o => Guid.NewGuid()).ToList();
                    }
                    else
                    {
                        getUserAssessmentlist = (from Assessment in objDecisionPointEntities.DP_CommAssesment
                                                 where Assessment.DocMsgId == docID
                                                 select new UserAssesmentParamcs
                                                 {
                                                     Id = Assessment.Id,
                                                     Question = Assessment.Question
                                                 }).ToList();

                    }
                    return getUserAssessmentlist;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// get answer list for given doc id
        /// </summary>
        /// <param name="docID">int</param>
        /// <returns>UserAssesmentAnswerParamcs</returns>
        /// <createdby>mamta g</createdby>
        /// <createdDate>Feb 2 2014</createdDate>
        public IList<UserAssesmentAnswerParamcs> getAssesmentAnsViewList(int docID, bool RandomAns)
        {
            try
            {
                IList<UserAssesmentAnswerParamcs> getUserAssessmentAns = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (RandomAns == true)
                    {
                        getUserAssessmentAns = (from question in objDecisionPointEntities.DP_CommAssesment
                                                join ans in objDecisionPointEntities.DP_CommAnswers
                                                on question.Id equals ans.QuestionId
                                                where question.DocMsgId == docID
                                                select new UserAssesmentAnswerParamcs
                                                {
                                                    Id = ans.Id,
                                                    Answer = ans.Answer,
                                                    QuestionId = (int)ans.QuestionId,
                                                    IsCorrect = (bool)ans.IsCorrect
                                                }).OrderBy(o => Guid.NewGuid()).ToList();
                    }
                    else
                    {
                        getUserAssessmentAns = (from question in objDecisionPointEntities.DP_CommAssesment
                                                join ans in objDecisionPointEntities.DP_CommAnswers
                                                on question.Id equals ans.QuestionId
                                                where question.DocMsgId == docID
                                                select new UserAssesmentAnswerParamcs
                                                {
                                                    Id = ans.Id,
                                                    Answer = ans.Answer,
                                                    QuestionId = (int)ans.QuestionId,
                                                    IsCorrect = (bool)ans.IsCorrect
                                                }).ToList();
                    }
                    return getUserAssessmentAns;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// get answer list for given doc id
        /// </summary>
        /// <param name="docID">int</param>
        /// <returns>UserInstructionsParamcs</returns>
        /// <createdby>mamta g</createdby>
        /// <createdDate>Feb 2 2014</createdDate>
        public IList<UserInstructionsParamcs> getInstructions(int docID)
        {
            try
            {
                IList<UserInstructionsParamcs> getUserInstruction = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    getUserInstruction = (from instruction in objDecisionPointEntities.DP_CommTestRules
                                          where instruction.DocId == docID
                                          select new UserInstructionsParamcs
                                          {
                                              DocId = (int)instruction.DocId,
                                              Id = instruction.Id,
                                              Attempts = instruction.Attempts,
                                              Instruction = instruction.Instruction,
                                              PassingScore = instruction.PassingScore,
                                              RandAns = (bool)instruction.RandQues,
                                              RandQues = (bool)instruction.RandQues,
                                              ReqReTest = (bool)instruction.ReqReTest,
                                              ShowWrongeAns = (bool)instruction.ShowWrongeAns
                                          }).ToList();

                    return getUserInstruction;
                }
            }
            catch
            {

                throw;
            }
        }

        public IList<UserCorrectAsstAnswerParam> GetCorrectAnswer(int DocId, int UserId)
        {
            try
            {
                IList<UserCorrectAsstAnswerParam> CorrectAnswer = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    CorrectAnswer = (from Qus in objDecisionPointEntities.DP_CommAssesment
                                     from Ans in objDecisionPointEntities.DP_CommAnswers
                                     from correctAns in objDecisionPointEntities.DP_CommAsstAnswer
                                     where Qus.Id == Ans.QuestionId && Ans.QuestionId == correctAns.QuestionId
                                     && Qus.DocMsgId == correctAns.DocId && Qus.DocMsgId == DocId && correctAns.DocId == DocId
                                     && correctAns.UserId == UserId
                                     select new UserCorrectAsstAnswerParam
                                     {
                                         QuestionId = Qus.Id,
                                         OptionAnserId = Ans.Id,
                                         Answer = Ans.Answer,
                                         Iscorrect = (bool)Ans.IsCorrect,
                                         GivenAnsId = (int)correctAns.AnswerId
                                     }).ToList();
                }
                return CorrectAnswer;
            }
            catch
            {
                throw;

            }

        }
        /// <summary>
        /// Used to save communication filter details
        /// </summary>
        /// <param name="objFilterRequestParam"></param>
        /// <param name="DocId"></param>
        /// <returns>int</returns>
        public int SaveCommFilterValue(FilterRequestParam objFilterRequestParam, int DocId)
        {
            try
            {
                IList<string> filterValue = new List<string>();
                IList<string> filterValueForCoverageArea = new List<string>();
                IList<string> coverageAreaCol = new List<string>();
                byte coverageType = 0;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //get existing details and update them
                    if (objFilterRequestParam.filtertype.Equals(Shared.Type))
                    {
                        var chkres = (from commfiltervalue in objDecisionPointEntities.DP_CommRecipientFilter
                                      where commfiltervalue.DocId == DocId && commfiltervalue.DeliveredCompanyId == objFilterRequestParam.CompanyId
                                      select new { commfiltervalue }).ToList();
                        if (chkres != null && chkres.Count > 0)
                        {
                            foreach (var item in chkres)
                            {
                                objDecisionPointEntities.DP_CommRecipientFilter.Remove(item.commfiltervalue);
                            }
                        }
                    }
                    else
                    {
                        var chkres = (from commfiltervalue in objDecisionPointEntities.DP_CommRecipientFilter
                                      where commfiltervalue.DocId == DocId && commfiltervalue.FilterType.StartsWith(objFilterRequestParam.filtertype) && commfiltervalue.DeliveredCompanyId == objFilterRequestParam.CompanyId
                                      select new { commfiltervalue }).ToList();
                        if (chkres != null && chkres.Count > 0)
                        {
                            foreach (var item in chkres)
                            {
                                objDecisionPointEntities.DP_CommRecipientFilter.Remove(item.commfiltervalue);
                            }
                        }
                    }

                    //check that filter deatils is coverage area
                    if (objFilterRequestParam.filtertype.ToString(CultureInfo.InvariantCulture).StartsWith(Shared.Location))
                    {
                        if (!string.IsNullOrEmpty(objFilterRequestParam.typefilter))
                        {
                            //CHECK THAT COVERAGE AREA AS PER STATE OR ZIP CODE 
                            filterValueForCoverageArea = objFilterRequestParam.typefilter.Split(char.Parse(Shared.Hash));
                            if (filterValueForCoverageArea.Count >= 1)
                            {
                                //IF COVERAGE AREA AS PER STATES
                                if (filterValueForCoverageArea[0].Trim().ToLower().Equals(Shared.Zero))
                                {
                                    //GET STATES, COUNTY AND CITY DETAILS
                                    coverageAreaCol = filterValueForCoverageArea[1].Split(char.Parse(Shared.DollarSign));
                                    //APPLY LOOP ON STATES , COUNTY AND CITY
                                    foreach (var item in coverageAreaCol)
                                    {
                                        //CHECK THAT COLLECTION IS FOR STATE COUNTY OR CITY
                                        stateList = item.Split(char.Parse(Shared.Colon));
                                        if (stateList.Count > 1)
                                        {
                                            foreach (var state in stateList[0].Split(char.Parse(Shared.Astrik)))
                                            {
                                                //SPLIT STATE FROM COMMA FOR INSERT THE ALL COLUMN VALUES
                                                countyList = state.Split(char.Parse(Shared.SemiColon));
                                                if (countyList.Count > 2)
                                                { coverageType = (byte)(Convert.ToInt32(countyList[2], CultureInfo.InvariantCulture)); }
                                                if (countyList.Count > 1)
                                                {
                                                    DP_CommRecipientFilter objDPCommRecipientFilter = new DP_CommRecipientFilter
                                                    {
                                                        FilterType = objFilterRequestParam.filtertype,
                                                        Filtervalue = stateList[1],
                                                        DocId = DocId,
                                                        CoverageArea = countyList[1],
                                                        DeliveredCompanyId = objFilterRequestParam.CompanyId,
                                                        OptionalVal = countyList[0],
                                                        CoverageType = coverageType
                                                    };
                                                    objDecisionPointEntities.DP_CommRecipientFilter.Add(objDPCommRecipientFilter);
                                                }
                                            }
                                        }

                                    }


                                }
                                //IF COVERAGE AREA AS PER ZIP
                                else if (filterValueForCoverageArea[0].Trim().ToLower().Equals(Shared.One))
                                {
                                    //APPLY LOOP ON EVERY ZIP DOES
                                    foreach (var item in filterValueForCoverageArea[1].Split(char.Parse(Shared.Astrik)))
                                    {
                                        DP_CommRecipientFilter objDPCommRecipientFilter = new DP_CommRecipientFilter
                                        {
                                            FilterType = objFilterRequestParam.filtertype,
                                            Filtervalue = Shared.Zip,
                                            DocId = DocId,
                                            CoverageArea = item,
                                            DeliveredCompanyId = objFilterRequestParam.CompanyId


                                        };
                                        objDecisionPointEntities.DP_CommRecipientFilter.Add(objDPCommRecipientFilter);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //IF FILTER TYPE NOT COVERAGE AREA
                        if (!string.IsNullOrEmpty(objFilterRequestParam.typefilter))
                        {
                            filterValue = objFilterRequestParam.typefilter.Split(',');
                        }
                        //APPLY LOOP ON VALUES AND SAVE IN DATABASE
                        if (filterValue.Count > 0)
                        {
                            foreach (var item in filterValue)
                            {
                                DP_CommRecipientFilter objDPCommRecipientFilter = new DP_CommRecipientFilter
                                {
                                    FilterType = objFilterRequestParam.filtertype,
                                    Filtervalue = item,
                                    DocId = DocId,
                                    DeliveredCompanyId = objFilterRequestParam.CompanyId
                                };
                                objDecisionPointEntities.DP_CommRecipientFilter.Add(objDPCommRecipientFilter);
                            }
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// To update Assessment Test result Pass or fail
        /// </summary>
        /// <param name="tableId">int</param>
        /// <param name="assessmentResult">string</param>
        /// <returns>int</returns>
        public int SaveAssessmentResult(int tableId, string assessmentResult)
        {
            int res = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = objDecisionPointEntities.DP_Recipient.First(x => x.Id == tableId);
                    if (query != null)
                    {
                        query.Assessmentresult = assessmentResult;
                        objDecisionPointEntities.SaveChanges();
                        res = 1;

                    }
                    else
                    {
                        res = 0;
                    }

                }
                return res;

            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// Used to get the Training Materials Details of a User for Student View
        /// </summary>
        /// <param name="userID">ID of current User</param>
        /// <param name="docID">ID of current document</param>
        /// <returns>List of UserTrainingMaterialsRequestParam Class</returns>

        public IList<UserTrainingMaterialsRequestParam> GetTrainingMaterialsDetails(int userID, int docID)
        {
            try
            {
                IList<UserTrainingMaterialsRequestParam> objTrainingMaterials = new List<UserTrainingMaterialsRequestParam>();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    objTrainingMaterials = (from training in objDecisionPointEntities.DP_CommContents
                                            where training.DocMsgId == docID
                                            select new UserTrainingMaterialsRequestParam
                                            {
                                                CreatedBy = training.CreateBy,
                                                CreatedDate = training.CreateDate,
                                                DocMsgID = training.DocMsgId,
                                                FileLocation = training.FileLoc,
                                                FileTitle = training.FileTitle,
                                                FileType = training.Filetype,
                                                ModifiedDate = training.ModifyDate,
                                                ModiifiedBy = training.ModifyBy,
                                                status = training.Status,
                                                DocID = training.Id
                                            }).ToList();

                    IList<UserTrainingMaterialsRequestParam> objdocument = new List<UserTrainingMaterialsRequestParam>();
                    objdocument = GetUserDocStatus(userID);
                    foreach (var list1 in objTrainingMaterials)
                    {
                        foreach (var list2 in objdocument.Where(x => x.DocID == list1.DocID))
                        {
                            list1.status = list2.status;
                            list1.ViewDate = list2.ViewDate;
                            list1.CompletionDate = list2.CompletionDate;
                            list1.TimeSpan = list2.TimeSpan;
                        }
                    }

                    return objTrainingMaterials;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// Used to get the completed Training Materials Details of a User for Student View
        /// </summary>
        /// <param name="userID">ID of current User</param>
        /// <returns>List of UserTrainingMaterialsRequestParam Class</returns>
        public IList<UserTrainingMaterialsRequestParam> GetUserDocStatus(int userid)
        {

            try
            {
                IList<UserTrainingMaterialsRequestParam> objdoc = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    objdoc = (from q in objDecisionPointEntities.DP_CommDocSpentTime
                              where q.Userid == userid
                              select new UserTrainingMaterialsRequestParam
                              {
                                  DocID = (int)q.DocId == null ? 0 : (int)q.DocId,
                                  status = (q.status == null) ? false : q.status,
                                  ViewDate = (DateTime)q.ViewDate,
                                  CompletionDate = (DateTime)q.CreatedDate,
                                  TimeSpan = (int)q.SpendTime == null ? 0 : (int)q.SpendTime
                              }).ToList();
                    return objdoc;
                }

            }
            catch
            {
                throw;

            }

        }
        /// <summary>
        /// Used to save the selected Answers by the user
        /// </summary>
        /// <param name="userId">ID of current User</param>
        /// <param name="docId">ID of current document</param>
        /// <param name="questionId">ID of current Assessment Question</param>
        /// <param name="AnswerId">ID of current AnswerId of selected Question Of assessment</param>
        ///  /// <param name="attempt">attempt means how many retake the user can attempts for assessment</param>
        public int SaveUserSelectedAnswers(UserSelectedAnswersRequestParam objRequestParam)
        {
            int resp;
            try
            {
                if (objRequestParam.userId != 0)
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        var result = (from attemps in objDecisionPointEntities.Dp_CommAsstAtempts
                                      where attemps.UserId == objRequestParam.userId && attemps.DocId == objRequestParam.docId
                                      select attemps.Attempts).FirstOrDefault();

                        if (result == null)
                        {
                            DP_CommAsstAnswer SaveAssessment = new DP_CommAsstAnswer
                            {
                                DocId = objRequestParam.docId,
                                QuestionId = objRequestParam.questionId,
                                AnswerId = objRequestParam.AnswerId,
                                UserId = objRequestParam.userId,
                            };
                            objDecisionPointEntities.DP_CommAsstAnswer.Add(SaveAssessment);
                            objDecisionPointEntities.SaveChanges();
                            resp = 1;
                        }
                        else
                        {
                            var AnotherAttempt = objDecisionPointEntities.Dp_CommAsstAtempts.First(x => x.UserId == objRequestParam.userId && x.DocId == objRequestParam.docId);
                            if ((AnotherAttempt.Attempts < objRequestParam.attempt) || AnotherAttempt.Attempts == 0)
                            {
                                var query = objDecisionPointEntities.DP_CommAsstAnswer.First(x => x.UserId == objRequestParam.userId && x.DocId == objRequestParam.docId && x.QuestionId == objRequestParam.questionId);
                                if (query != null)
                                {
                                    query.AnswerId = objRequestParam.AnswerId;
                                    objDecisionPointEntities.SaveChanges();
                                    resp = 1;
                                }
                                else
                                {
                                    DP_CommAsstAnswer SaveAssessment = new DP_CommAsstAnswer
                                    {
                                        DocId = objRequestParam.docId,
                                        QuestionId = objRequestParam.questionId,
                                        AnswerId = objRequestParam.AnswerId,
                                        UserId = objRequestParam.userId,
                                    };
                                    objDecisionPointEntities.DP_CommAsstAnswer.Add(SaveAssessment);
                                    objDecisionPointEntities.SaveChanges();
                                    resp = 1;
                                }

                            }
                            else
                            {
                                resp = 2;
                            }

                        }

                    }
                }
                else
                {
                    resp = 1;
                }
                return resp;

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save assesment 
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="docId"></param>
        /// <param name="attempt"></param>
        /// <returns></returns>
        public int SaveUserAsstAttempts(int userId, int docId, int attempt)
        {
            int res;
            try
            {
                if (userId != 0)
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        var query = (from attemps in objDecisionPointEntities.Dp_CommAsstAtempts
                                     where attemps.UserId == userId && attemps.DocId == docId
                                     select attemps.Attempts).FirstOrDefault();



                        if (query == null)
                        {
                            Dp_CommAsstAtempts aadAttempt = new Dp_CommAsstAtempts
                            {
                                UserId = userId,
                                DocId = docId,
                                Attempts = 1,
                                CreatedDate = DateTime.Now.Date
                            };
                            objDecisionPointEntities.Dp_CommAsstAtempts.Add(aadAttempt);
                            objDecisionPointEntities.SaveChanges();
                            res = 1;
                        }
                        else
                        {
                            var result = objDecisionPointEntities.Dp_CommAsstAtempts.First(x => x.UserId == userId && x.DocId == docId);

                            if (Convert.ToInt32(result.Attempts, CultureInfo.InvariantCulture) == attempt)
                            {
                                res = 2;
                            }
                            else
                            {
                                result.Attempts = result.Attempts + 1;
                                objDecisionPointEntities.SaveChanges();
                                res = 1;
                            }
                        }

                    }
                }
                else
                {
                    res = 1;
                }
                return res;
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// check particular doc status
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="docId"></param>
        /// <returns>bool</returns>
        public bool CheckDocStatusAsPerCommunication(int userId, int docId)
        {
            bool IsCompleted = false;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var getDocs = (from docmaster in objDecisionPointEntities.DP_CommContents
                                   where docmaster.DocMsgId == docId
                                   select docmaster.Id).ToList();
                    if (getDocs.Count > 0)
                    {
                        foreach (var item in getDocs)
                        {
                            var chkDocStatus = (from doc in objDecisionPointEntities.DP_CommDocSpentTime
                                                where doc.Userid == userId && doc.DocId == item
                                                select doc.status).FirstOrDefault();
                            if (object.Equals(chkDocStatus, null))
                            {
                                IsCompleted = false;
                                break;
                            }
                            else
                            {
                                if (!(bool)(chkDocStatus == null ? false : chkDocStatus))
                                {
                                    IsCompleted = false;
                                    break;
                                }
                                else { IsCompleted = true; }
                            }
                        }
                    }
                    else
                    {
                        IsCompleted = true;
                    }

                }
                return IsCompleted;
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Used to marks as completed
        /// </summary>
        /// <param name="tableId"></param>
        /// <param name="accepted"></param>
        /// <param name="DocID"></param>
        /// <returns></returns>
        public int SaveMarkAsComplete(int tableId, bool accepted, int DocID)
        {
            int res;
            try
            {
                IList<UserAssesmentParamcs> checkAssessment = getAssesmentViewList(DocID, false).ToList();
                int count = checkAssessment.Count();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = objDecisionPointEntities.DP_Recipient.First(x => x.Id == tableId);

                    if (query != null)
                    {

                        if (!string.IsNullOrEmpty(query.Assessmentresult))
                        {
                            if (count <= 0)
                            {
                                if (query.Status == Shared.Completed.ToLower(CultureInfo.InvariantCulture) && query.Accepted == true)
                                {
                                    query.MoveInHistory = true;
                                    query.IsmailSend = true;

                                    res = 3;
                                }
                                else
                                {
                                    query.Status = Shared.Completed.ToLower(CultureInfo.InvariantCulture);
                                    query.CompletedDate = DateTime.Now.Date;
                                    query.MoveInHistory = true;
                                    query.Assessmentresult = Shared.Pass.ToLower(CultureInfo.InvariantCulture);
                                    query.Accepted = true;
                                    query.IsmailSend = true;

                                    res = 1;
                                }
                            }

                            else if (count > 0)
                            {
                                if (query.Status == Shared.Completed.ToLower(CultureInfo.InvariantCulture) && query.Accepted == true)
                                {
                                    query.MoveInHistory = true;
                                    query.IsmailSend = true;

                                    res = 3;
                                }
                                else
                                {

                                    query.Status = Shared.Completed.ToLower(CultureInfo.InvariantCulture);
                                    query.CompletedDate = DateTime.Now.Date;
                                    query.MoveInHistory = true;
                                    query.Accepted = true;
                                    query.IsmailSend = true;

                                    res = 1;
                                }
                            }
                            else
                            {
                                res = 2;
                            }
                        }
                        else
                        {
                            if (query.Status == Shared.Completed.ToLower(CultureInfo.InvariantCulture) && query.Accepted == true)
                            {
                                query.MoveInHistory = true;
                                query.IsmailSend = true;

                                res = 3;
                            }
                            else
                            {
                                if (count > 0)
                                {
                                    if (query.Assessmentresult == Shared.Pass.ToLower(CultureInfo.InvariantCulture) || query.Assessmentresult == Shared.Fail.ToLower(CultureInfo.InvariantCulture))
                                    {
                                        query.Status = Shared.Completed.ToLower(CultureInfo.InvariantCulture);
                                        query.CompletedDate = DateTime.Now.Date;
                                        query.MoveInHistory = true;
                                        query.IsmailSend = true;
                                        res = 1;
                                    }
                                    else
                                    {
                                        query.Status = Shared.NotCompleted;
                                        query.Accepted = accepted;

                                        res = 2;
                                    }
                                }
                                else
                                {

                                    query.Status = Shared.Completed.ToLower(CultureInfo.InvariantCulture);
                                    query.CompletedDate = DateTime.Now.Date;
                                    query.MoveInHistory = true;
                                    query.Assessmentresult = Shared.Pass.ToLower(CultureInfo.InvariantCulture);
                                    query.Accepted = true;
                                    query.IsmailSend = true;

                                    res = 1;
                                }
                            }

                        }

                    }
                    else
                    {
                        res = 0;
                    }
                    objDecisionPointEntities.SaveChanges();
                }
                return res;
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save spend time on document
        /// </summary>
        /// <param name="DocTimeSpentRequestParam">DocTimeSpentRequestParam</param> 
        /// <CREATEDBY>MAMTA GUPTA </CREATEDBY>
        /// <createddate>24 apr 2014</createddate>
        /// <returns>int</returns>
        public int SaveDocTimeSpent(DocTimeSpentRequestParam docTimeSpentRequestParam)
        {
            int result;
            try
            {
                if (docTimeSpentRequestParam.userid != 0)
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        int adminid = Convert.ToInt32(objDecisionPointEntities.DP_Recipient.First(x => x.Id == docTimeSpentRequestParam.DeleiverUserId).DeliveredUserId, CultureInfo.InvariantCulture);
                        if (adminid != 0)
                        {
                            var res = (from Timespent in objDecisionPointEntities.DP_CommDocSpentTime
                                       where Timespent.Userid == docTimeSpentRequestParam.userid && Timespent.DocId == docTimeSpentRequestParam.docid && Timespent.AdminId == adminid
                                       select Timespent).FirstOrDefault();

                            if (res != null)
                            {

                                res.SpendTime = res.SpendTime + docTimeSpentRequestParam.timespan;
                                if (docTimeSpentRequestParam.Completion == 1)
                                {
                                    res.CreatedDate = DateTime.Now.Date;
                                    res.status = true;
                                }
                                objDecisionPointEntities.SaveChanges();
                                result = 1;

                            }
                            else
                            {
                                if (docTimeSpentRequestParam.Completion == 1)
                                {
                                    DP_CommDocSpentTime savetime = new DP_CommDocSpentTime
                                    {
                                        Userid = docTimeSpentRequestParam.userid,
                                        AdminId = adminid,
                                        DocId = docTimeSpentRequestParam.docid,
                                        SpendTime = docTimeSpentRequestParam.timespan,
                                        CreatedBy = Convert.ToString(docTimeSpentRequestParam.userid, CultureInfo.InvariantCulture),
                                        CreatedDate = DateTime.Now.Date,
                                        ViewDate = DateTime.Now.Date,
                                        status = true
                                    };
                                    objDecisionPointEntities.DP_CommDocSpentTime.Add(savetime);
                                    objDecisionPointEntities.SaveChanges();
                                }
                                else
                                {
                                    DP_CommDocSpentTime savetime = new DP_CommDocSpentTime
                                    {
                                        Userid = docTimeSpentRequestParam.userid,
                                        AdminId = adminid,
                                        DocId = docTimeSpentRequestParam.docid,
                                        SpendTime = docTimeSpentRequestParam.timespan,
                                        CreatedBy = Convert.ToString(docTimeSpentRequestParam.userid, CultureInfo.InvariantCulture),
                                        ViewDate = DateTime.Now.Date,

                                    };
                                    objDecisionPointEntities.DP_CommDocSpentTime.Add(savetime);
                                    objDecisionPointEntities.SaveChanges();
                                }
                                result = 1;
                            }

                        }
                        else
                        {
                            result = 0;
                        }
                    }

                }
                else
                {
                    result = 0;
                }
                return result;

            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// get user spent time
        /// </summary>
        /// <param name="deliveredUserId"></param>
        /// <returns></returns>
        public IList<UserTimeSpanParams> GetUSerTimeSpan(int deliveredUserId)
        {
            try
            {
                IList<UserTimeSpanParams> objUSerTimeSpan = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    objUSerTimeSpan = (from q in objDecisionPointEntities.DP_CommDocSpentTime
                                       join S in objDecisionPointEntities.DP_CommContents on q.DocId equals S.Id
                                       where q.AdminId == deliveredUserId
                                       group q by new { q.DocId, q.CreatedDate } into qGroup
                                       select new UserTimeSpanParams
                                       {
                                           docid = (int)qGroup.Key.DocId,
                                           CompletionDate = (DateTime)qGroup.Key.CreatedDate,
                                           TimeSpan = (int)qGroup.Sum(r => r.SpendTime)
                                       }).ToList();

                }
                return objUSerTimeSpan;
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// used to set completion date
        /// </summary>
        /// <param name="userid"></param>
        /// <returns></returns>
        public IList<UserTimeSpanParams> GetUserCompletionDate(int userid)
        {
            IList<UserTimeSpanParams> objUSerTimeSpan = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    objUSerTimeSpan = (from q in objDecisionPointEntities.DP_CommDocSpentTime
                                       where q.Userid == userid
                                       select new UserTimeSpanParams
                                       {
                                           docid = (int)q.DocId,
                                           CompletionDate = (DateTime)q.CreatedDate,
                                           ViewDate = (DateTime)q.ViewDate, // ((DateTime)q.ViewDate == null) ? (DateTime)"" : (DateTime)q.ViewDate
                                       }).ToList();
                }

            }
            catch
            {
                throw;

            }
            return objUSerTimeSpan;
        }
        /// <summary>
        /// used to get Acknowledgment
        /// </summary>
        /// <param name="docId"></param>
        /// <returns></returns>
        public IList<UserAcknowledgmentParams> GetAcknowledgment(int docId)
        {
            IList<UserAcknowledgmentParams> objAcknowledgment = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    objAcknowledgment = (from q in objDecisionPointEntities.DP_CommRquiredActions
                                         where q.DocMsgId == docId && q.IsDeleted == false
                                         select new UserAcknowledgmentParams
                                         {
                                             id = q.Id,
                                             Acknowlegment = q.Condition
                                         }).ToList();
                }
                return objAcknowledgment;
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// used to save document status
        /// </summary>
        /// <param name="userid"></param>
        /// <param name="DocId"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        public int SaveDocMarkAsComplete(int userid, int DocId, bool status)
        {
            int result;

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from q in objDecisionPointEntities.DP_CommDocSpentTime
                                 where q.Userid == userid && q.DocId == DocId
                                 select q).FirstOrDefault();
                    if (query != null)
                    {
                        query.status = status;
                        objDecisionPointEntities.SaveChanges();
                        result = 1;
                    }
                    else
                    {
                        DP_CommDocSpentTime objdocStatus = new DP_CommDocSpentTime
                        {
                            Userid = userid,
                            DocId = DocId,
                            status = status,
                            CreatedBy = Convert.ToString(userid, CultureInfo.InvariantCulture),
                            CreatedDate = DateTime.Now.Date
                        };
                        objDecisionPointEntities.DP_CommDocSpentTime.Add(objdocStatus);
                        objDecisionPointEntities.SaveChanges();
                        result = 1;
                    }
                }
                return result;
            }
            catch
            {
                throw;
            }
        }

        #endregion
        /// <summary>
        /// used to validate profile data on setup page
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        public string validateVendorProfile(int userId)
        {
            try
            {
                string result = string.Empty;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    #region Validate Coverage Area
                    var updateQuery = (from user in objDecisionPointEntities.DP_User
                                       join profile in objDecisionPointEntities.DP_Profile
                                       on user.Id equals profile.UserId
                                       where user.Id == userId
                                       select profile.CompanyCAStatus).FirstOrDefault();
                    if (updateQuery == null || updateQuery != Shared.DoesNotApply)
                    {
                        var query = (from state in objDecisionPointEntities.DP_StateMapping
                                     where state.UserId == userId
                                     select state.Id).Count();
                        if (query == 0)
                        {
                            var queryZip = (from zip in objDecisionPointEntities.DP_ZipMapping
                                            where zip.UserId == userId
                                            select zip.Id).Count();
                            result += queryZip.ToString(CultureInfo.InvariantCulture) + ',';
                        }
                        else
                        {
                            result += query.ToString(CultureInfo.InvariantCulture) + ',';
                        }
                    }
                    else
                    {
                        result += "1,";
                    }
                    #endregion

                    #region ValidateServices
                    var queryServices = (from services in objDecisionPointEntities.DP_ServicesMaster
                                         where services.CreatedBy == userId
                                         select services.Id).Count();
                    result += queryServices.ToString(CultureInfo.InvariantCulture) + ',';
                    #endregion

                    #region ValidateTitle
                    var queryTitle = (from title in objDecisionPointEntities.DP_TitleMaster
                                      where title.CreatedBy == userId
                                      select title.Id).Count();
                    result += queryTitle.ToString(CultureInfo.InvariantCulture) + ',';
                    #endregion

                    #region ValidateRefrences
                    var queryRefrence = (from refrence in objDecisionPointEntities.DP_Reference
                                         where refrence.CreatedBy == userId
                                         select refrence.Id).Count();
                    result += queryRefrence.ToString(CultureInfo.InvariantCulture) + ',';
                    #endregion

                    #region ValidateStaff
                    var queryStaff = (from staff in objDecisionPointEntities.DP_CompanyStaffMapping
                                      where staff.CreatedBy == userId
                                      select staff.Id).Count();
                    result += queryStaff.ToString(CultureInfo.InvariantCulture) + ',';
                    #endregion

                    #region ValidateIC
                    var queryIc = (from ic in objDecisionPointEntities.DP_ComapnyVendorMapping
                                   join users in objDecisionPointEntities.DP_Profile on ic.VendorId equals users.UserId
                                   where ic.CreatedBy == userId && users.UserType == Shared.IC
                                   select ic.Id).Count();
                    result += queryIc.ToString(CultureInfo.InvariantCulture);
                    #endregion
                    return result;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// used to validate staff profile during registration
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        public string validateStaffProfile(int userId)
        {
            try
            {
                string result = string.Empty;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    #region ValidateChangePassword
                    int checkpwd = 0;
                    var querypassword = (from user in objDecisionPointEntities.DP_User
                                         where user.Id == userId
                                         select user.IsTemp).FirstOrDefault();
                    if (querypassword != null)
                    {
                        if (querypassword == false)
                        {
                            checkpwd = 1;
                        }
                        else if (querypassword == true)
                        {
                            checkpwd = 0;
                        }
                    }

                    result += checkpwd.ToString(CultureInfo.InvariantCulture) + ',';
                    #endregion
                    #region Validate Coverage Area
                    var updateQuery = (from user in objDecisionPointEntities.DP_User
                                       join profile in objDecisionPointEntities.DP_Profile
                                       on user.Id equals profile.UserId
                                       where user.Id == userId
                                       select profile.CompanyCAStatus).FirstOrDefault();
                    if (updateQuery == null || updateQuery != Shared.DoesNotApply)
                    {
                        var query = (from state in objDecisionPointEntities.DP_StateMapping
                                     where state.UserId == userId
                                     select state.Id).Count();
                        if (query == 0)
                        {
                            var queryZip = (from zip in objDecisionPointEntities.DP_ZipMapping
                                            where zip.UserId == userId
                                            select zip.Id).Count();
                            result += queryZip.ToString(CultureInfo.InvariantCulture) + ',';
                        }
                        else
                        {
                            result += query.ToString(CultureInfo.InvariantCulture) + ',';
                        }
                    }
                    else
                    {
                        result += "1,";
                    }
                    #endregion

                    #region ValidateServices
                    var queryServices = (from services in objDecisionPointEntities.DP_ServiceMapping
                                         where services.UserId == userId
                                         select services.Id).Count();
                    result += queryServices.ToString(CultureInfo.InvariantCulture) + ',';
                    #endregion

                    return result;
                }
            }
            catch
            {
                throw;
            }
        }


        #endregion

        #region Mail Footer
        /// <summary>
        /// Mail footer
        /// </summary>
        /// <param name="objMailFooter">MailFooterRequestParam</param>
        /// <returns>int</returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>Jan 24 2014</createdDate>
        public int MailFooter(MailFooterRequestParam objMailFooter)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = objDecisionPointEntities.DP_MailFooter.Where(w => w.UserId == objMailFooter.UserID).Select(s => new { s }).FirstOrDefault();

                    if (res != null)
                    {
                        res.s.Signature = objMailFooter.Signauture;
                        res.s.SignatureName = objMailFooter.SignatureName;
                        objDecisionPointEntities.SaveChanges();
                        return 2;
                    }
                    else
                    {
                        DP_MailFooter objDP_MailFooter = new DP_MailFooter
                        {
                            SignatureName = objMailFooter.SignatureName,
                            Signature = objMailFooter.Signauture,
                            UserId = objMailFooter.UserID
                        };
                        objDecisionPointEntities.DP_MailFooter.Add(objDP_MailFooter);
                        objDecisionPointEntities.SaveChanges();
                        return 1;
                    }

                }
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// used to set the registration status
        /// </summary>
        /// <param name="docID"></param>
        /// <returns></returns>
        public bool ChangeDocumentStatus(int docID)
        {
            bool status = false;

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    DP_CommContents objComcontents = (from contents in objDecisionPointEntities.DP_CommContents
                                                      where contents.Id == docID
                                                      select contents).SingleOrDefault();

                    if (objComcontents != null)
                    {
                        objComcontents.Status = true;
                    }

                    objDecisionPointEntities.SaveChanges();
                    status = true;
                    return status;
                }
            }
            catch
            {
                throw;
            }

        }

        /// <summary>
        /// Get mail footer detail
        /// </summary>
        /// <param name="UserID">int</param>
        /// <returns>MailFooterRequestParam</returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>Jan 24 2014</createdDate>
        public MailFooterRequestParam GetMailFooter(int UserID)
        {
            MailFooterRequestParam objMailFooterRequestParam = new MailFooterRequestParam();
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    objMailFooterRequestParam = objDecisionPointEntities.DP_MailFooter.Where(w => w.UserId == UserID).Select(s => new
                    MailFooterRequestParam
                    {
                        SignatureId = s.ID,
                        SignatureName = s.SignatureName,
                        Signauture = s.Signature,
                        UserID = s.UserId
                    }).FirstOrDefault();
                    return objMailFooterRequestParam;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Get user signature
        /// </summary>
        /// <param name="UserID">int</param>
        /// <returns>Signature</returns>
        public string GetSignature(int UserID)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    string Signature = objDecisionPointEntities.DP_MailFooter.Where(x => x.UserId == UserID).Select(x => x.Signature).FirstOrDefault();
                    if (string.IsNullOrEmpty(Signature))
                    {
                        Signature = Shared.DefaultSignature;
                    }
                    return Signature;
                }
            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region Mail Reminder & Document mail sending
        /// <summary>
        /// mail reminder for training content
        /// </summary>
        /// <returns>int</returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>Jan 22 2014</createdDate>
        public List<MailReminder> mailReminder()
        {
            List<MailReminder> lstreceipentUserID = new List<MailReminder>();
            MailReminder objMailReminder = new MailReminder();
            string companyId = string.Empty;
            int recipientUserId = 0;
            int chkActiveStatus = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var document = objDecisionPointEntities.DP_DocumentDetails.Where(doc => doc.IsDeleted == false).Join(objDecisionPointEntities.DP_Recipient.Where(w => w.CompletedDate == null && w.Status != status && w.Status != Shared.Forward && w.IsDeleted == false && w.IsActive == true), dd => dd.Id, r => r.DocId, (dd, r) => new { dd, r })
                        .Where(w => w.r.SentDate <= w.r.RecipeintDueDate).ToList();
                    DateTime? dt = DateTime.Now;
                    int receipentUserID = 0;

                    for (int iCounter = 0; iCounter < document.Count; iCounter++)
                    {
                        if (document[iCounter].r.UserType.Trim().ToUpper().Equals(Shared.Staff.Trim().ToUpper()))
                        {
                            companyId = document[iCounter].r.DeliveredCompanyId;
                            recipientUserId = Convert.ToInt32(document[iCounter].r.RecipientUserId);
                            chkActiveStatus = (from user in objDecisionPointEntities.DP_User
                                               join vendormapping in objDecisionPointEntities.DP_CompanyStaffMapping
                                                on user.Id equals vendormapping.StaffId
                                               where vendormapping.CompanyId == companyId &&
                                               vendormapping.StaffId == recipientUserId && vendormapping.IsActive == true && user.IsActive == true
                                               select user.Id).FirstOrDefault();
                        }
                        else
                        {
                            companyId = document[iCounter].r.DeliveredCompanyId;
                            recipientUserId = Convert.ToInt32(document[iCounter].r.RecipientUserId);
                            chkActiveStatus = (from user in objDecisionPointEntities.DP_User
                                               join vendormapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                on user.Id equals vendormapping.VendorId
                                               where vendormapping.CompanyId == companyId &&
                                               vendormapping.VendorId == recipientUserId && vendormapping.IsActive == true && user.IsActive == true
                                               select user.Id).FirstOrDefault();
                        }
                        if (chkActiveStatus > 0)
                        {
                            objMailReminder = new MailReminder();
                            TimeSpan? ts = dt - document[iCounter].r.RecipeintDueDate;
                            int count = ts.Value.Days;

                            if (count % 3 == 0 || count == 1)
                            {
                                receipentUserID = (int)document[iCounter].r.RecipientUserId;
                                var userProfile = objDecisionPointEntities.DP_User.Where(x => x.Id == receipentUserID).Join(objDecisionPointEntities.DP_Profile, user => user.Id, profile => profile.UserId, (user, profile) => new { user, profile }).FirstOrDefault();
                                if (userProfile != null)
                                {
                                    objMailReminder.EmailID = userProfile.user.EmailId;
                                    objMailReminder.ID = receipentUserID;
                                    objMailReminder.SenderId = (int)(document[iCounter].r.DeliveredUserId == null ? 0 : document[iCounter].r.DeliveredUserId);
                                    objMailReminder.flow = objDecisionPointEntities.DP_FlowMapping.Where(x => x.UserId == receipentUserID && x.CreatedCompanyId == companyId).FirstOrDefault() == null ? 0 : (int)objDecisionPointEntities.DP_FlowMapping.Where(x => x.UserId == receipentUserID && x.CreatedCompanyId == companyId).Select(s => s.FlowId).FirstOrDefault();
                                    objMailReminder.BusinessName = userProfile.profile.BusinessName;
                                    objMailReminder.name = userProfile.profile.Firstname + Shared.SingleSpace + userProfile.profile.LastName;
                                    objMailReminder.Fname = userProfile.profile.Firstname;
                                    objMailReminder.UserId = userProfile.user.UserId;
                                    objMailReminder.Password = userProfile.user.Password;
                                    objMailReminder.Count = count;
                                    objMailReminder.Catagory = document[iCounter].dd.DocType;
                                    objMailReminder.DocId = (int)(document[iCounter].r.DocId == null ? 0 : document[iCounter].r.DocId);
                                    objMailReminder.TblId = document[iCounter].r.Id;
                                    objMailReminder.UserType = userProfile.profile.UserType;
                                    objMailReminder.DueDate = document[iCounter].r.RecipeintDueDate;
                                    if (!lstreceipentUserID.Contains(objMailReminder))
                                    {
                                        lstreceipentUserID.Add(objMailReminder);
                                    }
                                }
                            }
                        }
                    }
                }

                return lstreceipentUserID;
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {

            }


        }

        /// <summary>
        /// mail reminder for training content
        /// </summary>
        /// <returns>int</returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>Jan 22 2014</createdDate>
        public List<MailMatrixResponseParam> DocumentMailSending()
        {
            IList<MailMatrixResponseParam> lstreceipentUserID = new List<MailMatrixResponseParam>();
            MailMatrixResponseParam objDocumentMailSending = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var document = (from doc in objDecisionPointEntities.DP_DocumentDetails
                                    join recipient in objDecisionPointEntities.DP_Recipient
                                        on doc.Id equals recipient.DocId
                                    where recipient.IsmailSend == false && recipient.Status != Shared.Forward
                                    && recipient.IsActive == true && recipient.IsDeleted == false && doc.IsDeleted == false
                                    select recipient).ToList();

                    foreach (var doc in document)
                    {
                        objDocumentMailSending = new MailMatrixResponseParam();
                        var ReciveruserProfile = objDecisionPointEntities.DP_User.Where(x => x.Id == doc.RecipientUserId && x.IsActive == true).Join(objDecisionPointEntities.DP_Profile, user => user.Id, profile => profile.UserId, (user, profile) => new { user, profile }).FirstOrDefault();
                        var SenderuserProfile = objDecisionPointEntities.DP_User.Where(x => x.Id == doc.DeliveredUserId && x.IsActive == true).Join(objDecisionPointEntities.DP_Profile, user => user.Id, profile => profile.UserId, (user, profile) => new { user, profile }).FirstOrDefault();
                        if (ReciveruserProfile != null && SenderuserProfile != null)
                        {
                            objDocumentMailSending.RecevierEmail = ReciveruserProfile.user.EmailId;
                            objDocumentMailSending.Recevier = ReciveruserProfile.profile.Firstname + Shared.SingleSpace + ReciveruserProfile.profile.LastName;
                            objDocumentMailSending.RecevierId = ReciveruserProfile.profile.UserId;
                            objDocumentMailSending.Sender = SenderuserProfile.profile.BusinessName;
                            objDocumentMailSending.Category = doc.Type;
                            objDocumentMailSending.SenderId = SenderuserProfile.user.Id;
                            objDocumentMailSending.Flow = objDecisionPointEntities.DP_FlowMapping.Where(x => x.UserId == doc.DeliveredUserId && x.CreatedBy == doc.RecipientUserId).FirstOrDefault() == null ? 0 : (int)objDecisionPointEntities.DP_FlowMapping.Where(x => x.UserId == doc.DeliveredUserId && x.CreatedBy == doc.RecipientUserId).Select(s => s.FlowId).FirstOrDefault();
                            objDocumentMailSending.DocId = (int)(doc.DocId == null ? 0 : doc.DocId);
                            objDocumentMailSending.TblId = doc.Id;
                            objDocumentMailSending.DueDate = doc.RecipeintDueDate;
                            objDocumentMailSending.UserType = ReciveruserProfile.profile.UserType;
                            if (!lstreceipentUserID.Contains(objDocumentMailSending))
                            {
                                lstreceipentUserID.Add(objDocumentMailSending);
                            }
                        }

                    }
                }

                return lstreceipentUserID.ToList();
            }
            catch
            {

                throw;
            }



        }

        /// <summary>
        /// Used for set the retake communication as per completed date and retake value
        /// </summary>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>14 july 2014</createddate>
        public int SetRetakeDocument()
        {
            try
            {
                int chkActiveStatus = 0;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    DateTime currentdate = DateTime.Today;
                    //get the communications for retake 
                    var document = (from doc in objDecisionPointEntities.DP_DocumentDetails
                                    join recipient in objDecisionPointEntities.DP_Recipient
                                    on doc.Id equals recipient.DocId
                                    where recipient.Status == status && doc.Retake != Shared.DNA && recipient.CompletedDate != null
                                    && recipient.IsActive == true && recipient.IsDeleted == false && doc.IsDeleted == false
                                    select new { doc, recipient }).ToList();

                    foreach (var item in document)
                    {
                        if (item.recipient.UserType.Trim().ToUpper().Equals(Shared.Staff.Trim().ToUpper()))
                        {
                            chkActiveStatus = (from user in objDecisionPointEntities.DP_User
                                               join vendormapping in objDecisionPointEntities.DP_CompanyStaffMapping
                                                on user.Id equals vendormapping.StaffId
                                               where vendormapping.CompanyId == item.recipient.DeliveredCompanyId &&
                                               vendormapping.StaffId == item.recipient.RecipientUserId && vendormapping.IsActive == true && user.IsActive == true
                                               select user.Id).FirstOrDefault();
                        }
                        else
                        {
                            chkActiveStatus = (from user in objDecisionPointEntities.DP_User
                                               join vendormapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                on user.Id equals vendormapping.VendorId
                                               where vendormapping.CompanyId == item.recipient.DeliveredCompanyId &&
                                               vendormapping.VendorId == item.recipient.RecipientUserId && vendormapping.IsActive == true && user.IsActive == true
                                               select user.Id).FirstOrDefault();
                        }
                        if (chkActiveStatus > 0)
                        {
                            var res = (from chkdoc in objDecisionPointEntities.DP_Recipient
                                       where chkdoc.RecipientUserId == item.recipient.RecipientUserId && chkdoc.RecipientCompanyid == item.recipient.RecipientCompanyid && chkdoc.DocId == item.recipient.DocId
                                       && chkdoc.DeliveredCompanyId == item.recipient.DeliveredCompanyId && chkdoc.DeliveredUserId == item.recipient.DeliveredUserId && chkdoc.Status != status
                                       && chkdoc.CompletedDate == null
                                       && EntityFunctions.TruncateTime(chkdoc.CreatedDate) == currentdate
                                       select chkdoc.Id
                            ).Distinct().FirstOrDefault();
                            if (object.Equals(res, null) || res == 0)
                            {
                                if (((currentdate.Date - item.recipient.CompletedDate.Value.Date).Days / 30) == Convert.ToInt32(item.doc.Retake, CultureInfo.InvariantCulture) - 1)
                                {
                                    //insett new record for retake
                                    DP_Recipient objDPRecipient = new DP_Recipient
                                    {
                                        RecipientUserId = item.recipient.RecipientUserId,
                                        DeliveredUserId = item.recipient.DeliveredUserId,
                                        DocId = item.recipient.DocId,
                                        Type = item.recipient.Type,
                                        Status = Shared.New,
                                        SentDate = currentdate,
                                        MoveInHistory = false,
                                        DocSeqNo = item.recipient.DocSeqNo,
                                        IsActive = true,
                                        VersionNo = item.recipient.VersionNo,
                                        UserType = item.recipient.UserType,
                                        RecipeintDueDate = currentdate.AddMonths(1),
                                        DeliveredCompanyId = item.recipient.DeliveredCompanyId,
                                        RecipientCompanyid = item.recipient.RecipientCompanyid,
                                        IsRetake = true,
                                        IsmailSend = false,
                                        CreatedDate = currentdate,
                                        CommReceivedDate = currentdate
                                    };
                                    objDecisionPointEntities.DP_Recipient.Add(objDPRecipient);

                                }
                            }
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used for set the retake communication as per completed date and retake value
        /// </summary>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Nov 2014</createddate>
        public int SetRetakeJCR()
        {
            try
            {
                int chkActiveStatus = 0;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    DateTime currentdate = DateTime.Today;
                    //get the JCR for retake 
                    var jcrDocuments = (from sender in objDecisionPointEntities.DP_ReqDocSender
                                        join receiver in objDecisionPointEntities.DP_ReqDocReceiver
                                        on sender.Id equals receiver.ReqDocId
                                        where receiver.IsCompleted == 1 && sender.Retake != Shared.DNA && receiver.CompletedDate != null
                                        && receiver.IsActive == true && sender.IsDeleted == false && sender.IsActive == true
                                        select new { sender, receiver }).ToList();
                    //apply loop on retake jcr documents
                    foreach (var item in jcrDocuments)
                    {
                        //check the users is currently active or not for received the retake document
                        if (item.sender.ReqDocFor.Trim().ToUpper().Equals(Shared.Staff.Trim().ToUpper()))
                        {
                            //if user type is staff than check in company staffmapping table
                            chkActiveStatus = (from user in objDecisionPointEntities.DP_User
                                               join vendormapping in objDecisionPointEntities.DP_CompanyStaffMapping
                                                on user.Id equals vendormapping.StaffId
                                               where vendormapping.CompanyId == item.sender.CompanyId &&
                                               vendormapping.StaffId == item.receiver.UserId && vendormapping.IsActive == true && user.IsActive == true
                                               select user.Id).FirstOrDefault();
                        }
                        else if (item.sender.ReqDocFor.Trim().ToUpper().Equals(Shared.Both.Trim().ToUpper()))
                        {
                            //if user type is both than first check in company staffmapping table
                            chkActiveStatus = (from user in objDecisionPointEntities.DP_User
                                               join vendormapping in objDecisionPointEntities.DP_CompanyStaffMapping
                                                on user.Id equals vendormapping.StaffId
                                               where vendormapping.CompanyId == item.sender.CompanyId &&
                                               vendormapping.StaffId == item.receiver.UserId && vendormapping.IsActive == true && user.IsActive == true
                                               select user.Id).FirstOrDefault();
                            //if user type is both than first check in company staffmapping table and if user not exist in company staff mapping table than after check in company vendor mapping table
                            if (chkActiveStatus == 0)
                            {
                                chkActiveStatus = (from user in objDecisionPointEntities.DP_User
                                                   join vendormapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                    on user.Id equals vendormapping.VendorId
                                                   where vendormapping.CompanyId == item.sender.CompanyId &&
                                                   vendormapping.VendorId == item.receiver.UserId && vendormapping.IsActive == true && user.IsActive == true
                                                   select user.Id).FirstOrDefault();
                            }
                        }
                        else
                        {
                            //if only IC received the JCR than check IC is active or not for received the jcr documents
                            chkActiveStatus = (from user in objDecisionPointEntities.DP_User
                                               join vendormapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                on user.Id equals vendormapping.VendorId
                                               where vendormapping.CompanyId == item.sender.CompanyId &&
                                               vendormapping.VendorId == item.receiver.UserId && vendormapping.IsActive == true && user.IsActive == true
                                               select user.Id).FirstOrDefault();
                        }
                        if (chkActiveStatus > 0)
                        {
                            var res = (from chkdoc in objDecisionPointEntities.DP_ReqDocReceiver
                                       where chkdoc.UserId == item.receiver.UserId && chkdoc.CompanyId == item.receiver.CompanyId
                                       && chkdoc.ReqDocId == item.sender.Id
                                       && chkdoc.IsCompleted != 1
                                       && chkdoc.CompletedDate == null
                                       && EntityFunctions.TruncateTime(chkdoc.CreatedDate) == currentdate
                                       select chkdoc.Id
                            ).Distinct().FirstOrDefault();
                            if (object.Equals(res, null) || res == 0)
                            {
                                if (((currentdate.Date - item.receiver.CompletedDate.Value.Date).Days / 30) == Convert.ToInt32(item.sender.Retake, CultureInfo.InvariantCulture))
                                {
                                    //insett new record for retake
                                    DP_ReqDocReceiver objDP_ReqDocReceiver = new DP_ReqDocReceiver()
                                    {
                                        ReqDocId = item.sender.Id,
                                        CompanyId = item.receiver.CompanyId,
                                        UserId = item.receiver.UserId,
                                        IsCompleted = 2,
                                        IsMailSend = true,
                                        CreatedDate = currentdate,
                                        CreatedBy = item.sender.UserId,
                                        IsActive = true
                                    };
                                    objDecisionPointEntities.DP_ReqDocReceiver.Add(objDP_ReqDocReceiver);
                                }
                            }
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for insert the document mail sending log
        /// </summary>
        /// <param name="lstreceipentUserID">lstreceipentUserID</param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>16 July 2014</createddate>
        public int DocumentMailSndLog(MailMatrixResponseParam objMailMatrixResponseParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //insert mail sending log in database
                    DP_DocumentMailLog objDP_DocumentMailLog = new DP_DocumentMailLog()
                    {
                        DocId = objMailMatrixResponseParam.DocId,
                        SenderId = objMailMatrixResponseParam.SenderId,
                        RecevierId = objMailMatrixResponseParam.RecevierId,
                        RecipientTblId = objMailMatrixResponseParam.TblId,
                        CreatedDate = DateTime.Now.Date,
                        IsmailSend = true
                    };
                    objDecisionPointEntities.DP_DocumentMailLog.Add(objDP_DocumentMailLog);
                    if (!object.Equals(objMailMatrixResponseParam, null))
                    {
                        if (objMailMatrixResponseParam.Type.Equals(0))
                        {
                            //set mail sending true
                            var recipientresult = (from recipient in objDecisionPointEntities.DP_Recipient
                                                   where recipient.Id == objMailMatrixResponseParam.TblId
                                                   select recipient).FirstOrDefault();
                            if (!object.Equals(recipientresult, null))
                            {
                                recipientresult.IsmailSend = true;
                            }
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
            finally
            {

            }
        }

        /// <summary>
        /// Check Mail send to user or not
        /// </summary>
        /// <param name="lstreceipentUserID">lstreceipentUserID</param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>16 July 2014</createddate>
        public bool CheckDocumentMailSentOrNotToUser(MailMatrixResponseParam objMailMatrixResponseParam)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    DateTime currentDate = DateTime.Today;
                    var res = (from docmail in objDecisionPointEntities.DP_DocumentMailLog
                               where docmail.DocId == objMailMatrixResponseParam.DocId && docmail.RecevierId == objMailMatrixResponseParam.RecevierId
                               && docmail.RecipientTblId == objMailMatrixResponseParam.TblId && docmail.SenderId == objMailMatrixResponseParam.SenderId
                               && EntityFunctions.TruncateTime(docmail.CreatedDate) == currentDate
                               select docmail.Id).ToList();
                    if (!object.Equals(res, null) && res.Count > 0)
                    {
                        return true;
                    }
                    else { return false; }


                }
            }
            catch
            {

                throw;
            }
        }


        #endregion

        #region Super Admin
        /// <summary>
        /// method to get super admin login
        /// </summary>
        /// <param name="objSuperAdmin">SuperAdmin</param>
        /// <returns>int</returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>feb 4 2014</createdDate>
        public string SuperAdminLogin(SuperAdminResponseParam objSuperAdmin)
        {
            string respose = "0";
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var login = objDecisionPointEntities.DP_SuperAdminLogin.Where(x => x.EmailId == objSuperAdmin.UserID && x.password == objSuperAdmin.Password).Select(s => new { s }).FirstOrDefault();
                    if (login != null)
                    {
                        respose = login.s.companyId;
                    }
                }
                return respose;
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {

            }
        }

        /// <summary>
        /// Get list of companies
        /// </summary>      
        /// <returns>GetCompanies</returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>Feb 4 2014</createdDate>
        public List<GetCompaniesParam> GetCompanyList(bool isActive, string searh)
        {
            List<GetCompaniesParam> lstGetCompanies = new List<GetCompaniesParam>();
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (string.IsNullOrEmpty(searh))
                    {
                        lstGetCompanies = (from user in objDecisionPointEntities.DP_User
                                           join profile in objDecisionPointEntities.DP_Profile
                                           on user.Id equals profile.UserId
                                           where user.IsDeleted == false && user.IsActive == isActive && (profile.UserType == Shared.IC || profile.UserType == Shared.Company)

                                           select new GetCompaniesParam
                                           {
                                               BusniessID = user.CompanyId,
                                               BusniessName = profile.BusinessName,
                                               Address = profile.Address,
                                               UserName = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                               UserId = profile.UserId,

                                               UserType = profile.UserType,
                                               Phone = profile.OfficePhone == null ? string.Empty : profile.OfficePhone,
                                               InvitationStatus = (bool)(user.IsRegistered == null ? false : user.IsRegistered),
                                               InvitationDate = user.CreatedDate

                                           }).Distinct().OrderBy(x => x.InvitationStatus).ToList();
                    }
                    else
                    {
                        lstGetCompanies = (from user in objDecisionPointEntities.DP_User
                                           join profile in objDecisionPointEntities.DP_Profile
                                           on user.Id equals profile.UserId

                                           where user.IsDeleted == false && (profile.UserType == Shared.IC || profile.UserType == Shared.Company) && user.IsActive == true

                                           select new GetCompaniesParam
                                           {
                                               BusniessID = user.CompanyId,
                                               BusniessName = profile.BusinessName,
                                               Address = profile.Address,
                                               UserName = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                               UserId = profile.UserId,

                                               UserType = profile.UserType,
                                               InvitationStatus = (bool)(user.IsRegistered == null ? false : user.IsRegistered),
                                               InvitationDate = user.CreatedDate
                                           }).Distinct().Where(x => (x.UserName.StartsWith(searh) || x.BusniessName.StartsWith(searh) || x.UserType.StartsWith(searh))).OrderBy(x => x.InvitationStatus).ToList();

                    }
                }
                return lstGetCompanies;
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// method to get login detail
        /// </summary>
        /// <param name="companyID">string</param>
        /// <param name="businessName">string</param>
        /// <returns>LoginCredentailResponseParam</returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>Feb 10 2014</createdDate>
        public SuperAdminResponseParam LoginDetail(string userID, string businessName)
        {
            SuperAdminResponseParam objLoginCredentailResponseParam = new SuperAdminResponseParam();
            int userId = Convert.ToInt32(userID, CultureInfo.InvariantCulture);
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //if (!string.IsNullOrEmpty(businessName) && businessName.Equals(Shared.userview))
                    //{
                    objLoginCredentailResponseParam = objDecisionPointEntities.DP_Profile
                                              .Join(objDecisionPointEntities.DP_User.Where(x => x.Id == userId), profile => profile.UserId, user => user.Id, (profile, user) => new SuperAdminResponseParam { UserID = user.UserId, Password = user.Password }).FirstOrDefault();
                    // }
                    //else
                    //{
                    //    objLoginCredentailResponseParam = objDecisionPointEntities.DP_Profile.Join(objDecisionPointEntities.DP_User.Where(x => x.Id == userId), profile => profile.UserId, user => user.Id, (profile, user) => new SuperAdminResponseParam { UserID = user.UserId, Password = user.Password }).FirstOrDefault();
                    //}
                }

                return objLoginCredentailResponseParam;
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
            }
        }


        #region Fee Structure
        /// <summary>
        /// Get company profile and fee detail
        /// </summary>
        /// <param name="userID">int</param>
        /// <param name="CompanyName">string</param>
        /// <returns>UserDashBoardResponseParam</returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>12 jan 2014</createdDate>
        public UserDashBoardResponseParam GetFeeDetail(int userID, string companyID)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var response = (from user in objDecisionPointEntities.DP_User
                                    join profile in objDecisionPointEntities.DP_Profile
                                    on user.Id equals profile.UserId
                                    where user.Id == userID
                                    select new UserDashBoardResponseParam
                                    {
                                        companyName = profile.BusinessName,
                                        fName = profile.Firstname,
                                        lName = profile.LastName,
                                        mName = profile.MiddelName,
                                        officePhone = profile.OfficePhone,
                                        directPhone = profile.Phone,
                                        emailId = user.EmailId,
                                        UserType = profile.UserType
                                    }).FirstOrDefault();

                    var feedetaisl = (from fee in objDecisionPointEntities.DP_PayementMaster
                                      where fee.CompanyCode == companyID
                                      select fee).FirstOrDefault();
                    if (feedetaisl != null)
                    {
                        response.CompanyFee = feedetaisl.CompanyFee;
                        response.PerOfficeStaffFee = feedetaisl.PerOfficestaffFee;
                        response.PerFieldStaffFee = feedetaisl.PerFieldstaffFee;
                        response.PerICFee = feedetaisl.PerICFee;
                        response.IsInvoice = feedetaisl.IsInvoice;
                    }
                    else
                    {
                        var defaultfee = GetDefaultFeeDetail();
                        if (defaultfee != null)
                        {
                            response.CompanyFee = defaultfee.CompanyFee;
                            response.PerOfficeStaffFee = defaultfee.PerOfficeStaffFee;
                            response.PerFieldStaffFee = defaultfee.PerFieldStaffFee;
                            response.PerICFee = defaultfee.PerICFee;
                            response.IsInvoice = defaultfee.IsInvoice;
                        }
                    }
                    return response;
                }

            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
            }
        }

        /// <summary>
        /// Set fee detail
        /// </summary>
        /// <param name="objUserDashBoardRequestParam">objUserDashBoardRequestParam</param>
        /// <returns>byte</returns>
        /// <createdBy>Nielsh Dubey</createdBy>
        /// <createdDate>Feb 13 2014</createdDate>
        public byte SetFeeDetail(UserDashBoardRequestParam objUserDashBoardRequestParam)
        {
            byte result = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = objDecisionPointEntities.DP_PayementMaster.Where(x => x.CompanyCode == objUserDashBoardRequestParam.CompanyCode).Select(x => new { x }).FirstOrDefault();
                    if (query != null)
                    {
                        query.x.PerFieldstaffFee = objUserDashBoardRequestParam.PerFieldStaffFee;
                        query.x.PerOfficestaffFee = objUserDashBoardRequestParam.PerOfficeStaffFee;
                        query.x.PerICFee = objUserDashBoardRequestParam.PerICFee;
                        query.x.IsInvoice = objUserDashBoardRequestParam.IsInvoice;
                        query.x.CompanyFee = objUserDashBoardRequestParam.CompanyFee;
                        objDecisionPointEntities.SaveChanges();
                        result = 2;
                    }
                    else
                    {
                        DP_PayementMaster objDP_PayementMaster = new DP_PayementMaster()
                        {
                            PerFieldstaffFee = objUserDashBoardRequestParam.PerFieldStaffFee,
                            PerOfficestaffFee = objUserDashBoardRequestParam.PerOfficeStaffFee,
                            CompanyFee = objUserDashBoardRequestParam.CompanyFee,
                            PerICFee = objUserDashBoardRequestParam.PerICFee,
                            CompanyCode = objUserDashBoardRequestParam.CompanyCode,
                            IsInvoice = objUserDashBoardRequestParam.IsInvoice
                        };
                        objDecisionPointEntities.DP_PayementMaster.Add(objDP_PayementMaster);
                        objDecisionPointEntities.SaveChanges();
                        result = 1;
                    }
                }
                return result;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
            }
        }

        /// <summary>
        /// Set fee detail
        /// </summary>
        /// <param name="objUserDashBoardRequestParam">objUserDashBoardRequestParam</param>
        /// <returns>byte</returns>
        /// <createdBy>Sumit Saurav</createdBy>
        /// <createdDate>Feb 25
        /// 2014</createdDate>
        public byte SetDefaultFeeDetail(UserDashBoardRequestParam objUserDashBoardRequestParam)
        {
            byte result = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = objDecisionPointEntities.DP_DefaultPaymentMaster.Where(x => x.IsActive == true).Select(x => new { x }).FirstOrDefault();
                    if (query != null)
                    {
                        query.x.IsActive = false;
                        objDecisionPointEntities.SaveChanges();
                        result = 2;
                    }
                    DP_DefaultPaymentMaster objDP_PayementMaster = new DP_DefaultPaymentMaster()
                    {
                        PerFieldStaffFee = objUserDashBoardRequestParam.PerFieldStaffFee,
                        PerOfficeStaffFee = objUserDashBoardRequestParam.PerOfficeStaffFee,
                        CompanyFee = objUserDashBoardRequestParam.CompanyFee,
                        PerIcFee = objUserDashBoardRequestParam.PerICFee,
                        IsActive = true,
                        CreateDate = System.DateTime.Now,
                        IsInvoice = objUserDashBoardRequestParam.IsInvoice
                    };
                    objDecisionPointEntities.DP_DefaultPaymentMaster.Add(objDP_PayementMaster);
                    objDecisionPointEntities.SaveChanges();
                    result = 1;
                }
                return result;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
            }
        }

        /// <summary>
        /// Get fee detail
        /// </summary>        
        /// <returns>UserDashBoardResponseParam</returns>
        /// <createdBy>Sumit Saurav</createdBy>
        /// <createdDate>25 feb 2014</createdDate>
        public UserDashBoardResponseParam GetDefaultFeeDetail()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var response = (from defaultPayment in objDecisionPointEntities.DP_DefaultPaymentMaster
                                    where defaultPayment.IsActive == true
                                    select new UserDashBoardResponseParam
                                    {
                                        CompanyFee = (defaultPayment.CompanyFee == null ? 0 : defaultPayment.CompanyFee),
                                        PerOfficeStaffFee = (defaultPayment.PerOfficeStaffFee == null ? 0 : defaultPayment.PerOfficeStaffFee),
                                        PerFieldStaffFee = (defaultPayment.PerFieldStaffFee == null ? 0 : defaultPayment.PerFieldStaffFee),
                                        PerICFee = (defaultPayment.PerIcFee == null ? 0 : defaultPayment.PerIcFee),
                                        IsInvoice = (bool)(defaultPayment.IsInvoice == null ? false : defaultPayment.IsInvoice),
                                        LastUpdatedDate = defaultPayment.CreateDate

                                    }).FirstOrDefault();

                    return response;
                }

            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
            }
        }
        #endregion

        #endregion

        #region Invite
        /// <summary>
        /// get company Id
        /// </summary>
        /// <createdby>Mamta Gupta</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>get company Id</returns>
        public IEnumerable<InviteResponseParam> GetInviteDetails(int UserId, string companyId)
        {
            IEnumerable<InviteResponseParam> finalquery = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    GetSentInvitedToCompanies(UserId, companyId);

                    finalquery = GetReceivedInvitesForInviteList(UserId, companyId).Union(GetSentInvitedToICs(UserId, companyId)).Union(GetSentInvitedToCompanies(UserId, companyId));
                    return finalquery;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// used for get the invited company deatils for invite list view
        /// </summary>
        /// <param name="UserId"></param>
        /// <param name="companyId"></param>
        /// <returns></returns>
        private IEnumerable<InviteResponseParam> GetSentInvitedToCompanies(int UserId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    #region Sent Invites
                    //get the sended invite details
                    var invitedCompanyDetails = (from user in objDecisionPointEntities.DP_User
                                                 join profile in objDecisionPointEntities.DP_Profile
                                                 on user.Id equals profile.UserId
                                                 join mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                 on profile.UserId equals mapping.VendorId
                                                 join flow in objDecisionPointEntities.DP_FlowMapping
                                                 on new { a = mapping.CreatedBy, b = mapping.CompanyId, c = mapping.VendorId } equals new { a = flow.CreatedBy, b = flow.CreatedCompanyId, c = flow.UserId }
                                                 //on mapping.VendorId equals flow.UserId
                                                 join flowmapping in objDecisionPointEntities.DP_FlowMaster
                                                 on flow.FlowId equals flowmapping.Id
                                                 join docflow in objDecisionPointEntities.DP_DocFlowMapping
                                                 on new { a = mapping.CreatedBy, b = mapping.CompanyId, c = (int)mapping.VendorId } equals new { a = docflow.CreatedBy, b = docflow.CreatedCompanyId, c = docflow.UserId }
                                                 //on mapping.VendorId equals docflow.UserId
                                                 join docflowmapping in objDecisionPointEntities.DP_DocFlow
                                                 on docflow.DocFlowId equals docflowmapping.Id
                                                 where mapping.CompanyId == companyId && profile.UserType == Shared.Company
                                                 select new InviteResponseParam
                                                 {
                                                     Date = mapping.CreatedDate,
                                                     CompanyName = profile.BusinessName,
                                                     Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                     EmailId = user.EmailId,
                                                     Status = mapping.Status,
                                                     Phone = profile.CellNumber,
                                                     RelationShip = flowmapping.Flow,
                                                     UserId = user.Id,
                                                     CompanyId = mapping.CompanyId,
                                                     TableId = mapping.Id,
                                                     FlowTableId = docflow.Id,
                                                     DocFlow = docflowmapping.DocFlow,
                                                     Type = mapping.Status != 0 ? (mapping.Status != 1 ? (mapping.Status != 2 ? string.Empty : Shared.DenyO) : Shared.AccecptedO) : Shared.PendingO,
                                                     UserType = profile.UserType,
                                                     Isdeleted = (int)(mapping.IsDeleted == null ? 0 : mapping.IsDeleted)
                                                 }).Distinct().OrderBy(x => x.Type).ToList();
                    return invitedCompanyDetails;
                    #endregion
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// used for get the invited IC deatils for invite list view
        /// </summary>
        /// <param name="UserId"></param>
        /// <param name="companyId"></param>
        /// <returns></returns>
        private IEnumerable<InviteResponseParam> GetSentInvitedToICs(int UserId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    #region Sent Invites
                    //get the sended invite details
                    var invitedICDetails = (from user in objDecisionPointEntities.DP_User
                                            join profile in objDecisionPointEntities.DP_Profile
                                            on user.Id equals profile.UserId
                                            join mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                            on profile.UserId equals mapping.VendorId
                                            join flow in objDecisionPointEntities.DP_FlowMapping
                                               on new { a = mapping.CreatedBy, b = mapping.CompanyId, c = mapping.VendorId } equals new { a = flow.CreatedBy, b = flow.CreatedCompanyId, c = flow.UserId }
                                            //on mapping.VendorId equals flow.UserId
                                            join flowmapping in objDecisionPointEntities.DP_FlowMaster
                                            on flow.FlowId equals flowmapping.Id
                                            join docflow in objDecisionPointEntities.DP_DocFlowMapping
                                            on new { a = mapping.CreatedBy, b = mapping.CompanyId, c = (int)mapping.VendorId } equals new { a = docflow.CreatedBy, b = docflow.CreatedCompanyId, c = docflow.UserId }
                                            //on mapping.VendorId equals docflow.UserId
                                            join docflowmapping in objDecisionPointEntities.DP_DocFlow
                                            on docflow.DocFlowId equals docflowmapping.Id
                                            join vendormap in objDecisionPointEntities.DP_VendorTypeMapping
                                            on new { a = mapping.CreatedBy, b = mapping.CompanyId, c = (int)mapping.VendorId } equals new { a = vendormap.CreatedBy, b = vendormap.CreaterCompanyId, c = vendormap.UserId }
                                           into VM
                                            from FVM in VM.DefaultIfEmpty()
                                            //on mapping.VendorId equals docflow.UserId
                                            join vendrmapmaster in objDecisionPointEntities.DP_VendorType
                                            on FVM.VendorTypeId equals vendrmapmaster.Id
                                            into VMaster
                                            from FVMaster in VMaster.DefaultIfEmpty()
                                            where mapping.CompanyId == companyId && profile.UserType == Shared.IC
                                            select new InviteResponseParam
                                            {
                                                Date = mapping.CreatedDate,
                                                CompanyName = profile.BusinessName,
                                                Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                EmailId = user.EmailId,
                                                Status = mapping.Status,
                                                Phone = profile.CellNumber,
                                                RelationShip = FVMaster.VendorType,
                                                UserId = user.Id,
                                                CompanyId = mapping.CompanyId,
                                                TableId = mapping.Id,
                                                FlowTableId = docflow.Id,
                                                DocFlow = docflowmapping.DocFlow,
                                                Type = mapping.Status != 0 ? (mapping.Status != 1 ? (mapping.Status != 2 ? string.Empty : Shared.DenyO) : Shared.AccecptedO) : Shared.PendingO,
                                                UserType = profile.UserType,
                                                Isdeleted = (int)(mapping.IsDeleted == null ? 0 : mapping.IsDeleted)
                                            }).Distinct().OrderBy(x => x.Type).ToList();
                    return invitedICDetails;
                    #endregion
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// used for get the incoming invite details for invite list view
        /// </summary>
        /// <param name="UserId"></param>
        /// <param name="companyId"></param>
        /// <returns></returns>
        private IEnumerable<InviteResponseParam> GetReceivedInvitesForInviteList(int UserId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    #region Received Invites
                    //get the received invite details
                    var receivedInviteDetails = (from user in objDecisionPointEntities.DP_User
                                                 join profile in objDecisionPointEntities.DP_Profile
                                                 on user.Id equals profile.UserId
                                                 join mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                 on profile.UserId equals mapping.CreatedBy
                                                 join flow in objDecisionPointEntities.DP_FlowMapping
                                                  on new { a = mapping.CreatedBy, b = mapping.CompanyId, c = mapping.VendorId } equals
                                                  new { a = flow.CreatedBy, b = flow.CreatedCompanyId, c = flow.UserId }
                                                 //on mapping.VendorId equals flow.UserId
                                                 join flowmapping in objDecisionPointEntities.DP_FlowMaster
                                                 on flow.FlowId equals flowmapping.Id
                                                 join docflow in objDecisionPointEntities.DP_DocFlowMapping
                                                 on new { a = mapping.CreatedBy, b = mapping.CompanyId, c = (int)mapping.VendorId } equals new { a = docflow.CreatedBy, b = docflow.CreatedCompanyId, c = docflow.UserId }
                                                 //on mapping.VendorId equals docflow.UserId
                                                 join docflowmapping in objDecisionPointEntities.DP_DocFlow
                                                 on docflow.DocFlowId equals docflowmapping.Id
                                                 where mapping.VendorId == UserId
                                                 select new InviteResponseParam
                                                 {
                                                     Date = mapping.CreatedDate,
                                                     CompanyName = profile.BusinessName,
                                                     Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                     EmailId = user.EmailId,
                                                     Status = mapping.Status,
                                                     Phone = profile.CellNumber,
                                                     RelationShip = flowmapping.Flow,// == Shared.Vendor ? Shared.Client : (flowmapping.Flow == Shared.Client ? Shared.Vendor : flowmapping.Flow),
                                                     UserId = user.Id,
                                                     CompanyId = mapping.CompanyId,
                                                     TableId = mapping.Id,
                                                     FlowTableId = docflow.Id,
                                                     DocFlow = docflowmapping.DocFlow,
                                                     Type = mapping.Status != 0 ? (mapping.Status != 1 ? (mapping.Status != 2 ? string.Empty : Shared.DenyI) : Shared.AccecptedI) : Shared.ReceivedI,
                                                     UserType = profile.UserType,
                                                     Isdeleted = (int)(mapping.IsDeleted == null ? 0 : mapping.IsDeleted)
                                                 }).Distinct().OrderBy(x => x.Type).ToList();
                    return receivedInviteDetails;
                    #endregion
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get company Id
        /// </summary>
        /// <createdby>Bobi s</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>get company Id</returns>
        public IEnumerable<InviteResponseParam> GetICInvite(int UserId)
        {
            IEnumerable<InviteResponseParam> query = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var companyVendorDetails = (from user in objDecisionPointEntities.DP_User
                                                join profile in objDecisionPointEntities.DP_Profile
                                                on user.Id equals profile.UserId
                                                join mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                on profile.UserId equals mapping.CreatedBy
                                                join flow in objDecisionPointEntities.DP_FlowMapping
                                                   on new { a = mapping.CreatedBy, b = mapping.CompanyId, c = mapping.VendorId } equals new { a = flow.CreatedBy, b = flow.CreatedCompanyId, c = flow.UserId }
                                                join flowmapping in objDecisionPointEntities.DP_FlowMaster
                                                 on flow.FlowId equals flowmapping.Id
                                                join docflow in objDecisionPointEntities.DP_DocFlowMapping
                                               on new { a = mapping.CreatedBy, b = mapping.CompanyId, c = (int)mapping.VendorId } equals new { a = docflow.CreatedBy, b = docflow.CreatedCompanyId, c = docflow.UserId }
                                                join docflowmapping in objDecisionPointEntities.DP_DocFlow
                                                on docflow.DocFlowId equals docflowmapping.Id
                                                where mapping.VendorId == UserId
                                                select new InviteResponseParam
                                                {
                                                    Date = mapping.LastInvitationDate,
                                                    CompanyName = profile.BusinessName,
                                                    Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                    EmailId = user.EmailId,
                                                    Status = mapping.Status,
                                                    Phone = profile.CellNumber,
                                                    RelationShip = flowmapping.Flow,
                                                    UserId = user.Id,
                                                    CompanyId = mapping.CompanyId,
                                                    TableId = mapping.Id,
                                                    FlowTableId = docflow.Id,
                                                    DocFlow = docflowmapping.DocFlow,
                                                    Type = mapping.Status != 0 ? (mapping.Status != 1 ? (mapping.Status != 2 ? string.Empty : Shared.DenyI) : Shared.AccecptedI) : Shared.ReceivedI,
                                                    UserType = profile.UserType,
                                                    Isdeleted = (int)(mapping.IsDeleted == null ? 0 : mapping.IsDeleted)
                                                }).Distinct().OrderBy(x => x.Type).ToList();
                    /*Get Invited Non clients Details By IC : Status 0 for IC Non Client not Visited and not accecpted the IC profile 
                     and Status 1 for IC Non Client Visited and accecpted the IC profile*/
                    var nonClientDetails = (from user in objDecisionPointEntities.DP_User
                                            join profile in objDecisionPointEntities.DP_Profile
                                            on user.Id equals profile.UserId
                                            join mapping in objDecisionPointEntities.DP_ICNonClientsMapping
                                            on profile.UserId equals mapping.InvitedUserId
                                            where mapping.InviteeUserId == UserId
                                            select new InviteResponseParam
                                            {
                                                Date = mapping.LastInvitationDate,
                                                CompanyName = profile.BusinessName,
                                                Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                EmailId = user.EmailId,
                                                Phone = profile.OfficePhone,
                                                UserId = user.Id,
                                                CompanyId = mapping.InvitedCompanyId,
                                                TableId = mapping.Id,
                                                Type = (mapping.Invitationstatus && mapping.Status == 0) ? Shared.ReceivedO : ((mapping.Invitationstatus && mapping.Status == 1) ? Shared.AccecptedO : Shared.PendingO),
                                                UserType = profile.UserType,
                                                IsActive = mapping.IsActive,
                                                DocFlow = Shared.SingleDash,
                                                RelationShip = Shared.NonClient,
                                                Isdeleted = mapping.IsActive ? 1 : 2
                                            }).Distinct().OrderBy(x => x.Type).ToList();
                    query = companyVendorDetails.Union(nonClientDetails).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// InvitaionOperation
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="type">type</param>
        /// <createdby>Mamta Gupta</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>int</returns>
        public int InvitaionOperation(int id, int type)
        {
            try
            {
                //0 for received and pending and 1 for accecpted and 2 for deny and 3 for removed and 4 for resend and update status to 0(recevied)
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //accepted
                    if (type.Equals(1))
                    {
                        var query = (from mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     where mapping.Id == id
                                     select mapping).FirstOrDefault();
                        if (query != null)
                        {
                            query.Status = 1;
                            query.Invitationstatus = true;
                            query.IsDeleted = 1;
                        }
                    }
                    //deny
                    else if (type.Equals(2))
                    {
                        var query = (from mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     where mapping.Id == id
                                     select mapping).FirstOrDefault();
                        if (query != null)
                        {
                            query.Status = 2;
                            query.IsDeleted = 1;

                        }
                    }
                    //Removed
                    else if (type.Equals(3))
                    {
                        var query = (from mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     where mapping.Id == id
                                     select mapping).FirstOrDefault();
                        if (query != null)
                        {
                            query.IsDeleted = 2;
                        }
                    }
                    //resend
                    else if (type.Equals(4))
                    {
                        var query = (from mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     where mapping.Id == id
                                     select mapping).FirstOrDefault();
                        if (query != null)
                        {
                            query.Status = 0;
                        }
                    }
                    //archived
                    else if (type.Equals(5))
                    {
                        var query = (from mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     where mapping.Id == id
                                     select mapping).FirstOrDefault();
                        if (query != null)
                        {
                            query.IsDeleted = 2;
                        }
                    }
                    //archived from Ic Invite page
                    else if (type.Equals(6))
                    {
                        var query = (from mapping in objDecisionPointEntities.DP_ICNonClientsMapping
                                     where mapping.Id == id
                                     select mapping).FirstOrDefault();
                        if (query != null)
                        {
                            query.IsActive = false;

                        }
                    }

                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// used to update flow
        /// </summary>
        /// <param name="UniqueId">UniqueId</param>
        /// <param name="flowId">flowId</param>
        /// <createdby>Mamta Gupta</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>int</returns>
        public int UpdateFlow(int UniqueId, int flowId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from mapping in objDecisionPointEntities.DP_DocFlowMapping
                                 where mapping.Id == UniqueId
                                 select mapping).FirstOrDefault();
                    if (query != null)
                    {
                        query.DocFlowId = flowId;
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// used to update doc flow
        /// </summary>
        /// <param name="UniqueId">UniqueId</param>
        /// <param name="flowId">flowId</param>
        /// <createdby>Mamta Gupta</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>int</returns>
        public int UpdateDocFlow(UserDashBoardRequestParam objUserDashBoardRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from mapping in objDecisionPointEntities.DP_DocFlowMapping
                                 where mapping.Id == objUserDashBoardRequestParam.FlowTblId
                                 select mapping).FirstOrDefault();

                    if (query != null)
                    {
                        query.DocFlowId = objUserDashBoardRequestParam.FlowId;
                    }
                    var updaterecord = (from user in objDecisionPointEntities.DP_User
                                        join profile in objDecisionPointEntities.DP_Profile
                                        on user.Id equals profile.UserId
                                        where user.Id == objUserDashBoardRequestParam.UserId
                                        select new { profile, user }).Distinct().FirstOrDefault();

                    if (!object.Equals(updaterecord, null))
                    {
                        updaterecord.user.EmailId = objUserDashBoardRequestParam.emailId;
                        updaterecord.profile.CellNumber = objUserDashBoardRequestParam.directPhone;
                        updaterecord.profile.BusinessName = objUserDashBoardRequestParam.companyName;
                        updaterecord.profile.Firstname = objUserDashBoardRequestParam.fName;
                        updaterecord.profile.LastName = objUserDashBoardRequestParam.lName;
                    }

                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region IC client List
        /// <summary>
        /// method to get vendor list
        /// </summary>
        /// <param name="companyUserID"></param>
        /// <returns></returns>
        /// <createdBy>Nilesh Dubey</createdBy>
        /// <createdDate>30 Dec 2013</createdDate>
        public IEnumerable<VendorClientList> GetICClientList(int ID, bool type)
        {
            //string companyid = string.Empty;
            IEnumerable<VendorClientList> lstInternalstaffResponseParam = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //if (gettype.Equals("0"))
                    //{
                    var query = (from vendor in objDecisionPointEntities.DP_ComapnyVendorMapping
                                 join user in objDecisionPointEntities.DP_User
                                 on vendor.CompanyId equals user.CompanyId
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.IsActive == true && vendor.IsActive == type && (profile.UserType.Trim() == Shared.Company.Trim() || profile.UserType.Trim() == Shared.SuperAdmin)
                                 && vendor.VendorId == ID && vendor.Invitationstatus == true && vendor.Status == 1 && user.IsRegistered == true
                                 select new VendorClientList
                                 {
                                     Vendor = profile.BusinessName,
                                     Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                     emailId = user.EmailId,
                                     phone = profile.CellNumber,
                                     Id = user.Id,
                                     DocFTblId = vendor.Id,
                                     companyId = vendor.CompanyId
                                 }).Distinct().ToList().OrderBy(x => x.Contact);
                    lstInternalstaffResponseParam = query;
                    // }
                    //else
                    //{
                    //    var query = (from vendor in objDecisionPointEntities.DP_ComapnyVendorMapping
                    //                 join user in objDecisionPointEntities.DP_User
                    //                 on vendor.CompanyId equals user.CompanyId
                    //                 join profile in objDecisionPointEntities.DP_Profile
                    //                 on user.Id equals profile.UserId
                    //                 where user.IsActive == type && (profile.UserType.Trim() == Shared.Company.Trim() || profile.UserType.Trim() == Shared.SuperAdmin)
                    //                 && vendor.VendorId == ID
                    //                 select new VendorClientList
                    //                 {
                    //                     Vendor = profile.BusinessName,
                    //                     Contact = profile.Firstname +" "+ profile.LastName,
                    //                     emailId = user.EmailId,
                    //                     phone = profile.CellNumber,
                    //                     Id = user.Id,
                    //                     companyId = vendor.CompanyId,
                    //                     DocFTblId = vendor.Id
                    //                 }).Distinct().ToList().OrderBy(x => x.Contact);
                    //    lstInternalstaffResponseParam = query;
                    //}
                    return lstInternalstaffResponseParam;
                }
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {

            }
        }


        #endregion

        #region Guide Instructions
        /// <summary>
        /// used to save instruction
        /// </summary>
        /// <param name="Id">Id</param>
        /// <param name="instruction">instruction</param>
        /// <createdby>Mamta Gupta</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>int</returns>
        public int SaveInstructions(int Id, string instruction)
        {
            bool IsDeleted;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from q in objDecisionPointEntities.DP_GuideInstructions
                                 where q.Id == Id
                                 select q).FirstOrDefault();

                    if (query != null)
                    {
                        if (Id == 1)
                        {
                            var publishsave = (from rs in objDecisionPointEntities.DP_GuideInstructions
                                               select rs);
                            foreach (var item in publishsave)
                            {
                                item.Instructions = instruction;
                                item.UpdatedDate = DateTime.Now.Date;
                            }


                        }
                        else
                        {
                            query.UpdatedDate = DateTime.Now.Date;
                            query.Instructions = instruction;
                        }

                    }
                    else
                    {
                        if (Id == 1)
                        {
                            IsDeleted = false;
                        }
                        else
                        {
                            IsDeleted = true;
                        }

                        DP_GuideInstructions objnewIns = new DP_GuideInstructions
                        {
                            Instructions = instruction,
                            CreatedDate = DateTime.Now.Date,
                            IsDeleted = IsDeleted
                        };

                        objDecisionPointEntities.DP_GuideInstructions.Add(objnewIns);

                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// used to get instruction
        /// </summary>
        /// <createdby>Mamta Gupta</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns><IEnumerable/returns>
        public IEnumerable<GuideInstructionParam> GetGuideInstruction()
        {
            try
            {
                IEnumerable<GuideInstructionParam> objGuide = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    objGuide = (from res in objDecisionPointEntities.DP_GuideInstructions
                                select new GuideInstructionParam
                                {
                                    Id = res.Id,
                                    Instruction = res.Instructions,
                                    IsActive = (bool)res.IsDeleted
                                }).ToList();

                }
                return objGuide;
            }
            catch
            {
                throw;
            }
        }
        #endregion
        /// <summary>
        /// used to get state & cirt by zip code
        /// </summary>
        /// <param name="zip">zip</param>
        /// <createdby>Sumit</createdby>
        /// <createddate>1 may 2014</createddate>
        /// <returns>List</returns>
        public IList<ZipResponseParam> getStateCityByZip(string zip)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from res in objDecisionPointEntities.DP_ZipCode
                                 join state in objDecisionPointEntities.DP_State
                                 on res.StateAbbre equals (state.StateAbbre)
                                 where res.Zip == zip
                                 select new ZipResponseParam
                                 {
                                     ZipId = res.Id,
                                     StateAbbre = res.StateAbbre,
                                     CityName = res.City,
                                     ZipCode = res.Zip,
                                     StateName = state.State,
                                 }).ToList();
                    return query;
                }

            }
            catch
            {
                throw;
            }
        }
        #endregion

        /// <summary>
        /// get paymnent status of a user
        /// </summary>
        /// <param name="userId">user id</param>
        ///<createdby>sumit saurav</createdby>
        /// <createddate>21/5/2014</createddate>
        /// <returns> bool type result</returns>
        public bool getPaymentStatus(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from res in objDecisionPointEntities.DP_Profile
                                 where res.UserId == userId
                                 select (bool)(res.IsPayment == null ? false : res.IsPayment)).FirstOrDefault();
                    return query;
                }

            }
            catch
            {
                throw;
            }
        }


        #region Recurring Payment By Sumit Saurav
        /// <summary>
        /// get staff ids of a company
        /// </summary>
        /// <param name="companyId">company id </param>
        /// <createdby>Sumit saurav</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>list of staff</returns>
        public IList<int> GetAllStaff(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    int lastMonth = System.DateTime.Now.AddMonths(-1).Month;
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join staffMap in objDecisionPointEntities.DP_CompanyStaffMapping
                                 on user.CompanyId equals staffMap.CompanyId
                                 where (staffMap.CompanyId == companyId && staffMap.Invitationstatus == true && staffMap.Status == 1 && staffMap.IsActive == true) || (staffMap.IsActive == false && staffMap.StatusChangedate.Value.Month == lastMonth)
                                 select ((int)(staffMap.StaffId == null ? 0 : staffMap.StaffId))).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get all business partner
        /// </summary>
        /// <param name="companyId">company id</param>
        ///<createdby>Sumit saurav</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>list of all business partners</returns>
        public IList<int> GetAllBusinessPartners(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    int lastMonth = System.DateTime.Now.AddMonths(-1).Month;
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 join VendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                 on profile.UserId equals VendorMap.VendorId
                                 where (user.CompanyId == companyId && (profile.UserType == Shared.Company) && VendorMap.Invitationstatus == true && VendorMap.Status == 1 && user.IsRegistered == true && VendorMap.IsActive == true) || (VendorMap.IsActive == false && VendorMap.StatusChangedate.Value.Month == lastMonth)
                                 select ((int)(VendorMap.VendorId == null ? 0 : VendorMap.VendorId))).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get all ic with we Pay
        /// </summary>
        /// <param name="companyId">Company Id</param> 
        /// <createdby>Sumit saurav</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>list of ic with we pay</returns>
        public IList<int> GetAllWePayIc(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    int lastMonth = System.DateTime.Now.AddMonths(-1).Month;
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 join VendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                 on profile.UserId equals VendorMap.VendorId
                                 where (user.CompanyId == companyId && (profile.UserType == Shared.IC) && VendorMap.Invitationstatus == true && VendorMap.Status == 1 && VendorMap.PaymentType == 1 && user.IsRegistered == true && VendorMap.IsActive == true)
                                 || (VendorMap.IsActive == false && VendorMap.StatusChangedate.Value.Month == lastMonth)
                                 select ((int)(VendorMap.VendorId == null ? 0 : VendorMap.VendorId))).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get all ic with They Pay
        /// </summary>
        /// <param name="companyId">Company Id</param> 
        /// <createdby>Sumit saurav</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>list of ic with They pay</returns>
        public IList<int> GetAllTheyPayIc(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    int lastMonth = System.DateTime.Now.AddMonths(-1).Month;
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 join VendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                 on profile.UserId equals VendorMap.VendorId
                                 where (user.CompanyId == companyId && (profile.UserType == Shared.IC) && VendorMap.Invitationstatus == true && VendorMap.Status == 1 && VendorMap.PaymentType == 2 && user.IsRegistered == true && VendorMap.IsActive == true)
                                 || (VendorMap.IsActive == false && VendorMap.StatusChangedate.Value.Month == lastMonth)
                                 select ((int)(VendorMap.VendorId == null ? 0 : VendorMap.VendorId))).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// used to get payee company id
        /// </summary>
        /// <createdby>Sumit saurav</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>IList</returns>
        public IList<CompanyIdResponseParam> getAllPayeeCompanyId()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where profile.UserType == Shared.Company && user.IsRegistered == true
                                 select new CompanyIdResponseParam
                                 {
                                     Id = user.Id,
                                     CompanyId = user.CompanyId,
                                     UserId = user.UserId
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// used to get payee IC Company Id
        /// </summary>
        /// <createdby>Sumit saurav</createdby>
        ///  <createdDate>10 Apr 2014</createdDate>
        /// <returns>IList</returns>
        public IList<CompanyIdResponseParam> getAllPayeeIcCompanyId()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 join VendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                 on profile.UserId equals VendorMap.VendorId
                                 where profile.UserType == Shared.IC && VendorMap.Invitationstatus == true && VendorMap.Status == 1 && VendorMap.PaymentType == 2 && user.IsRegistered == true
                                 select new CompanyIdResponseParam
                                 {
                                     Id = user.Id,
                                     CompanyId = user.CompanyId,
                                     UserId = user.UserId
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get Recurring payment plan details
        /// </summary>
        /// <param name="userId">user id</param>
        /// <createdby>Sumit Saurav</createdby>
        /// <createddate>23/5/2014</createddate>
        /// <returns>RecurringPaymentResponseParam</returns>
        public RecurringPaymentResponseParam getPlanDetails(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from recurring in objDecisionPointEntities.DP_RecurringPayment
                                 where recurring.UserId == userId
                                 select new RecurringPaymentResponseParam
                                 {
                                     Id = recurring.Id,
                                     CustomerId = recurring.CustomerId,
                                     Amount = (int)(recurring.Amount == null ? 0 : recurring.Amount),
                                     Remark = recurring.Remark
                                 }).FirstOrDefault();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Make Recurring Payment Transactions
        /// </summary>
        /// <param name="objRecurring">RecurringPaymentResponseParam</param>
        /// <createdby>sumit saurav</createdby>
        /// <createddate>09/july/2014</createddate>
        /// <returns>int type result</returns>
        public int MakeRecurringPaymentTransaction(RecurringPaymentResponseParam objRecurring)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    DP_RecurringPaymentTransaction dP_RecurringPaymentTrans = new DP_RecurringPaymentTransaction
                    {
                        UserId = objRecurring.UserId,
                        CustomerId = objRecurring.CustomerId,
                        Amount = objRecurring.Amount,
                        Remark = objRecurring.Remark,
                        ChargeId = objRecurring.ChargeId,
                        CreatedDate = DateTime.Now,
                        Month = DateTime.Now.Month,
                    };
                    objDecisionPointEntities.DP_RecurringPaymentTransaction.Add(dP_RecurringPaymentTrans);
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// check wether Recurring Payment is Done or not for a month and year
        /// </summary>       
        /// <param name="custId">stripe customer id</param>
        /// <param name="remark">remark for monthly or annual payment</param>
        /// <createdby>Sumit Saurav</createdby>
        /// <createddate>july 10 2014</createddate>
        /// <returns>int</returns>
        public int IsRecurringPaymentDone(string custId, string remark)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from recurring in objDecisionPointEntities.DP_RecurringPaymentTransaction
                                 where recurring.CustomerId == custId && recurring.Month == DateTime.Now.Month && recurring.CreatedDate.Value.Year == DateTime.Now.Year && recurring.Remark == remark
                                 select recurring).ToList();
                    return query.Count();
                }
            }
            catch
            {
                throw;
            }

        }

        /// <summary>
        /// used to get payee company id for annual payment
        /// </summary>
        /// <createdby>Sumit saurav</createdby>
        ///  <createdDate>15 July 2014</createdDate>
        /// <returns>IList</returns>
        public IList<CompanyIdResponseParam> getAllAnnualPaymentCompanyId()
        {
            try
            {

                DateTime currentDt = DateTime.Now.Date;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 join payment in objDecisionPointEntities.DP_CompanyPayment
                                 on user.Id equals payment.CreatedBy
                                 where profile.UserType == Shared.Company && user.IsRegistered == true
                                 && SqlFunctions.DateDiff("DAY", payment.CreateDate, currentDt) == 365
                                 select new CompanyIdResponseParam
                                 {
                                     Id = user.Id,
                                     CompanyId = user.CompanyId,
                                     UserId = user.UserId,

                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// check wether Recurring Payment is Done or not for a month and year
        /// </summary>
        /// <param name="userId">user id of parent company</param>
        /// <param name="remark">remark for monthly or annual payment</param>
        /// <createdby>Sumit Saurav</createdby>
        /// <createddate>july 16 2014</createddate>
        /// <returns>int</returns>
        public bool IsRecurringPaymentDone(int userId, string remark)
        {
            try
            {
                bool result = false;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //get company code of a user
                    var companycode = (from user in objDecisionPointEntities.DP_User
                                       where user.Id == userId
                                       select user.CompanyId).FirstOrDefault();

                    //check is invoice is true or false if true then no need to check its recurring payment.
                    var checkisinvoice = (from paymentmaster in objDecisionPointEntities.DP_PayementMaster
                                          where paymentmaster.CompanyCode == companycode
                                          select paymentmaster.IsInvoice).FirstOrDefault();
                    if (!checkisinvoice)
                    {
                        var queryCheck = (from regPayment in objDecisionPointEntities.DP_CompanyPayment
                                          where regPayment.CreatedBy == userId
                                          select regPayment.CreateDate).FirstOrDefault();
                        if (queryCheck != null)
                        {
                            if (queryCheck.Value.Month == DateTime.Now.Month && queryCheck.Value.Year == DateTime.Now.Year)
                            {
                                return true;
                            }
                            else
                            {
                                var query = (from recurring in objDecisionPointEntities.DP_RecurringPaymentTransaction
                                             where recurring.UserId == userId && recurring.Month == DateTime.Now.Month && recurring.CreatedDate.Value.Year == DateTime.Now.Year && recurring.Remark == remark
                                             select recurring).ToList();
                                result = query.Count() == 0 ? false : true;
                            }
                        }
                        else
                        {
                            result = false;
                        }
                    }
                    else
                    {
                        result = true;
                    }
                    return result;
                }
            }
            catch
            {
                throw;
            }

        }

        /// <summary>
        /// check payment was done or not for checking is invoice true or false at the time of registration
        /// </summary>
        /// <param name="parentUserId">invitee company user id</param>
        /// <param name="userId">created by user id</param>
        /// <returns>int id of payment</returns>
        public int IsRegistrationPaymentDone(string parentUserId, int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from regPayment in objDecisionPointEntities.DP_CompanyPayment
                                 where regPayment.CompanyId == parentUserId && regPayment.CreatedBy == userId
                                 select regPayment.Id).FirstOrDefault();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        #endregion

        #region Emplyement Reqiurment Document
        /// <summary>
        /// Used For get the reqiured documents details by company/individuals
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns>retrun the req documemnt of particular user</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 20 2013</createdDate>
        public IEnumerable<UserDashBoardResponseParam> GetReqiuredDocuments(int UserId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    // entity query for fetch individual reqiured documents record  as per user Id
                    var query = (from reqiureddocuments in objDecisionPointEntities.DP_ReqDocReceiver
                                 join masterreqdoc in objDecisionPointEntities.DP_ReqDocSender
                                 on reqiureddocuments.ReqDocId equals masterreqdoc.Id

                                 join service in objDecisionPointEntities.DP_ServicesMaster
                                 on masterreqdoc.ServiceId equals service.Id into service1
                                 from services in service1.DefaultIfEmpty()

                                 join profile in objDecisionPointEntities.DP_Profile
                                 on masterreqdoc.CreatedBy equals profile.UserId

                                 where reqiureddocuments.UserId == UserId && reqiureddocuments.CompanyId == companyId && reqiureddocuments.IsActive == true
                                 && masterreqdoc.IsDeleted == false && masterreqdoc.IsActive == true && masterreqdoc.DNA == false
                                 select new UserDashBoardResponseParam
                                 {
                                     reqiuredDocId = masterreqdoc.Id,
                                     reqiuredDoctName = masterreqdoc.Title,
                                     expirationDate = reqiureddocuments.ExpirationDate,
                                     ReqType = (int)(masterreqdoc.ReqType == null ? 0 : masterreqdoc.ReqType),
                                     IsCompleted = (int)(reqiureddocuments.IsCompleted == null ? 0 : reqiureddocuments.IsCompleted),
                                     ServiceId = (int)(masterreqdoc.ServiceId == null ? 0 : masterreqdoc.ServiceId),
                                     ServiceName = services.Service,
                                     companyName = profile.BusinessName,
                                     CreatorCompanyid = masterreqdoc.CompanyId
                                 }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used for submit the reqiurement documents of particular user
        /// </summary>
        /// <param name="objSubmitReqDocRequestParam">objSubmitReqDocRequestParam</param>
        /// <returns>retrun one if expirtaion date submitted sucessfully otherwise retrun zero</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 1 2013</createdDate>
        public int SubmitRequireDocument(SubmitReqDocRequestParam objSubmitReqDocRequestParam)
        {
            int reqDocId = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Save services details if user select speciofic reqiurement
                    if (objSubmitReqDocRequestParam.ReqDocType.Equals(2))
                    {
                        reqDocId = SaveSpecificReq(objSubmitReqDocRequestParam);

                    }
                    else if (objSubmitReqDocRequestParam.ReqDocType.Equals(1))
                    {
                        reqDocId = SaveGlobalReq(objSubmitReqDocRequestParam);
                    }


                }

                return reqDocId;
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save the global reqiurements
        /// </summary>
        /// <param name="objSubmitReqDocRequestParam"></param>
        /// <returns></returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 1 2013</createdDate>
        private int SaveGlobalReq(SubmitReqDocRequestParam objSubmitReqDocRequestParam)
        {
            int reqDocId = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (objSubmitReqDocRequestParam.Type.Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.Save.Trim().ToUpper(CultureInfo.InvariantCulture)))
                    {
                        //Insert req doc details for sender in database
                        DP_ReqDocSender objDP_ReqDocSender = new DP_ReqDocSender()
                        {
                            Title = objSubmitReqDocRequestParam.title,
                            IsCompanyNameReq = objSubmitReqDocRequestParam.IsCompanyReq,
                            isPolicyNumberReq = objSubmitReqDocRequestParam.IsPolicyReq,
                            IsExpiryDateReq = objSubmitReqDocRequestParam.IsExpDateReq,
                            isLicenseNumberreq = objSubmitReqDocRequestParam.IsLicenseReq,
                            IsStatereq = objSubmitReqDocRequestParam.IsStateReq,
                            CreatedDate = DateTime.Now.Date,
                            CreatedBy = objSubmitReqDocRequestParam.UserId,
                            UserId = objSubmitReqDocRequestParam.UserId,
                            CompanyId = objSubmitReqDocRequestParam.CompanyId,
                            ReqDocFor = objSubmitReqDocRequestParam.ReqDocFor,
                            ReqType = objSubmitReqDocRequestParam.ReqDocType,
                            Allowtoupload = objSubmitReqDocRequestParam.UserPer,
                            DNA = objSubmitReqDocRequestParam.DoNotShow,
                            IsDeleted = false,
                            IsActive = true,
                            Retake = objSubmitReqDocRequestParam.Retake
                        };
                        objDecisionPointEntities.DP_ReqDocSender.Add(objDP_ReqDocSender);
                        objDecisionPointEntities.SaveChanges();
                        reqDocId = objDP_ReqDocSender.Id;
                    }
                    else
                    {
                        //Edit Req doc details for sender table in database
                        var res = (from reqdoc in objDecisionPointEntities.DP_ReqDocSender
                                   where reqdoc.Id == objSubmitReqDocRequestParam.ReqDocId
                                   select reqdoc).FirstOrDefault();
                        if (res != null)
                        {
                            res.Title = objSubmitReqDocRequestParam.title;
                            res.IsCompanyNameReq = objSubmitReqDocRequestParam.IsCompanyReq;
                            res.isPolicyNumberReq = objSubmitReqDocRequestParam.IsPolicyReq;
                            res.IsExpiryDateReq = objSubmitReqDocRequestParam.IsExpDateReq;
                            res.isLicenseNumberreq = objSubmitReqDocRequestParam.IsLicenseReq;
                            res.IsStatereq = objSubmitReqDocRequestParam.IsStateReq;
                            res.UserId = objSubmitReqDocRequestParam.UserId;
                            res.CompanyId = objSubmitReqDocRequestParam.CompanyId;
                            res.ReqDocFor = objSubmitReqDocRequestParam.ReqDocFor;
                            res.ReqType = objSubmitReqDocRequestParam.ReqDocType;
                            res.Allowtoupload = objSubmitReqDocRequestParam.UserPer;
                            res.ModifiedDate = DateTime.Now.Date;
                            res.ModifiedBy = objSubmitReqDocRequestParam.ModifiedById;
                            res.DNA = objSubmitReqDocRequestParam.DoNotShow;
                            res.Retake = objSubmitReqDocRequestParam.Retake;

                        }
                        objDecisionPointEntities.SaveChanges();
                        reqDocId = res.Id;
                        //delete ack details as per req doc Id
                        var resack = (from reqdocack in objDecisionPointEntities.DP_ReqDocAck
                                      where reqdocack.ReqDocId == objSubmitReqDocRequestParam.ReqDocId
                                      select reqdocack).ToList();
                        foreach (var item in resack)
                        {
                            objDecisionPointEntities.DP_ReqDocAck.Remove(item);
                        }
                        //delete VT details as per req doc Id
                        var resvt = (from reqdocvt in objDecisionPointEntities.DP_ReqDocVendorType
                                     where reqdocvt.ReqDocId == objSubmitReqDocRequestParam.ReqDocId
                                     select reqdocvt).ToList();
                        foreach (var item in resvt)
                        {
                            objDecisionPointEntities.DP_ReqDocVendorType.Remove(item);
                        }
                        //delete upload doc details as per req doc Id
                        var resuploaddoc = (from reqdocuploaddoc in objDecisionPointEntities.DP_ReqDocUpload
                                            where reqdocuploaddoc.ReqDocId == objSubmitReqDocRequestParam.ReqDocId && reqdocuploaddoc.ReceverUserId == null
                                            select reqdocuploaddoc).ToList();
                        foreach (var item in resuploaddoc)
                        {
                            objDecisionPointEntities.DP_ReqDocUpload.Remove(item);
                        }
                    }
                    //Save Req doc Ack in database
                    List<string> acklist = new List<string>();
                    if (!string.IsNullOrEmpty(objSubmitReqDocRequestParam.Ack))
                    {
                        acklist = objSubmitReqDocRequestParam.Ack.Split('$').ToList();
                    }
                    foreach (var item in acklist)
                    {
                        DP_ReqDocAck objDP_ReqDocAck = new DP_ReqDocAck()
                        {
                            ReqDocId = reqDocId,
                            IsDeleted = false,
                            Ackknow = item
                        };

                        objDecisionPointEntities.DP_ReqDocAck.Add(objDP_ReqDocAck);
                    }
                    //Save Req doc Vendor Types in database
                    List<string> VTlist = new List<string>();
                    if (!string.IsNullOrEmpty(objSubmitReqDocRequestParam.VendorTypeId))
                    {
                        VTlist = objSubmitReqDocRequestParam.VendorTypeId.Split('$').ToList();
                    }
                    foreach (var item in VTlist)
                    {
                        DP_ReqDocVendorType objDP_ReqDocVendorType = new DP_ReqDocVendorType()
                        {
                            ReqDocId = reqDocId,
                            VendorTypeId = Convert.ToInt32(item, CultureInfo.InvariantCulture)
                        };

                        objDecisionPointEntities.DP_ReqDocVendorType.Add(objDP_ReqDocVendorType);
                    }
                    //Save Req doc upload doc in database
                    List<string> uploadlist = new List<string>();
                    if (!string.IsNullOrEmpty(objSubmitReqDocRequestParam.UploadedDoc))
                    {
                        uploadlist = objSubmitReqDocRequestParam.UploadedDoc.Split('$').ToList();
                    }
                    int count = 1;
                    foreach (var item in uploadlist)
                    {
                        DP_ReqDocUpload objDP_ReqDocUpload = new DP_ReqDocUpload()
                        {
                            ReqDocId = reqDocId,
                            DocLoc = item,
                            DocSeqNo = count,
                            SenderUserId = objSubmitReqDocRequestParam.UserId

                        };
                        objDecisionPointEntities.DP_ReqDocUpload.Add(objDP_ReqDocUpload);
                        count++;
                    }

                    //Finally saved the changes in local database
                    objDecisionPointEntities.SaveChanges();
                }
                //Sent Req Doc Details to Recipients
                SentReqDocsTorecipients(reqDocId, objSubmitReqDocRequestParam, string.Empty);
            }
            catch
            {
                throw;
            }
            return reqDocId;
        }
        /// <summary>
        /// Used to save the specific reqiurement
        /// </summary>
        /// <param name="objSubmitReqDocRequestParam"></param>
        /// <returns></returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 1 2013</createdDate>
        private int SaveSpecificReq(SubmitReqDocRequestParam objSubmitReqDocRequestParam)
        {
            int reqDocId = 0;
            try
            {

                List<string> Slist = new List<string>();
                if (!string.IsNullOrEmpty(objSubmitReqDocRequestParam.ServicesId))
                {
                    Slist = objSubmitReqDocRequestParam.ServicesId.Split('$').ToList();
                }
                int serviceid = 0;
                foreach (var Sitem in Slist)
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        serviceid = Convert.ToInt32(Sitem, CultureInfo.InvariantCulture);

                        if (objSubmitReqDocRequestParam.Type.Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.Save.Trim().ToUpper(CultureInfo.InvariantCulture)))
                        {
                            //Insert req doc details for sender in database
                            DP_ReqDocSender objDP_ReqDocSender = new DP_ReqDocSender()
                            {
                                Title = objSubmitReqDocRequestParam.title,
                                IsCompanyNameReq = objSubmitReqDocRequestParam.IsCompanyReq,
                                isPolicyNumberReq = objSubmitReqDocRequestParam.IsPolicyReq,
                                IsExpiryDateReq = objSubmitReqDocRequestParam.IsExpDateReq,
                                isLicenseNumberreq = objSubmitReqDocRequestParam.IsLicenseReq,
                                IsStatereq = objSubmitReqDocRequestParam.IsStateReq,
                                CreatedDate = DateTime.Now.Date,
                                CreatedBy = objSubmitReqDocRequestParam.UserId,
                                UserId = objSubmitReqDocRequestParam.UserId,
                                CompanyId = objSubmitReqDocRequestParam.CompanyId,
                                ReqDocFor = objSubmitReqDocRequestParam.ReqDocFor,
                                ReqType = objSubmitReqDocRequestParam.ReqDocType,
                                Allowtoupload = objSubmitReqDocRequestParam.UserPer,
                                DNA = objSubmitReqDocRequestParam.DoNotShow,
                                ServiceId = serviceid,
                                IsActive = true,
                                IsDeleted = false,
                                Retake = objSubmitReqDocRequestParam.Retake
                            };
                            objDecisionPointEntities.DP_ReqDocSender.Add(objDP_ReqDocSender);
                            objDecisionPointEntities.SaveChanges();
                            reqDocId = objDP_ReqDocSender.Id;
                        }
                        else
                        {
                            //Edit Req doc details for sender table in database
                            var res = (from reqdoc in objDecisionPointEntities.DP_ReqDocSender
                                       where reqdoc.Id == objSubmitReqDocRequestParam.ReqDocId
                                       select reqdoc).FirstOrDefault();
                            if (res != null)
                            {
                                res.Title = objSubmitReqDocRequestParam.title;
                                res.IsCompanyNameReq = objSubmitReqDocRequestParam.IsCompanyReq;
                                res.isPolicyNumberReq = objSubmitReqDocRequestParam.IsPolicyReq;
                                res.IsExpiryDateReq = objSubmitReqDocRequestParam.IsExpDateReq;
                                res.isLicenseNumberreq = objSubmitReqDocRequestParam.IsLicenseReq;
                                res.IsStatereq = objSubmitReqDocRequestParam.IsStateReq;
                                res.UserId = objSubmitReqDocRequestParam.UserId;
                                res.CompanyId = objSubmitReqDocRequestParam.CompanyId;
                                res.ReqDocFor = objSubmitReqDocRequestParam.ReqDocFor;
                                res.ReqType = objSubmitReqDocRequestParam.ReqDocType;
                                res.Allowtoupload = objSubmitReqDocRequestParam.UserPer;
                                res.ModifiedDate = DateTime.Now.Date;
                                res.ModifiedBy = objSubmitReqDocRequestParam.ModifiedById;
                                res.DNA = objSubmitReqDocRequestParam.DoNotShow;
                                res.ServiceId = serviceid;
                                res.Retake = objSubmitReqDocRequestParam.Retake;
                            }
                            objDecisionPointEntities.SaveChanges();
                            reqDocId = res.Id;
                            //delete ack details as per req doc Id
                            var resack = (from reqdocack in objDecisionPointEntities.DP_ReqDocAck
                                          where reqdocack.ReqDocId == objSubmitReqDocRequestParam.ReqDocId
                                          select reqdocack).ToList();
                            foreach (var item in resack)
                            {
                                objDecisionPointEntities.DP_ReqDocAck.Remove(item);
                            }
                            //delete VT details as per req doc Id
                            var resvt = (from reqdocvt in objDecisionPointEntities.DP_ReqDocVendorType
                                         where reqdocvt.ReqDocId == objSubmitReqDocRequestParam.ReqDocId
                                         select reqdocvt).ToList();
                            foreach (var item in resvt)
                            {
                                objDecisionPointEntities.DP_ReqDocVendorType.Remove(item);
                            }
                            //delete upload doc details as per req doc Id
                            var resuploaddoc = (from reqdocuploaddoc in objDecisionPointEntities.DP_ReqDocUpload
                                                where reqdocuploaddoc.ReqDocId == objSubmitReqDocRequestParam.ReqDocId && reqdocuploaddoc.ReceverUserId == null
                                                select reqdocuploaddoc).ToList();
                            foreach (var item in resuploaddoc)
                            {
                                objDecisionPointEntities.DP_ReqDocUpload.Remove(item);
                            }
                        }
                        //Save Req doc Vendor Types in database
                        List<string> VTlist = new List<string>();
                        if (!string.IsNullOrEmpty(objSubmitReqDocRequestParam.VendorTypeId))
                        {
                            VTlist = objSubmitReqDocRequestParam.VendorTypeId.Split('$').ToList();
                        }
                        foreach (var item in VTlist)
                        {
                            DP_ReqDocVendorType objDP_ReqDocVendorType = new DP_ReqDocVendorType()
                            {
                                ReqDocId = reqDocId,
                                VendorTypeId = Convert.ToInt32(item, CultureInfo.InvariantCulture)
                            };

                            objDecisionPointEntities.DP_ReqDocVendorType.Add(objDP_ReqDocVendorType);
                        }
                        //Save Req doc Ack in database
                        List<string> acklist = new List<string>();
                        if (!string.IsNullOrEmpty(objSubmitReqDocRequestParam.Ack))
                        {
                            acklist = objSubmitReqDocRequestParam.Ack.Split('$').ToList();
                        }
                        foreach (var item in acklist)
                        {
                            DP_ReqDocAck objDP_ReqDocAck = new DP_ReqDocAck()
                            {
                                ReqDocId = reqDocId,
                                IsDeleted = false,
                                Ackknow = item
                            };

                            objDecisionPointEntities.DP_ReqDocAck.Add(objDP_ReqDocAck);
                        }
                        //Save Req doc upload doc in database
                        List<string> uploadlist = new List<string>();
                        if (!string.IsNullOrEmpty(objSubmitReqDocRequestParam.UploadedDoc))
                        {
                            uploadlist = objSubmitReqDocRequestParam.UploadedDoc.Split('$').ToList();
                        }
                        int count = 1;
                        foreach (var item in uploadlist)
                        {
                            DP_ReqDocUpload objDP_ReqDocUpload = new DP_ReqDocUpload()
                            {
                                ReqDocId = reqDocId,
                                DocLoc = item,
                                DocSeqNo = count,
                                SenderUserId = objSubmitReqDocRequestParam.UserId

                            };
                            objDecisionPointEntities.DP_ReqDocUpload.Add(objDP_ReqDocUpload);
                            count++;
                        }

                        //Finally saved the changes in local database
                        objDecisionPointEntities.SaveChanges();
                    }
                    //Sent Req Doc Details to Recipients
                    SentReqDocsTorecipients(reqDocId, objSubmitReqDocRequestParam, Convert.ToString(serviceid, CultureInfo.InvariantCulture));
                }

            }
            catch
            {
                throw;
            }
            return reqDocId;
        }
        /// <summary>
        /// Used to save the services details if admin select spcific reqiurement section
        /// </summary>
        /// <param name="reqDocId"></param>
        /// <param name="servicesidlist"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>3 june 2014</createddate>
        private void SaveServiceForSpecificReq(int reqDocId, string servicesidlist)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Save Req doc upload doc in database
                    List<string> Slist = new List<string>();
                    if (!string.IsNullOrEmpty(servicesidlist))
                    {
                        Slist = servicesidlist.Split('$').ToList();
                    }
                    int serviceid = 0;
                    foreach (var item in Slist)
                    {
                        serviceid = Convert.ToInt32(item, CultureInfo.InvariantCulture);
                        DP_ReqDocService objDP_ReqDocService = new DP_ReqDocService()
                        {
                            ReqDocId = reqDocId,
                            ServiceId = serviceid
                        };
                        objDecisionPointEntities.DP_ReqDocService.Add(objDP_ReqDocService);

                    }
                    objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Used for Sent the created Reqiure documents with title to staff and IC as per services 
        /// </summary>
        /// <param name="reqDocId"></param>
        /// <param name="objSubmitReqDocRequestParam"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>3 june 2014</createddate>
        private void SentReqDocsTorecipients(int reqDocId, SubmitReqDocRequestParam objSubmitReqDocRequestParam, string serviceid)
        {
            FilterRequestParam objFilterRequestParam = null;
            try
            {
                objFilterRequestParam = new FilterRequestParam();
                objFilterRequestParam.CompanyId = objSubmitReqDocRequestParam.CompanyId;
                objFilterRequestParam.vendortypefilter = objSubmitReqDocRequestParam.VendorTypeId;
                objFilterRequestParam.servicefilter = serviceid;
                objFilterRequestParam.type = 0;
                //get staff list of company
                IEnumerable<InternalstaffResponseParam> stafflist = GetInternalstaffdetail(objFilterRequestParam);
                //get IC list of company
                objFilterRequestParam.type = 1;
                IEnumerable<ICResponseParam> IClist = GetICdetail(objFilterRequestParam);
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    switch (objSubmitReqDocRequestParam.ReqDocFor)
                    {
                        case "staff":
                            //Insert details for staff: iscompleted 1 means in progress
                            foreach (var staff in stafflist)
                            {
                                var res = (from docrec in objDecisionPointEntities.DP_ReqDocReceiver
                                           where docrec.ReqDocId == reqDocId && docrec.UserId == staff.Id && docrec.CompanyId == staff.companyId
                                           select docrec).FirstOrDefault();
                                if (res == null)
                                {
                                    DP_ReqDocReceiver objDP_ReqDocReceiver = new DP_ReqDocReceiver()
                                    {
                                        ReqDocId = reqDocId,
                                        CompanyId = staff.companyId,
                                        UserId = staff.Id,
                                        IsCompleted = 2,
                                        IsMailSend = true,
                                        CreatedDate = DateTime.Now.Date,
                                        CreatedBy = objSubmitReqDocRequestParam.UserId,
                                        IsActive = true
                                    };
                                    objDecisionPointEntities.DP_ReqDocReceiver.Add(objDP_ReqDocReceiver);
                                }
                                else
                                {
                                    res.ReqDocId = reqDocId;
                                    res.CompanyId = staff.companyId;
                                    res.UserId = staff.Id;
                                    res.IsCompleted = 2;
                                    res.IsMailSend = true;
                                    res.ModifiedDate = DateTime.Now.Date;
                                    res.ModifiedBy = objSubmitReqDocRequestParam.ModifiedById;
                                }
                            }
                            break;
                        case "ic":
                            //Insert details for IC: iscompleted 1 means in progress
                            foreach (var IC in IClist)
                            {
                                var res = (from docrec in objDecisionPointEntities.DP_ReqDocReceiver
                                           where docrec.ReqDocId == reqDocId && docrec.UserId == IC.Id && docrec.CompanyId == IC.CompanyId
                                           select docrec).FirstOrDefault();
                                if (res == null)
                                {
                                    DP_ReqDocReceiver objDP_ReqDocReceiver = new DP_ReqDocReceiver()
                                    {
                                        ReqDocId = reqDocId,
                                        CompanyId = IC.CompanyId,
                                        UserId = IC.Id,
                                        IsCompleted = 2,
                                        IsMailSend = true,
                                        CreatedDate = DateTime.Now.Date,
                                        CreatedBy = objSubmitReqDocRequestParam.UserId,
                                        IsActive = true
                                    };
                                    objDecisionPointEntities.DP_ReqDocReceiver.Add(objDP_ReqDocReceiver);
                                }
                                else
                                {
                                    res.ReqDocId = reqDocId;
                                    res.CompanyId = IC.CompanyId;
                                    res.UserId = IC.Id;
                                    res.IsCompleted = 2;
                                    res.IsMailSend = true;
                                    res.ModifiedDate = DateTime.Now.Date;
                                    res.ModifiedBy = objSubmitReqDocRequestParam.ModifiedById;
                                }
                            }
                            break;
                        case "both":
                            //Insert details for staff: iscompleted 1 means in progress
                            foreach (var staff in stafflist)
                            {
                                var res = (from docrec in objDecisionPointEntities.DP_ReqDocReceiver
                                           where docrec.ReqDocId == reqDocId && docrec.UserId == staff.Id && docrec.CompanyId == staff.companyId
                                           select docrec).FirstOrDefault();
                                if (res == null)
                                {
                                    DP_ReqDocReceiver objDP_ReqDocReceiver = new DP_ReqDocReceiver()
                                    {
                                        ReqDocId = reqDocId,
                                        CompanyId = staff.companyId,
                                        UserId = staff.Id,
                                        IsCompleted = 2,
                                        IsMailSend = true,
                                        CreatedDate = DateTime.Now.Date,
                                        CreatedBy = objSubmitReqDocRequestParam.UserId,
                                        IsActive = true
                                    };
                                    objDecisionPointEntities.DP_ReqDocReceiver.Add(objDP_ReqDocReceiver);
                                }
                                else
                                {
                                    res.ReqDocId = reqDocId;
                                    res.CompanyId = staff.companyId;
                                    res.UserId = staff.Id;
                                    res.IsCompleted = 2;
                                    res.IsMailSend = true;
                                    res.ModifiedDate = DateTime.Now.Date;
                                    res.ModifiedBy = objSubmitReqDocRequestParam.ModifiedById;
                                }
                            }
                            //Insert details for IC: iscompleted 1 means in progress
                            foreach (var IC in IClist)
                            {
                                var res = (from docrec in objDecisionPointEntities.DP_ReqDocReceiver
                                           where docrec.ReqDocId == reqDocId && docrec.UserId == IC.Id && docrec.CompanyId == IC.CompanyId
                                           select docrec).FirstOrDefault();
                                if (res == null)
                                {
                                    DP_ReqDocReceiver objDP_ReqDocReceiver = new DP_ReqDocReceiver()
                                    {
                                        ReqDocId = reqDocId,
                                        CompanyId = IC.CompanyId,
                                        UserId = IC.Id,
                                        IsCompleted = 2,
                                        IsMailSend = true,
                                        CreatedDate = DateTime.Now.Date,
                                        CreatedBy = objSubmitReqDocRequestParam.UserId,
                                        IsActive = true
                                    };
                                    objDecisionPointEntities.DP_ReqDocReceiver.Add(objDP_ReqDocReceiver);
                                }
                                else
                                {
                                    res.ReqDocId = reqDocId;
                                    res.CompanyId = IC.CompanyId;
                                    res.UserId = IC.Id;
                                    res.IsCompleted = 2;
                                    res.IsMailSend = true;
                                    res.ModifiedDate = DateTime.Now.Date;
                                    res.ModifiedBy = objSubmitReqDocRequestParam.ModifiedById;
                                }
                            }
                            break;
                        default:
                            break;

                    }
                    objDecisionPointEntities.SaveChanges();


                }
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// Used to get the rquire documents detail of particular user[Like NDA , Criminal background]
        /// </summary>
        /// <param name="reqdocid">int</param>
        /// <param name="userId">int</param>
        /// <returns>retrun req doc of particular user</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>june 3 2014</createdDate>
        public IEnumerable<SubmitReqDocRequestParam> GetReqDocBySender(SubmitReqDocRequestParam objSubmitReqDocRequestParam)
        {
            IEnumerable<SubmitReqDocRequestParam> finallist = null;
            bool isActive = false;
            bool isDeleted = true;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (objSubmitReqDocRequestParam.IsActive.Equals(1))
                    {
                        isActive = true;
                        isDeleted = false;
                    }
                    if (objSubmitReqDocRequestParam.JCRType.Equals(1))
                    {

                        var query = (from reqdoc in objDecisionPointEntities.DP_ReqDocSender
                                     where reqdoc.UserId == objSubmitReqDocRequestParam.UserId && reqdoc.CompanyId == objSubmitReqDocRequestParam.CompanyId && reqdoc.ReqType == 1
                                     && reqdoc.IsActive == isActive
                                     && reqdoc.IsDeleted == isDeleted
                                     select new SubmitReqDocRequestParam
                                     {
                                         title = reqdoc.Title,
                                         IsCompanyReq = (bool)(reqdoc.IsCompanyNameReq == null ? false : reqdoc.IsCompanyNameReq),
                                         IsPolicyReq = (bool)(reqdoc.isPolicyNumberReq == null ? false : reqdoc.isPolicyNumberReq),
                                         IsLicenseReq = (bool)(reqdoc.isLicenseNumberreq == null ? false : reqdoc.isLicenseNumberreq),
                                         IsExpDateReq = (bool)(reqdoc.IsExpiryDateReq == null ? false : reqdoc.IsExpiryDateReq),
                                         IsStateReq = (bool)(reqdoc.IsStatereq == null ? false : reqdoc.IsStatereq),
                                         UserPer = (bool)(reqdoc.Allowtoupload == null ? false : reqdoc.Allowtoupload),
                                         ReqDocFor = reqdoc.ReqDocFor,
                                         ReqDocId = reqdoc.Id,
                                         DoNotShow = (bool)(reqdoc.DNA == null ? false : reqdoc.DNA),
                                         Retake = reqdoc.Retake
                                     }).Distinct().ToList();
                        finallist = query;
                    }
                    else if (objSubmitReqDocRequestParam.JCRType.Equals(2))
                    {
                        var query = (from reqdoc in objDecisionPointEntities.DP_ReqDocSender
                                     join servicesmaster in objDecisionPointEntities.DP_ServicesMaster
                                     on reqdoc.ServiceId equals servicesmaster.Id into SM
                                     from SMD in SM.DefaultIfEmpty()
                                     where reqdoc.UserId == objSubmitReqDocRequestParam.UserId && reqdoc.CompanyId == objSubmitReqDocRequestParam.CompanyId && reqdoc.ReqType == 2
                                    && reqdoc.IsActive == isActive
                                     && reqdoc.IsDeleted == isDeleted
                                     select new SubmitReqDocRequestParam
                                     {
                                         title = reqdoc.Title,
                                         IsCompanyReq = (bool)(reqdoc.IsCompanyNameReq == null ? false : reqdoc.IsCompanyNameReq),
                                         IsPolicyReq = (bool)(reqdoc.isPolicyNumberReq == null ? false : reqdoc.isPolicyNumberReq),
                                         IsLicenseReq = (bool)(reqdoc.isLicenseNumberreq == null ? false : reqdoc.isLicenseNumberreq),
                                         IsExpDateReq = (bool)(reqdoc.IsExpiryDateReq == null ? false : reqdoc.IsExpiryDateReq),
                                         IsStateReq = (bool)(reqdoc.IsStatereq == null ? false : reqdoc.IsStatereq),
                                         UserPer = (bool)(reqdoc.Allowtoupload == null ? false : reqdoc.Allowtoupload),
                                         ReqDocFor = reqdoc.ReqDocFor,
                                         ReqDocId = reqdoc.Id,
                                         ServiceId = reqdoc.ServiceId,
                                         Service = SMD.Service,
                                         DoNotShow = (bool)(reqdoc.DNA == null ? false : reqdoc.DNA),
                                         Retake = reqdoc.Retake
                                     }).Distinct().OrderBy(x => x.Service).ToList();
                        finallist = query;
                    }
                    return finallist;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to get the ack details as per req doc id
        /// </summary>
        /// <param name="reqDocId">reqDocId</param>
        /// <returns>IList<string></returns>
        /// <createdby>bobi</createdby>
        /// <createddate>4 june 2014</createddate>
        public IList<string> GetAckByreqDocId(int reqDocId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from ack in objDecisionPointEntities.DP_ReqDocAck
                                 where ack.ReqDocId == reqDocId
                                 select ack.Ackknow).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to get the vendor type details as per req doc id
        /// </summary>
        /// <param name="reqDocId">reqDocId</param>
        /// <returns>IList<string></returns>
        /// <createdby>bobi</createdby>
        /// <createddate>4 june 2014</createddate>
        public IList<int> GetReqDocVendorTypeByreqDocId(int reqDocId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from VT in objDecisionPointEntities.DP_ReqDocVendorType
                                 where VT.ReqDocId == reqDocId
                                 select (int)(VT.VendorTypeId == null ? 0 : VT.VendorTypeId)).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to get the upload doc details as per req doc id
        /// </summary>
        /// <param name="reqDocId">reqDocId</param>
        /// <returns>IList<string></returns>
        /// <createdby>bobi</createdby>
        /// <createddate>4 june 2014</createddate>
        public IList<UploadDocDetailsRequestParam> GetUploadDocByreqDocId(int reqDocId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from uploddoc in objDecisionPointEntities.DP_ReqDocUpload
                                 join reqdoc in objDecisionPointEntities.DP_ReqDocSender
                                 on uploddoc.ReqDocId equals reqdoc.Id
                                 where uploddoc.ReqDocId == reqDocId && reqdoc.CompanyId == companyId && uploddoc.ReceverUserId == null
                                 select new UploadDocDetailsRequestParam
                                 {
                                     DocLoc = uploddoc.DocLoc,
                                     DocSeq = (int)uploddoc.DocSeqNo,
                                     DocTblId = uploddoc.Id

                                 }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Get Receiver Required Doc
        /// </summary>
        /// <param name="reqDocId">Doc Id</param>
        /// <createdby>sumit saurav</createdby>
        /// <createddate>june 5 2014</createddate>
        /// <returns>list of document</returns>
        public IList<ReceiverReqDocResponseParam> GetReceiverRequiredDoc(int reqDocId, int userId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from reqDocSender in objDecisionPointEntities.DP_ReqDocSender
                                 #region Query Left Join

                                 join reqDocReceiver in objDecisionPointEntities.DP_ReqDocReceiver
                                 on reqDocSender.Id equals reqDocReceiver.ReqDocId into docReceiver
                                 from docRecv in docReceiver.DefaultIfEmpty()

                                 join reqDocUpload in objDecisionPointEntities.DP_ReqDocUpload
                                 on reqDocSender.Id equals reqDocUpload.ReqDocId into docUpload
                                 from dockUpload in docUpload.DefaultIfEmpty()

                                 join reqDocAck in objDecisionPointEntities.DP_ReqDocAck
                                 on reqDocSender.Id equals reqDocAck.ReqDocId into docAck
                                 from dockAck in docAck.DefaultIfEmpty()

                                 where reqDocSender.Id == reqDocId && docRecv.CompanyId == companyId && docRecv.UserId == userId && docRecv.IsActive == true
                                   && reqDocSender.IsDeleted == false && reqDocSender.IsActive == true
                                 #endregion
                                 select new ReceiverReqDocResponseParam
                                 {
                                     #region Parameter Assignments

                                     title = reqDocSender.Title,
                                     IsCompanyReq = (bool)(reqDocSender.IsCompanyNameReq == null ? false : reqDocSender.IsCompanyNameReq),
                                     IsExpDateReq = (bool)(reqDocSender.IsExpiryDateReq == null ? false : reqDocSender.IsExpiryDateReq),
                                     IsLicenseReq = (bool)(reqDocSender.isLicenseNumberreq == null ? false : reqDocSender.isLicenseNumberreq),
                                     IsPolicyReq = (bool)(reqDocSender.isPolicyNumberReq == null ? false : reqDocSender.isPolicyNumberReq),
                                     IsStateReq = (bool)(reqDocSender.IsStatereq == null ? false : reqDocSender.IsStatereq),
                                     UserPer = (bool)(reqDocSender.Allowtoupload == null ? false : reqDocSender.Allowtoupload),
                                     ReqDocFor = reqDocSender.ReqDocFor,
                                     ReqDocType = (byte)(reqDocSender.ReqType == null ? 1 : reqDocSender.ReqType),//to discuss
                                     ReqDocId = reqDocSender.Id,

                                     CompanyName = docRecv.CompanyName,
                                     PolicyNumber = docRecv.PolicyNo,
                                     LisenceNumber = docRecv.LicenseNumber,
                                     StateAbbre = (docRecv.StateAbbre == null ? string.Empty : docRecv.StateAbbre.Trim()),
                                     ExpirationDate = docRecv.ExpirationDate,
                                     IsCompleted = (byte)(docRecv.IsCompleted == null ? 0 : docRecv.IsCompleted),
                                     Acknoledgment = dockAck.Ackknow,
                                     DocLoc = dockUpload.DocLoc,
                                     DocSeqNo = (int)(dockUpload.DocSeqNo == null ? 0 : dockUpload.DocSeqNo),
                                     DocReceiverUserId = (int)(dockUpload.ReceverUserId == null ? 0 : dockUpload.ReceverUserId),
                                     DocSenderUserId = (int)(dockUpload.SenderUserId == null ? 0 : dockUpload.SenderUserId),
                                     DNA = (bool)(reqDocSender.DNA == null ? false : reqDocSender.DNA),
                                     DocUploadTblId = (int)(dockUpload.Id == null ? 0 : dockUpload.Id),
                                     ReqDocReceiverId = docRecv.Id,
                                     #endregion
                                 }).Distinct().ToList();


                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// save details of required document of staff and ic
        /// </summary>
        /// <param name="objRequestParam">ReceiverReqDocRequestParam</param>
        /// <createdby>sumit saurav</createdby>
        /// <createddate>june 6 2014</createddate>
        /// <returns>int saved or not?</returns>
        public int SetReceiverReqDocDetails(ReceiverReqDocRequestParam objRequestParam)
        {
            try
            {
                List<string> DocLoclist = new List<string>();
                if (!string.IsNullOrEmpty(objRequestParam.DocLoc))
                {
                    DocLoclist = objRequestParam.DocLoc.Split(';').ToList();
                }
                int reqDocRecvrId = 0;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from docReceiver in objDecisionPointEntities.DP_ReqDocReceiver
                                 where docReceiver.CompanyId == objRequestParam.CompanyId &&
                                 docReceiver.UserId == objRequestParam.UserId && docReceiver.ReqDocId == objRequestParam.ReqDocId
                                 select docReceiver).FirstOrDefault();
                    if (query != null)
                    {
                        query.CompanyName = objRequestParam.CompanyName;
                        query.PolicyNo = objRequestParam.PolicyNumber;
                        query.LicenseNumber = objRequestParam.LisenceNumber;
                        query.StateAbbre = objRequestParam.StateAbbre;
                        query.ExpirationDate = objRequestParam.ExpirationDate;
                        query.IsCompleted = objRequestParam.IsCompleted;
                        query.CompletedDate = currentdate;
                        reqDocRecvrId = query.Id;

                    }
                    #region DocUpload and Remove


                    //remove uploaded documents by child user[Who received the JCR]
                    var resuploaddoc = (from reqdocuploaddoc in objDecisionPointEntities.DP_ReqDocUpload
                                        where reqdocuploaddoc.ReqDocId == objRequestParam.ReqDocId && reqdocuploaddoc.ReceverUserId == objRequestParam.UserId
                                        select reqdocuploaddoc).ToList();
                    if (!object.Equals(resuploaddoc, null))
                    {
                        foreach (var item in resuploaddoc)
                        {
                            objDecisionPointEntities.DP_ReqDocUpload.Remove(item);
                        }
                    }
                    foreach (var item in DocLoclist)
                    {
                        string[] str = item.Split(char.Parse(Shared.Hash));
                        var DocLocation = str[0];
                        int docSequence = Convert.ToInt32(str[1]);
                        DP_ReqDocUpload objDP_ReqDocUpload = new DP_ReqDocUpload()
                        {
                            DocLoc = DocLocation,
                            DocSeqNo = docSequence,
                            ReceverUserId = objRequestParam.UserId,
                            ReqDocId = objRequestParam.ReqDocId

                        };
                        objDecisionPointEntities.DP_ReqDocUpload.Add(objDP_ReqDocUpload);
                    }
                    #endregion
                    //save in audit table.
                    bool isDocUploaded = false;
                    if (DocLoclist != null && resuploaddoc != null)
                    {
                        if (DocLoclist.Count() > resuploaddoc.Count())
                        {
                            isDocUploaded = true;
                        }
                    }
                    DP_ReqDocAudit objDP_ReqDocAudit = new DP_ReqDocAudit()
                    {
                        ReqDocReceiverId = reqDocRecvrId,
                        VisitorId = objRequestParam.VisitorId,
                        //AuditDocId=0,
                        CompanyName = objRequestParam.CompanyName,
                        LicenseNumber = objRequestParam.LisenceNumber,
                        PolicyNo = objRequestParam.PolicyNumber,
                        ExpirationDate = objRequestParam.ExpirationDate,
                        StateAbbre = objRequestParam.StateAbbre,
                        IsDocUploaded = isDocUploaded,
                        IsMarkAsComplete = objRequestParam.IsCompleted,
                        ModifyDate = DateTime.Now.Date,
                    };
                    objDecisionPointEntities.DP_ReqDocAudit.Add(objDP_ReqDocAudit);
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// GetReceiverReqDocAudit
        /// </summary>
        /// <param name="reqDocId">reqDocId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Nov 10 2014</CreatedDate>
        /// <returns>ReceiverReqDocResponseParam</returns>
        public IList<ReceiverReqDocResponseParam> GetReceiverReqDocAudit(int reqDocId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from reqDocAudit in objDecisionPointEntities.DP_ReqDocAudit
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on reqDocAudit.VisitorId equals profile.UserId
                                 join state in objDecisionPointEntities.DP_State
     on reqDocAudit.StateAbbre equals state.StateAbbre into states
                                 from state1 in states.DefaultIfEmpty()
                                 where reqDocAudit.ReqDocReceiverId == reqDocId
                                 select new ReceiverReqDocResponseParam
                                 {
                                     #region Parameter Assignments
                                     ReqDocId = (int)(reqDocAudit.ReqDocReceiverId == null ? 0 : reqDocAudit.ReqDocReceiverId),
                                     VisitorName = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                     IsDocUploaded = (bool)(reqDocAudit.IsDocUploaded == null ? false : reqDocAudit.IsDocUploaded),
                                     CompanyName = reqDocAudit.CompanyName,
                                     LisenceNumber = reqDocAudit.LicenseNumber,
                                     PolicyNumber = reqDocAudit.PolicyNo,
                                     ExpirationDate = reqDocAudit.ExpirationDate,
                                     StateAbbre = reqDocAudit.StateAbbre,
                                     ModifyDate = reqDocAudit.ModifyDate,
                                     StateName = state1.State,
                                     IsCompleted = (byte)(reqDocAudit.IsMarkAsComplete == null ? 0 : reqDocAudit.IsMarkAsComplete),
                                     #endregion
                                 }).ToList();


                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// MarkReceiverDocComplete
        /// </summary>
        /// <param name="reqDocId">reqDocId</param>
        /// <param name="userId">userId</param>
        /// <param name="companyId">companyId</param>
        /// <createdby>sumit saurav</createdby>
        /// <createddate>june 6 2014</createddate>
        /// <returns>int</returns>
        public int MarkReceiverDocComplete(int reqDocId, int userId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from docReceiver in objDecisionPointEntities.DP_ReqDocReceiver
                                 where docReceiver.CompanyId == companyId &&
                                 docReceiver.UserId == userId && docReceiver.ReqDocId == reqDocId
                                 select docReceiver).FirstOrDefault();
                    if (query != null)
                    {
                        query.IsCompleted = 1;

                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Used to send the reqiure document for newly hired staff and IC
        /// </summary>
        /// <param name="objJobReqForNewHireRequestParam"></param>
        /// <returns>int</returns>
        /// <createdby>bobi</createdby>
        /// <createddate>16 june 1014</createddate>
        public int InsertJobComplianceReqforNewHired(JobReqForNewHireRequestParam objJobReqForNewHireRequestParam)
        {
            int isInserted = 0;
            try
            {
                isInserted = SetProfessionalLicenseForNewHired(objJobReqForNewHireRequestParam);
                isInserted = SetInsuranceForNewHired(objJobReqForNewHireRequestParam);
                isInserted = SetAdditionalReqForNewHired(objJobReqForNewHireRequestParam);
                isInserted = SetBackgrounReqForNewHired(objJobReqForNewHireRequestParam);
                return isInserted;
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// used for sent professional licesne to particular new hired IC
        /// </summary>
        /// <param name="objJobReqForNewHireRequestParam"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>16 june 1014</createddate>
        private int SetProfessionalLicenseForNewHired(JobReqForNewHireRequestParam objJobReqForNewHireRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var professionalLicDetails = (from profLic in objDecisionPointEntities.DP_ProfessionalLicenseMaster
                                                  where profLic.CreatorCompanyId == objJobReqForNewHireRequestParam.inviteCompanyId
                                                  && profLic.CreatedBy == objJobReqForNewHireRequestParam.parentuserId && profLic.ICTypeId == objJobReqForNewHireRequestParam.ICTypeId
                                                  select profLic).ToList();
                    foreach (var item in professionalLicDetails)
                    {
                        var profLicMappingDetails = (from docrec in objDecisionPointEntities.DP_ProfessionalLicenseMapping
                                                     where docrec.ProfLiceId == item.Id && docrec.UserId == objJobReqForNewHireRequestParam.userId
                                                     && docrec.CompanyId == objJobReqForNewHireRequestParam.companyId
                                                     select docrec).FirstOrDefault();
                        if (profLicMappingDetails == null)
                        {
                            DP_ProfessionalLicenseMapping objDPProfessionalLicenseMapping = new DP_ProfessionalLicenseMapping()
                            {
                                ProfLiceId = item.Id,
                                CompanyId = objJobReqForNewHireRequestParam.companyId,
                                UserId = objJobReqForNewHireRequestParam.userId,
                                Title = item.LicenseType,
                                Source = item.Source,
                                Status = Shared.Pending
                            };
                            objDecisionPointEntities.DP_ProfessionalLicenseMapping.Add(objDPProfessionalLicenseMapping);
                        }
                        else
                        {
                            profLicMappingDetails.ProfLiceId = item.Id;
                            profLicMappingDetails.CompanyId = objJobReqForNewHireRequestParam.companyId;
                            profLicMappingDetails.UserId = objJobReqForNewHireRequestParam.userId;
                            profLicMappingDetails.Title = item.LicenseType;
                            profLicMappingDetails.Source = item.Source;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// used for sent professional licesne to particular new hired IC
        /// </summary>
        /// <param name="objJobReqForNewHireRequestParam"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>16 june 1014</createddate>
        private int SetInsuranceForNewHired(JobReqForNewHireRequestParam objJobReqForNewHireRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var professionalLicDetails = (from profLic in objDecisionPointEntities.DP_InsuranceMaster
                                                  where profLic.CreatorCompanyId == objJobReqForNewHireRequestParam.inviteCompanyId
                                                  && profLic.CreatedBy == objJobReqForNewHireRequestParam.parentuserId && profLic.ICTypeId == objJobReqForNewHireRequestParam.ICTypeId
                                                  select profLic).ToList();
                    foreach (var item in professionalLicDetails)
                    {
                        var profLicMappingDetails = (from docrec in objDecisionPointEntities.DP_InsuranceMapping
                                                     where docrec.InsId == item.Id && docrec.UserId == objJobReqForNewHireRequestParam.userId
                                                     && docrec.CompanyId == objJobReqForNewHireRequestParam.companyId
                                                     select docrec).FirstOrDefault();
                        if (profLicMappingDetails == null)
                        {
                            DP_InsuranceMapping objDPInsuranceMapping = new DP_InsuranceMapping()
                            {
                                InsId = item.Id,
                                CompanyId = objJobReqForNewHireRequestParam.companyId,
                                UserId = objJobReqForNewHireRequestParam.userId,
                                Title = item.InsuranceType,
                                Status = Shared.Pending
                            };
                            objDecisionPointEntities.DP_InsuranceMapping.Add(objDPInsuranceMapping);
                        }
                        else
                        {
                            profLicMappingDetails.InsId = item.Id;
                            profLicMappingDetails.CompanyId = objJobReqForNewHireRequestParam.companyId;
                            profLicMappingDetails.UserId = objJobReqForNewHireRequestParam.userId;
                            profLicMappingDetails.Title = item.InsuranceType;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// used for sent professional licesne to particular new hired IC
        /// </summary>
        /// <param name="objJobReqForNewHireRequestParam"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>16 june 1014</createddate>
        private int SetAdditionalReqForNewHired(JobReqForNewHireRequestParam objJobReqForNewHireRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var professionalLicDetails = (from profLic in objDecisionPointEntities.DP_AdditionalReqMaster
                                                  where profLic.CreatorCompanyId == objJobReqForNewHireRequestParam.inviteCompanyId
                                                  && profLic.CreatedBy == objJobReqForNewHireRequestParam.parentuserId && profLic.ICTypeId == objJobReqForNewHireRequestParam.ICTypeId
                                                  select profLic).ToList();
                    foreach (var item in professionalLicDetails)
                    {
                        var profLicMappingDetails = (from docrec in objDecisionPointEntities.DP_AdditionalReqMapping
                                                     where docrec.AddReqId == item.Id && docrec.UserId == objJobReqForNewHireRequestParam.userId
                                                     && docrec.CompanyId == objJobReqForNewHireRequestParam.companyId
                                                     select docrec).FirstOrDefault();
                        if (profLicMappingDetails == null)
                        {
                            DP_AdditionalReqMapping objDPAdditionalReqMapping = new DP_AdditionalReqMapping()
                            {
                                AddReqId = item.Id,
                                CompanyId = objJobReqForNewHireRequestParam.companyId,
                                UserId = objJobReqForNewHireRequestParam.userId,
                                Status = Shared.Pending
                            };
                            objDecisionPointEntities.DP_AdditionalReqMapping.Add(objDPAdditionalReqMapping);
                        }
                        else
                        {
                            profLicMappingDetails.AddReqId = item.Id;
                            profLicMappingDetails.CompanyId = objJobReqForNewHireRequestParam.companyId;
                            profLicMappingDetails.UserId = objJobReqForNewHireRequestParam.userId;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// used for sent professional licesne to particular new hired IC
        /// </summary>
        /// <param name="objJobReqForNewHireRequestParam"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>16 june 1014</createddate>
        private int SetBackgrounReqForNewHired(JobReqForNewHireRequestParam objJobReqForNewHireRequestParam)
        {
            try
            {
                int profLicenseId = 0;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var backgrounDetails = (from profLic in objDecisionPointEntities.DP_BGCheckMaster
                                            where profLic.CreatorCompanyId == objJobReqForNewHireRequestParam.inviteCompanyId
                                            && profLic.CreatedBy == objJobReqForNewHireRequestParam.parentuserId && profLic.ICTypeId == objJobReqForNewHireRequestParam.ICTypeId
                                            select profLic).ToList();
                    foreach (var item in backgrounDetails)
                    {
                        var bgCheckMappingDetails = (from docrec in objDecisionPointEntities.DP_BGCheckMapping
                                                     where docrec.BGCheckId == item.Id && docrec.UserId == objJobReqForNewHireRequestParam.userId
                                                     && docrec.CompanyId == objJobReqForNewHireRequestParam.companyId
                                                     select docrec).FirstOrDefault();
                        if (bgCheckMappingDetails == null)
                        {
                            //save background check mapping details
                            DP_BGCheckMapping objDPBGCheckMapping = new DP_BGCheckMapping()
                            {
                                BGCheckId = item.Id,
                                CompanyId = objJobReqForNewHireRequestParam.companyId,
                                UserId = objJobReqForNewHireRequestParam.userId,
                                ReceivedDate = currentdate,
                                Source = "Sterling",
                                Status = Shared.Pending,
                                StatusChangeDate = currentdate,
                                RequirmentType = 0
                            };
                            //if (!string.IsNullOrEmpty(objBackGroundCheckMasterRequestParam.SterlingOrderStatus))
                            //{
                            //    objDPBGCheckMapping.Status = objBackGroundCheckMasterRequestParam.SterlingOrderStatus;
                            //}
                            objDecisionPointEntities.DP_BGCheckMapping.Add(objDPBGCheckMapping);
                            objDecisionPointEntities.SaveChanges();
                            profLicenseId = objDPBGCheckMapping.Id;
                        }
                        else
                        {
                            bgCheckMappingDetails.BGCheckId = item.Id;
                            bgCheckMappingDetails.CompanyId = objJobReqForNewHireRequestParam.companyId;
                            bgCheckMappingDetails.UserId = objJobReqForNewHireRequestParam.userId;
                            bgCheckMappingDetails.ModifiedDate = currentdate;
                            bgCheckMappingDetails.ModifiedBy = objJobReqForNewHireRequestParam.userId;
                            profLicenseId = bgCheckMappingDetails.Id;
                            //delete bg check details mapping
                            var pkgDetailsMapping = (from pkgDetailMapping in objDecisionPointEntities.DP_BGCheckDetailMapping
                                                     where pkgDetailMapping.BGCheckMappingId == profLicenseId
                                                     select pkgDetailMapping).ToList();
                            foreach (var pkgItem in pkgDetailsMapping)
                            {
                                objDecisionPointEntities.DP_BGCheckDetailMapping.Remove(pkgItem);
                            }
                        }
                        //save background check details mapping
                        var packageDetail = (from pkgmaster in objDecisionPointEntities.DP_BGCheckPackageMaster
                                             join pkgDetail in objDecisionPointEntities.DP_BGCheckPackageDetailMaster
                                             on pkgmaster.Id equals pkgDetail.PackageId
                                             where pkgmaster.Id == item.BGCheckPkgId && pkgmaster.IsDeleted == false
                                             select pkgDetail).ToList();
                        foreach (var pkgItem in packageDetail)
                        {
                            var pkgMappingDetail = (from pkgDetailMapping in objDecisionPointEntities.DP_BGCheckDetailMapping
                                                    where pkgDetailMapping.BGCheckMappingId == profLicenseId && pkgDetailMapping.BGCheckPkgDetailId == pkgItem.Id
                                                    select pkgDetailMapping).ToList();
                            if (pkgMappingDetail.Count <= 0)
                            {
                                DP_BGCheckDetailMapping objDPBGCheckDetailMapping = new DP_BGCheckDetailMapping()
                                {
                                    BGCheckMappingId = profLicenseId,
                                    Status = Shared.Pending,
                                    BGCheckPkgDetailId = pkgItem.Id,
                                    StatusChangeDate = currentdate
                                };
                                objDecisionPointEntities.DP_BGCheckDetailMapping.Add(objDPBGCheckDetailMapping);
                            }
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Used for update the job comlimabxce reqiurement as per services changes
        /// </summary>
        /// <param name="servicesids"></param>
        /// <param name="objJobReqForNewHireRequestParam"></param>
        /// <returns></returns>
        /// <createdby>bobi</createdby>
        /// <createddate>27 June 2014</createddate>
        public int UpdateJobComplianceReqAsPerService(string servicesids, JobReqForNewHireRequestParam objJobReqForNewHireRequestParam)
        {
            int Isupdated = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    int serviceid = 0;
                    string[] serviceIds = servicesids.Split(',');
                    //disable all services from dp_reqdocreciver
                    var resreceiver = (from docReceiver in objDecisionPointEntities.DP_ReqDocReceiver
                                       join reqdoc in objDecisionPointEntities.DP_ReqDocSender
                                       on docReceiver.ReqDocId equals reqdoc.Id
                                       where docReceiver.UserId == objJobReqForNewHireRequestParam.userId && reqdoc.ReqType == 2 && docReceiver.IsActive == true
                                       && reqdoc.IsActive == true && reqdoc.IsDeleted == false
                                       select docReceiver).ToList();
                    if (resreceiver != null)
                    {
                        foreach (var DR in resreceiver)
                        {
                            DR.IsActive = false;
                        }

                    }
                    foreach (var item in serviceIds)
                    {
                        serviceid = Convert.ToInt32(item, CultureInfo.InvariantCulture);

                        var res1 = (from docrec in objDecisionPointEntities.DP_ReqDocSender
                                    where docrec.CompanyId == objJobReqForNewHireRequestParam.inviteCompanyId && docrec.ServiceId == serviceid
                                    && (docrec.ReqDocFor == objJobReqForNewHireRequestParam.userType || docrec.ReqDocFor == Shared.Both)
                                     && docrec.IsActive == true && docrec.IsDeleted == false
                                    select docrec).ToList();
                        if (res1 != null && res1.Count > 0)
                        {
                            foreach (var item1 in res1)
                            {
                                var gres = (from docrec in objDecisionPointEntities.DP_ReqDocReceiver
                                            where docrec.ReqDocId == item1.Id && docrec.UserId == objJobReqForNewHireRequestParam.userId
                                            select docrec).FirstOrDefault();
                                if (gres == null)
                                {
                                    DP_ReqDocReceiver objDP_ReqDocReceiver = new DP_ReqDocReceiver()
                                    {
                                        ReqDocId = item1.Id,
                                        CompanyId = objJobReqForNewHireRequestParam.companyId,
                                        UserId = objJobReqForNewHireRequestParam.userId,
                                        IsCompleted = 2,
                                        IsMailSend = true,
                                        CreatedDate = DateTime.Now.Date,
                                        CreatedBy = objJobReqForNewHireRequestParam.parentuserId,
                                        IsActive = true
                                    };
                                    objDecisionPointEntities.DP_ReqDocReceiver.Add(objDP_ReqDocReceiver);
                                }
                                else
                                {
                                    gres.IsActive = true;
                                }


                            }

                        }

                    }
                    Isupdated = objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
            return Isupdated;
        }

        /// <summary>
        /// Used for perform the JCR operations
        /// </summary>
        /// <param name="id"></param>
        /// <param name="operationtype"></param>
        /// <returns>int</returns>
        /// <createdby>bobi</createdby>
        /// <createddate>5 july 2014</createddate>
        public int JCROperation(int id, int operationtype)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (operationtype.Equals(0))
                    {
                        var res = (from reqdoc in objDecisionPointEntities.DP_ReqDocSender
                                   where reqdoc.Id == id
                                   select reqdoc).FirstOrDefault();
                        if (!object.Equals(res, null))
                        {
                            res.IsActive = false;
                            res.IsDeleted = true;
                        }
                    }
                    else if (operationtype.Equals(1))
                    {
                        var res = (from reqdoc in objDecisionPointEntities.DP_ReqDocSender
                                   where reqdoc.Id == id
                                   select reqdoc).FirstOrDefault();
                        if (!object.Equals(res, null))
                        {
                            res.IsActive = true;
                            res.IsDeleted = false;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
        }
        #endregion

        #region Configration Setting
        /// <summary>
        /// Used for save the config details as per company
        /// </summary>
        /// <param name="objConfigurationSettingRequestParam">objConfigurationSettingRequestParam</param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>23 July 2014</createdDate>
        public int SaveConfigSetting(ConfigurationSettingRequestParam objConfigurationSettingRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from config in objDecisionPointEntities.DP_ConfigurationSetting
                               where config.UserId == objConfigurationSettingRequestParam.UserId && config.CompanyId == objConfigurationSettingRequestParam.CompanyId
                               select config).FirstOrDefault();
                    if (!object.Equals(res, null))
                    {
                        #region Config Properties
                        res.IsClient = objConfigurationSettingRequestParam.IsClient;
                        res.IsIC = objConfigurationSettingRequestParam.IsIc;
                        res.IsVendor = objConfigurationSettingRequestParam.IsVendor;
                        res.IsCoverageArea = objConfigurationSettingRequestParam.IsCoveragearea;
                        res.IsServices = objConfigurationSettingRequestParam.IsServices;
                        res.IsClientOnMyProfile = objConfigurationSettingRequestParam.IsClientOnMyProfile;
                        res.IsWebinarApply = objConfigurationSettingRequestParam.IsWebinarApply;
                        res.IsScormApply = objConfigurationSettingRequestParam.IsScormApply;
                        res.IsICFreeBasicMembership = objConfigurationSettingRequestParam.IsICFreeBasicMembership;
                        res.IsICUsePackages = objConfigurationSettingRequestParam.IsICUsePackages;
                        res.IsStaffCommApply = objConfigurationSettingRequestParam.IsStaffCommApply;
                        res.IsICCommApply = objConfigurationSettingRequestParam.IsICCommApply;
                        res.IsICInsApply = objConfigurationSettingRequestParam.IsICInsApply;
                        res.IsStaffInsApply = objConfigurationSettingRequestParam.IsStaffInsApply;

                        res.IsICBgCheckApply = objConfigurationSettingRequestParam.IsBgCheckForIC;
                        res.IsICLicenseApply = objConfigurationSettingRequestParam.IsLiceInsForIC;
                        res.IsICAddCreApply = objConfigurationSettingRequestParam.IsAddCreForIC;
                        res.IsCoverageAreaForIC = objConfigurationSettingRequestParam.IsCoverageAreaForIC;
                        res.IsServicesForIC = objConfigurationSettingRequestParam.IsServicesForIC;
                        res.IsICClientOnMyProfile = objConfigurationSettingRequestParam.IsICClientOnMyProfile;

                        res.IsStaffAddCreApply = objConfigurationSettingRequestParam.IsAddCreForStaff;
                        res.IsStaffBgCheckApply = objConfigurationSettingRequestParam.IsBgCheckForStaff;
                        res.IsCoverageAreaForStaff = objConfigurationSettingRequestParam.IsCoverageAreaForStaff;
                        res.IsServicesForStaff = objConfigurationSettingRequestParam.IsServicesForStaff;
                        res.IsStaffClientOnMyProfile = objConfigurationSettingRequestParam.IsStaffClientOnMyProfile;
                        res.IsLicenseForStaff = objConfigurationSettingRequestParam.IsLicenseForStaff;
                        res.IsContractManagementApply = objConfigurationSettingRequestParam.IsContractApply;
                        res.IsClientNameApplyForIC = objConfigurationSettingRequestParam.IsClientNameApplyForIC;
                        #endregion
                        #region Other
                        res.ModifiedBy = objConfigurationSettingRequestParam.CreatedBy;
                        res.ModifiedDate = DateTime.Now.Date;
                        #endregion

                    }
                    else
                    {
                        DP_ConfigurationSetting objDP_ConfigurationSetting = new DP_ConfigurationSetting()
                        {
                            #region Config Properties
                            IsClient = objConfigurationSettingRequestParam.IsClient,
                            IsIC = objConfigurationSettingRequestParam.IsIc,
                            IsVendor = objConfigurationSettingRequestParam.IsVendor,
                            IsCoverageArea = objConfigurationSettingRequestParam.IsCoveragearea,
                            IsServices = objConfigurationSettingRequestParam.IsServices,
                            IsClientOnMyProfile = objConfigurationSettingRequestParam.IsClientOnMyProfile,
                            IsWebinarApply = objConfigurationSettingRequestParam.IsWebinarApply,
                            IsScormApply = objConfigurationSettingRequestParam.IsScormApply,
                            IsICUsePackages = objConfigurationSettingRequestParam.IsICUsePackages,
                            IsStaffCommApply = objConfigurationSettingRequestParam.IsStaffCommApply,
                            IsICInsApply = objConfigurationSettingRequestParam.IsICInsApply,
                            IsStaffInsApply = objConfigurationSettingRequestParam.IsStaffInsApply,
                            IsICCommApply = objConfigurationSettingRequestParam.IsICCommApply,

                            IsICBgCheckApply = objConfigurationSettingRequestParam.IsBgCheckForIC,
                            IsICLicenseApply = objConfigurationSettingRequestParam.IsLiceInsForIC,
                            IsICAddCreApply = objConfigurationSettingRequestParam.IsAddCreForIC,
                            IsCoverageAreaForIC = objConfigurationSettingRequestParam.IsCoverageAreaForIC,
                            IsServicesForIC = objConfigurationSettingRequestParam.IsAddCreForIC,
                            IsICClientOnMyProfile = objConfigurationSettingRequestParam.IsICClientOnMyProfile,

                            IsStaffAddCreApply = objConfigurationSettingRequestParam.IsAddCreForStaff,
                            IsStaffBgCheckApply = objConfigurationSettingRequestParam.IsBgCheckForStaff,
                            IsCoverageAreaForStaff = objConfigurationSettingRequestParam.IsCoverageAreaForStaff,
                            IsServicesForStaff = objConfigurationSettingRequestParam.IsServicesForStaff,
                            IsStaffClientOnMyProfile = objConfigurationSettingRequestParam.IsStaffClientOnMyProfile,
                            IsLicenseForStaff = objConfigurationSettingRequestParam.IsLicenseForStaff,
                            IsContractManagementApply = objConfigurationSettingRequestParam.IsContractApply,
                            IsClientNameApplyForIC = objConfigurationSettingRequestParam.IsClientNameApplyForIC,
                            #endregion
                            #region Other
                            UserId = objConfigurationSettingRequestParam.UserId,
                            CreatedBy = objConfigurationSettingRequestParam.CreatedBy,
                            CompanyId = objConfigurationSettingRequestParam.CompanyId,
                            CreatedDate = DateTime.Now.Date
                            #endregion
                        };
                        objDecisionPointEntities.DP_ConfigurationSetting.Add(objDP_ConfigurationSetting);
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used for get configuratiin setting details as per company
        /// </summary>
        /// <param name="companyId">companyId</param>
        /// <param name="UserId">UserId</param>
        /// <returns>ConfigurationSettingRequestParam</returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>23 July 2014</createdDate>
        public ConfigurationSettingRequestParam GetConfigSetting(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from config in objDecisionPointEntities.DP_ConfigurationSetting
                                 where config.CompanyId == companyId
                                 select new ConfigurationSettingRequestParam
                                 {
                                     #region Config Properties
                                     IsClient = (bool)(config.IsClient == null ? false : config.IsClient),
                                     IsIc = (bool)(config.IsIC == null ? false : config.IsIC),
                                     IsVendor = (bool)(config.IsVendor == null ? false : config.IsVendor),
                                     IsCoveragearea = (bool)(config.IsCoverageArea == null ? false : config.IsCoverageArea),
                                     IsServices = (bool)(config.IsServices == null ? false : config.IsServices),
                                     IsClientOnMyProfile = (bool)(config.IsClientOnMyProfile == null ? false : config.IsClientOnMyProfile),
                                     IsWebinarApply = (bool)(config.IsWebinarApply == null ? false : config.IsWebinarApply),
                                     IsScormApply = (bool)(config.IsScormApply == null ? false : config.IsScormApply),
                                     IsICFreeBasicMembership = (bool)(config.IsICFreeBasicMembership == null ? false : config.IsICFreeBasicMembership),
                                     IsICInsApply = (bool)(config.IsICInsApply == null ? false : config.IsICInsApply),
                                     IsICUsePackages = (bool)(config.IsICUsePackages == null ? false : config.IsICUsePackages),
                                     IsStaffInsApply = (bool)(config.IsStaffInsApply == null ? false : config.IsStaffInsApply),
                                     IsICCommApply = (bool)(config.IsICCommApply == null ? false : config.IsICCommApply),
                                     IsStaffCommApply = (bool)(config.IsStaffCommApply == null ? false : config.IsStaffCommApply),

                                     IsBgCheckForIC = (bool)(config.IsICBgCheckApply == null ? false : config.IsICBgCheckApply),
                                     IsLiceInsForIC = (bool)(config.IsICLicenseApply == null ? false : config.IsICLicenseApply),
                                     IsAddCreForIC = (bool)(config.IsICAddCreApply == null ? false : config.IsICAddCreApply),
                                     IsCoverageAreaForIC = (bool)(config.IsCoverageAreaForIC == null ? false : config.IsCoverageAreaForIC),
                                     IsServicesForIC = (bool)(config.IsServicesForIC == null ? false : config.IsServicesForIC),
                                     IsICClientOnMyProfile = (bool)(config.IsICClientOnMyProfile == null ? false : config.IsICClientOnMyProfile),

                                     IsAddCreForStaff = (bool)(config.IsStaffAddCreApply == null ? false : config.IsStaffAddCreApply),
                                     IsBgCheckForStaff = (bool)(config.IsStaffBgCheckApply == null ? false : config.IsStaffBgCheckApply),
                                     IsCoverageAreaForStaff = (bool)(config.IsCoverageAreaForStaff == null ? false : config.IsCoverageAreaForStaff),
                                     IsServicesForStaff = (bool)(config.IsServicesForStaff == null ? false : config.IsServicesForStaff),
                                     IsStaffClientOnMyProfile = (bool)(config.IsStaffClientOnMyProfile == null ? false : config.IsStaffClientOnMyProfile),
                                     IsLicenseForStaff = (bool)(config.IsLicenseForStaff == null ? false : config.IsLicenseForStaff),
                                     IsClientNameApplyForIC = (bool)(config.IsClientNameApplyForIC == null ? false : config.IsClientNameApplyForIC),
                                     IsContractApply = (bool)(config.IsContractManagementApply == null ? false : config.IsContractManagementApply),
                                     #endregion
                                     #region Other
                                     UserId = (int)(config.UserId == null ? 0 : config.UserId),
                                     CreatedBy = (int)(config.CreatedBy == null ? 0 : config.CreatedBy),
                                     CompanyId = config.CompanyId == null ? string.Empty : config.CompanyId,
                                     tblId = config.Id
                                     #endregion
                                 }).FirstOrDefault();

                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for get configuratiin setting details as per IC
        /// </summary>
        /// <param name="userId">userId</param>
        /// <returns>ConfigurationSettingRequestParam</returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>12 Sep 2014</createdDate>
        public IList<ConfigurationSettingRequestParam> GetConfigSettingForIC(List<string> icClientList)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var configdetailsForIC = (from config in objDecisionPointEntities.DP_ConfigurationSetting
                                              where icClientList.Contains(config.CompanyId)
                                              select new ConfigurationSettingRequestParam
                                              {
                                                  #region For IC
                                                  IsBgCheckForIC = (bool)(config.IsICBgCheckApply == null ? false : config.IsICBgCheckApply),
                                                  IsLiceInsForIC = (bool)(config.IsICLicenseApply == null ? false : config.IsICLicenseApply),
                                                  IsInterCheckForIC = (bool)(config.IsICInternalApply == null ? false : config.IsICInternalApply),
                                                  IsAddCreForIC = (bool)(config.IsICAddCreApply == null ? false : config.IsICAddCreApply),
                                                  IsCoverageAreaForIC = (bool)(config.IsCoverageAreaForIC == null ? false : config.IsCoverageAreaForIC),
                                                  IsServicesForIC = (bool)(config.IsServicesForIC == null ? false : config.IsServicesForIC),
                                                  IsICClientOnMyProfile = (bool)(config.IsICClientOnMyProfile == null ? false : config.IsICClientOnMyProfile),
                                                  #endregion
                                                  #region Other
                                                  UserId = (int)(config.CreatedBy == null ? 0 : config.CreatedBy),
                                                  CompanyId = config.CompanyId == null ? string.Empty : config.CompanyId,

                                                  #endregion
                                              }).ToList();

                    return configdetailsForIC;
                }
            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region  Bio Info, Lisence CheckSum, Login alerts & My DashBoard Alerts



        /// <summary>
        /// Used for Updated the Bio Info
        /// </summary>
        /// <param name="bioInfo">bioInfo</param>
        /// <param name="userId">userId</param>
        /// <returns>int</returns>
        ///<CreatedBy>Bobi</CreatedBy> 
        ///<createdDate>30 july 2014</createdDate>
        public int UpdateBioInfo(string bioInfo, int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of particular user from profile 
                    var query = (from profile in objDecisionPointEntities.DP_Profile
                                 where profile.UserId == userId
                                 select profile).FirstOrDefault();
                    if (query != null)
                    {
                        query.BioInfo = bioInfo;
                    }

                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for insert the license verfication details
        /// </summary>
        /// <param name="objLicenseCheckRequestParam">objLicenseCheckRequestParam</param>
        /// <returns>int</returns>
        ///<CreatedBy>Bobi</CreatedBy> 
        ///<createdDate>31 july 2014</createdDate>
        public int InsertLicenseCheckSumm(LicenseCheckRequestParam objLicenseCheckRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (!object.Equals(objLicenseCheckRequestParam, null))
                    {
                        DP_VerfiedLicenseDetails objDPVerfiedLicenseDetails = new DP_VerfiedLicenseDetails()
                        {
                            CompanyId = objLicenseCheckRequestParam.CompanyId,
                            UserId = objLicenseCheckRequestParam.UserId,
                            LicenseNumber = objLicenseCheckRequestParam.LicenseNumber,
                            LicenseType = objLicenseCheckRequestParam.LicenseType,
                            FName = objLicenseCheckRequestParam.FName,
                            LName = objLicenseCheckRequestParam.LName,
                            PhoneNumber = objLicenseCheckRequestParam.Phone,
                            IssueDate = objLicenseCheckRequestParam.IssueDate,
                            EffectiveDate = objLicenseCheckRequestParam.EffectiveDate,
                            ExpDate = objLicenseCheckRequestParam.ExpDate,
                            StateAbbre = objLicenseCheckRequestParam.StateAbbre,
                            County_Code = objLicenseCheckRequestParam.County,
                            Zip = objLicenseCheckRequestParam.Zip,
                            City = objLicenseCheckRequestParam.City

                        };
                        objDecisionPointEntities.DP_VerfiedLicenseDetails.Add(objDPVerfiedLicenseDetails);
                    }
                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// save details of license and insurance details for business entity and IC
        /// </summary>
        /// <param name="objRequestParam">ReceiverReqDocRequestParam</param>
        /// <createdby>Bobi</createdby>
        /// <createddate>Sep 64 2014</createddate>
        /// <returns>int saved or not?</returns>
        public int SetReceiverLicAndInsDetails(ReceiverReqDocRequestParam objRequestParam)
        {
            int licInsId = 0;
            try
            {
                List<string> DocLoclist = new List<string>();
                if (!string.IsNullOrEmpty(objRequestParam.DocLoc))
                {
                    DocLoclist = objRequestParam.DocLoc.Split(char.Parse(Shared.SemiColon)).ToList();
                }
                licInsId = objRequestParam.ReqDocId;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (objRequestParam.Type.Equals(3))
                    {

                        //Edit Req doc details for sender table in database
                        var res = (from reqdoc in objDecisionPointEntities.DP_LicenseInsuranceMaster
                                   where reqdoc.Id == objRequestParam.ReqDocId
                                   select reqdoc).FirstOrDefault();
                        if (res != null)
                        {
                            res.Title = objRequestParam.Title;
                            res.ModifiedDate = DateTime.Now.Date;
                            res.ModifiedBy = objRequestParam.ModifiedById;
                            licInsId = res.Id;
                        }
                        else
                        {
                            //Insert req doc details for sender in database
                            DP_LicenseInsuranceMaster objDPLicenseInsuranceMaster = new DP_LicenseInsuranceMaster()
                            {
                                Title = objRequestParam.Title,
                                IsCompanyNameReq = false,
                                isPolicyNumberReq = false,
                                IsExpiryDateReq = true,
                                isLicenseNumberreq = true,
                                IsStatereq = true,
                                CreatedDate = DateTime.Now.Date,
                                CreatedBy = objRequestParam.UserId,
                                UserId = objRequestParam.UserId,
                                CompanyId = objRequestParam.CompanyId,
                                Allowtoupload = true,
                                IsActive = true,
                                IsDeleted = false,
                                IsElectronic = false
                            };
                            objDecisionPointEntities.DP_LicenseInsuranceMaster.Add(objDPLicenseInsuranceMaster);
                            licInsId = objDPLicenseInsuranceMaster.Id;
                        }
                    }
                    //get the license and insurance details as per lic and ins ID and update the details
                    var licAndInsuDetail = (from livinsReceiver in objDecisionPointEntities.DP_LicenseInsuranceReceiver
                                            where livinsReceiver.CompanyId == objRequestParam.CompanyId &&
                                            livinsReceiver.UserId == objRequestParam.UserId && livinsReceiver.LicInsId == licInsId
                                            select livinsReceiver).FirstOrDefault();
                    if (licAndInsuDetail != null)
                    {
                        licAndInsuDetail.CompanyName = objRequestParam.CompanyName;
                        licAndInsuDetail.PolicyNo = objRequestParam.PolicyNumber;
                        licAndInsuDetail.LicenseNumber = objRequestParam.LisenceNumber;
                        licAndInsuDetail.StateAbbre = objRequestParam.StateAbbre;
                        licAndInsuDetail.ExpirationDate = objRequestParam.ExpirationDate;
                        licAndInsuDetail.IsCompleted = objRequestParam.IsCompleted;
                    }
                    else
                    {
                        DP_LicenseInsuranceReceiver objDP_ReqDocReceiver = new DP_LicenseInsuranceReceiver()
                        {
                            LicInsId = licInsId,
                            CompanyId = objRequestParam.CompanyId,
                            UserId = objRequestParam.UserId,
                            IsMailSend = true,
                            CreatedDate = DateTime.Now.Date,
                            CreatedBy = objRequestParam.UserId,
                            IsActive = true,
                            CompanyName = objRequestParam.CompanyName,
                            PolicyNo = objRequestParam.PolicyNumber,
                            LicenseNumber = objRequestParam.LisenceNumber,
                            StateAbbre = objRequestParam.StateAbbre,
                            ExpirationDate = objRequestParam.ExpirationDate,
                            IsCompleted = objRequestParam.IsCompleted,
                            CompletedDate = System.DateTime.Now.Date
                        };
                        objDecisionPointEntities.DP_LicenseInsuranceReceiver.Add(objDP_ReqDocReceiver);
                    }
                    //delete ack details as per req doc Id
                    var resack = (from reqdocack in objDecisionPointEntities.DP_LicenseInsuranceAck
                                  where reqdocack.LicInsId == licInsId
                                  select reqdocack).ToList();
                    if (!object.Equals(resack, null))
                    {
                        foreach (var item in resack)
                        {
                            objDecisionPointEntities.DP_LicenseInsuranceAck.Remove(item);
                        }
                    }

                    List<string> acklist = new List<string>();
                    if (!string.IsNullOrEmpty(objRequestParam.Ack))
                    {
                        acklist = objRequestParam.Ack.Split(char.Parse(Shared.DollarSign)).ToList();
                    }
                    foreach (var item in acklist)
                    {
                        DP_LicenseInsuranceAck objDP_ReqDocAck = new DP_LicenseInsuranceAck()
                        {
                            LicInsId = licInsId,
                            IsDeleted = false,
                            Ackknow = item
                        };

                        objDecisionPointEntities.DP_LicenseInsuranceAck.Add(objDP_ReqDocAck);
                    }
                    var resuploaddoc = (from reqdocuploaddoc in objDecisionPointEntities.DP_LicenseInsuranceDocUpload
                                        where reqdocuploaddoc.LicInsId == licInsId && reqdocuploaddoc.ReceverUserId == objRequestParam.UserId
                                        select reqdocuploaddoc).ToList();
                    if (!object.Equals(resuploaddoc, null))
                    {
                        foreach (var item in resuploaddoc)
                        {
                            objDecisionPointEntities.DP_LicenseInsuranceDocUpload.Remove(item);
                        }
                    }
                    //save the uploaded documents
                    foreach (var item in DocLoclist)
                    {
                        string[] str = item.Split(char.Parse(Shared.Hash));
                        var DocLocation = str[0];
                        int docSequence = Convert.ToInt32(str[1]);
                        DP_LicenseInsuranceDocUpload objDPLicenseInsuranceDocUpload = new DP_LicenseInsuranceDocUpload()
                        {
                            DocLoc = DocLocation,
                            DocSeqNo = docSequence,
                            ReceverUserId = objRequestParam.UserId,
                            LicInsId = licInsId

                        };
                        objDecisionPointEntities.DP_LicenseInsuranceDocUpload.Add(objDPLicenseInsuranceDocUpload);
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// Used for show alerts on my dashboard section
        /// </summary>
        /// <param name="objMyDashBoardRequestParam">objMyDashBoardRequestParam</param>
        /// <returns>MyDashBoardResponseParam</returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>2 Aug 2014</createdDate>
        public MyDashBoardResponseParam GetLoginUserAlerts(MyDashBoardRequestParam objMyDashBoardRequestParam)
        {
            try
            {
                ConfigurationSettingRequestParam objConfigurationSettingRequestParam = new ConfigurationSettingRequestParam();
                objConfigurationSettingRequestParam = GetConfigSetting(objMyDashBoardRequestParam.CompanyId);
                PermissionTableRequestParam objPermissionTableRequestParam = new PermissionTableRequestParam()
                {
                    CreatedCompanyId = objMyDashBoardRequestParam.CompanyId,
                    UserId = objMyDashBoardRequestParam.UserId,
                    UserType = objMyDashBoardRequestParam.UserType
                };
                // TitleId = GetTitleIdAsPerUserId(objPermissionTableRequestParam);
                //objPermissionTableRequestParam.Type = 1;
                //objPermissionTableRequestParam.TitleId = (int)(TitleId == null ? 0 : TitleId);
                IList<string> permissionList = GetFuntionalPermissionAsPerUserTitle(objPermissionTableRequestParam).Select(x => x.TabName).ToList();
                objMyDashBoardResponseParam = new MyDashBoardResponseParam();
                if (!object.Equals(objMyDashBoardRequestParam, null))
                {
                    MyDashBoardAlertRequestParam objMyDashBoardAlertRequestParam = new MyDashBoardAlertRequestParam()
                    {
                        ConfigurationSettings = objConfigurationSettingRequestParam,
                        MyDashBoardAlertRequest = objMyDashBoardRequestParam,
                        PermissionList = permissionList
                    };
                    #region ALerts for My Dashboard
                    objMyDashBoardResponseParam = GetCommunicationAlerts(objMyDashBoardResponseParam, objMyDashBoardAlertRequestParam);
                    objMyDashBoardResponseParam = GetMyProfileAlerts(objMyDashBoardResponseParam, objMyDashBoardAlertRequestParam);
                    objMyDashBoardResponseParam = GetJCRAlerts(objMyDashBoardResponseParam, objMyDashBoardAlertRequestParam);
                    objMyDashBoardResponseParam = GetInvitesAlerts(objMyDashBoardResponseParam, objMyDashBoardAlertRequestParam);
                    objMyDashBoardResponseParam = GetContractsAlerts(objMyDashBoardResponseParam, objMyDashBoardAlertRequestParam);
                    #endregion

                }


                return objMyDashBoardResponseParam;

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for show alerts on my dashboard section
        /// </summary>
        /// <param name="objMyDashBoardRequestParam">objMyDashBoardRequestParam</param>
        /// <returns>MyDashBoardResponseParam</returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>2 Aug 2014</createdDate>
        private MyDashBoardResponseParam GetCommunicationAlerts(MyDashBoardResponseParam objMyDashBoardResponseParam, MyDashBoardAlertRequestParam objMyDashBoardAlertRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    #region Communication
                    if (objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserType.Equals(Shared.IC))
                    {
                        //communication which is recevied by staff from inside company
                        var IncomFromCompCommAlerts = (from recipient in objDecisionPointEntities.DP_Recipient
                                                       join doc in objDecisionPointEntities.DP_DocumentDetails
                                                       on recipient.DocId equals doc.Id
                                                       where recipient.RecipientUserId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserId
                                                       && recipient.RecipientCompanyid == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId
                                                           && recipient.Status == Shared.New
                                                           && SqlFunctions.DateDiff("DAY", currentdate, recipient.RecipeintDueDate) <= 5 && recipient.IsActive == true
                                                           && doc.IsDeleted == false && recipient.IsDeleted == false &&
                                                       SqlFunctions.DateDiff("DAY", doc.CreatedDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 0

                                                       select new UserDashBoardResponseParam
                                                       {
                                                           DocType = doc.Title == null ? string.Empty : doc.Title,
                                                           DueDate = recipient.RecipeintDueDate,
                                                           DocId = doc.Id
                                                       }).Distinct().ToList();
                        objMyDashBoardResponseParam.IncomFromCompCommAlerts = IncomFromCompCommAlerts;
                    }
                    else
                    {
                        var IncomFromCompCommAlerts = (from recipient in objDecisionPointEntities.DP_Recipient
                                                       join doc in objDecisionPointEntities.DP_DocumentDetails
                                                       on recipient.DocId equals doc.Id
                                                       where recipient.RecipientUserId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserId
                                                       && recipient.RecipientCompanyid == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId
                                                       && recipient.DeliveredCompanyId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId
                                                           && recipient.Status == Shared.New
                                                           && SqlFunctions.DateDiff("DAY", currentdate, recipient.RecipeintDueDate) <= 5 && recipient.IsActive == true
                                                           && doc.IsDeleted == false && recipient.IsDeleted == false &&
                                                       SqlFunctions.DateDiff("DAY", doc.CreatedDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 0

                                                       select new UserDashBoardResponseParam
                                                       {
                                                           DocType = doc.Title == null ? string.Empty : doc.Title,
                                                           DueDate = recipient.RecipeintDueDate,
                                                           DocId = doc.Id
                                                       }).Distinct().ToList();
                        objMyDashBoardResponseParam.IncomFromCompCommAlerts = IncomFromCompCommAlerts;
                    }
                    if (!object.Equals(objMyDashBoardAlertRequestParam.PermissionList, null))
                    {
                        if (objMyDashBoardAlertRequestParam.PermissionList.Contains(Shared.Inbox))
                        {
                            //communication which is recevied by user from ouside the company
                            var IncomFromOutCompCommAlerts = (from recipient in objDecisionPointEntities.DP_Recipient
                                                              join doc in objDecisionPointEntities.DP_DocumentDetails
                                                              on recipient.DocId equals doc.Id
                                                              where recipient.RecipientCompanyid == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId &&
                                                               recipient.DeliveredCompanyId != objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId && recipient.Status == Shared.New
                                                          && recipient.IsActive == true
                                                          && doc.IsDeleted == false && recipient.IsDeleted == false
                                                          && SqlFunctions.DateDiff("DAY", currentdate, recipient.RecipeintDueDate) <= 5
                                                              && SqlFunctions.DateDiff("DAY", doc.CreatedDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 0

                                                              select new UserDashBoardResponseParam
                                                              {
                                                                  DocType = doc.Title == null ? string.Empty : doc.Title,
                                                                  DueDate = recipient.RecipeintDueDate,
                                                                  DocId = doc.Id
                                                              }).Distinct().ToList();
                            //check that particular comm forwarded to company staff or not
                            foreach (var item in IncomFromOutCompCommAlerts.ToList())
                            {
                                var chkres = (from rec in objDecisionPointEntities.DP_Recipient
                                              where rec.DocId == item.DocId && rec.DeliveredCompanyId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId && rec.Status != Shared.Forward
                                              select rec.Id).ToList();
                                if (!object.Equals(chkres, null))
                                {
                                    if (chkres.Count > 0)
                                    {
                                        IncomFromOutCompCommAlerts.Remove(item);
                                    }
                                }

                            }
                            //communication which is forward from particular company
                            objMyDashBoardResponseParam.IncomFromOutCompCommAlerts = IncomFromOutCompCommAlerts;
                        }
                        if (objMyDashBoardAlertRequestParam.PermissionList.Contains(Shared.Communication))
                        {
                            var companybasedcommres = (from recipient in objDecisionPointEntities.DP_Recipient
                                                       join doc in objDecisionPointEntities.DP_DocumentDetails
                                                       on recipient.DocId equals doc.Id
                                                       where recipient.DeliveredCompanyId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId
                                                   && recipient.Status == Shared.New
                                                   && SqlFunctions.DateDiff("DAY", currentdate, recipient.RecipeintDueDate) <= 5 && recipient.IsActive == true
                                                   && doc.IsDeleted == false && recipient.IsDeleted == false &&
                                                       SqlFunctions.DateDiff("DAY", doc.CreatedDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 0
                                                       select new UserDashBoardResponseParam
                                                       {
                                                           DocType = doc.Title == null ? string.Empty : doc.Title,
                                                           DueDate = recipient.RecipeintDueDate,
                                                           DocId = doc.Id,
                                                           reqDocType = recipient.UserType,

                                                       }).Distinct().ToList();
                            objMyDashBoardResponseParam.CompanyBasedCommAlerts = companybasedcommres;
                        }
                    }
                    #endregion
                }
                return objMyDashBoardResponseParam;
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for show alerts on my dashboard section
        /// </summary>
        /// <param name="objMyDashBoardRequestParam">objMyDashBoardRequestParam</param>
        /// <returns>MyDashBoardResponseParam</returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>2 Aug 2014</createdDate>
        private MyDashBoardResponseParam GetMyProfileAlerts(MyDashBoardResponseParam objMyDashBoardResponseParam, MyDashBoardAlertRequestParam objMyDashBoardAlertRequestParam)
        {
            try
            {
                ProfileAlertResponseParam objProfileAlert = new ProfileAlertResponseParam();
                string coverageAreaStatus = GetCAOrServiceDoesNotApply(objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserId, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId, 0);
                int serviceStatus = Convert.ToInt32(GetCAOrServiceDoesNotApply(objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserId, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId, 2), CultureInfo.InvariantCulture);
                bool IsServiceApply = true;
                bool IsCoverageAreaApply = true;
                if (!object.Equals(objMyDashBoardAlertRequestParam.ConfigurationSettings, null))
                {
                    if (objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserType.Equals(Shared.IC))
                    {
                        IsServiceApply = objMyDashBoardAlertRequestParam.ConfigurationSettings.IsServicesForIC;
                        IsCoverageAreaApply = objMyDashBoardAlertRequestParam.ConfigurationSettings.IsCoverageAreaForIC;
                    }
                    else
                    {
                        IsServiceApply = objMyDashBoardAlertRequestParam.ConfigurationSettings.IsServicesForStaff;
                        IsCoverageAreaApply = objMyDashBoardAlertRequestParam.ConfigurationSettings.IsCoverageAreaForStaff;
                    }
                }
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    #region ProfileAlerts
                    if (IsCoverageAreaApply)
                    {
                        bool isIC = false;
                        if (objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserType.Equals(Shared.IC))
                        {
                            isIC = true;
                        }
                        //Coverare Area
                        var stateres = (from state in objDecisionPointEntities.DP_StateMapping
                                        where state.UserId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserId && state.IsCompanyBased == isIC
                                        select state.Id).ToList();
                        if (!object.Equals(stateres, null))
                        {
                            if (stateres.Count <= 0)
                            {
                                var zipres = (from zip in objDecisionPointEntities.DP_ZipMapping
                                              where zip.UserId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserId && zip.IsCompanyBased == isIC
                                              select zip.Id).ToList();
                                if (!object.Equals(zipres, null))
                                {
                                    if (zipres.Count > 0)
                                    {

                                        objProfileAlert.CoverageAreadetail = zipres.Count;

                                    }
                                    else
                                    {
                                        if (!string.IsNullOrEmpty(coverageAreaStatus))
                                        {
                                            if (coverageAreaStatus.Trim().ToLower().Equals(Shared.DNA.Trim().ToLower()))
                                            {
                                                objProfileAlert.CoverageAreadetail = 1;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(coverageAreaStatus))
                                    {
                                        if (coverageAreaStatus.Trim().ToLower().Equals(Shared.DNA.Trim().ToLower()))
                                        {
                                            objProfileAlert.CoverageAreadetail = 1;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                objProfileAlert.CoverageAreadetail = stateres.Count;
                            }
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(coverageAreaStatus))
                            {
                                if (coverageAreaStatus.Trim().ToLower().Equals(Shared.DNA.Trim().ToLower()))
                                {
                                    objProfileAlert.CoverageAreadetail = 1;
                                }
                            }
                        }
                    }
                    else
                    {
                        objProfileAlert.CoverageAreadetail = 1;
                    }

                    //if ((objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserType.Equals(Shared.Individual)) || objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserType.Equals(Shared.IC))
                    if (IsServiceApply)
                    {

                        //Services
                        var serviceres = (from service in objDecisionPointEntities.DP_ServiceMapping
                                          where service.UserId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserId
                                              && service.IsActive == true
                                          select service.Id).ToList();
                        if (!object.Equals(serviceres, null))
                        {
                            if (serviceres.Count > 0)
                            {
                                objProfileAlert.Serviecdetail = serviceres.Count;
                            }
                            else
                            {

                                if (serviceStatus.Equals(2))
                                {
                                    objProfileAlert.Serviecdetail = 1;
                                }

                            }
                        }
                        else
                        {

                            if (serviceStatus.Equals(2))
                            {
                                objProfileAlert.Serviecdetail = 1;
                            }

                        }
                    }
                    else
                    {
                        objProfileAlert.Serviecdetail = 1;
                    }
                    if (!object.Equals(objMyDashBoardAlertRequestParam.PermissionList, null))
                    {
                        if (objMyDashBoardAlertRequestParam.PermissionList.Contains(Shared.ManageStaffTitles))
                        {
                            //Title
                            var titleres = (from title in objDecisionPointEntities.DP_TitleMaster
                                            where title.CompanyId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId
                                        && title.IsActive == true && title.IsDeleted == false
                                            select title.Id).ToList();
                            if (!object.Equals(titleres, null))
                            {
                                if (titleres.Count > 0)
                                {
                                    objProfileAlert.Titledetail = titleres.Count;
                                }
                            }
                        }
                        else { objProfileAlert.Titledetail = 1; }
                        if (objMyDashBoardAlertRequestParam.PermissionList.Contains(Shared.AddStaff))
                        {
                            //check staff details
                            var staffres = (from staffdetails in objDecisionPointEntities.DP_CompanyStaffMapping
                                            where staffdetails.CompanyId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId
                                        && staffdetails.IsActive == true
                                            select staffdetails.Id).ToList();
                            if (!object.Equals(staffres, null))
                            {
                                if (staffres.Count > 0)
                                {
                                    objProfileAlert.Staffdetail = staffres.Count;
                                }
                            }
                        }
                        else { objProfileAlert.Staffdetail = 1; }

                    }
                    IList<ProfileAlertResponseParam> obj = new List<ProfileAlertResponseParam>();
                    obj.Add(objProfileAlert);
                    objMyDashBoardResponseParam.ProfileDetailsAlerts = obj;
                    #endregion
                }
                return objMyDashBoardResponseParam;
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for show alerts on my dashboard section
        /// </summary>
        /// <param name="objMyDashBoardRequestParam">objMyDashBoardRequestParam</param>
        /// <returns>MyDashBoardResponseParam</returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>2 Aug 2014</createdDate>
        private MyDashBoardResponseParam GetJCRAlerts(MyDashBoardResponseParam objMyDashBoardResponseParam, MyDashBoardAlertRequestParam objMyDashBoardAlertRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    #region JCRAlerts
                    //JCR
                    var jcrres = (from recipient in objDecisionPointEntities.DP_ReqDocReceiver
                                  join doc in objDecisionPointEntities.DP_ReqDocSender
                                  on recipient.ReqDocId equals doc.Id
                                  where recipient.UserId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserId
                                  && recipient.CompanyId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId &&
                                      (recipient.IsCompleted == 2 || recipient.IsCompleted == 0) && recipient.IsActive == true && doc.IsActive == true && doc.IsDeleted == false
                                      && doc.DNA == false
                                  && SqlFunctions.DateDiff("DAY", doc.CreatedDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 0 && SqlFunctions.DateDiff("DAY", recipient.CreatedDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 0
                                  select new ReceiverReqDocResponseParam
                                  {
                                      title = doc.Title == null ? string.Empty : doc.Title,
                                      ReqDocId = doc.Id
                                  }).Distinct().ToList();
                    objMyDashBoardResponseParam.JCRDetailsAlerts = jcrres;
                    #endregion
                }
                return objMyDashBoardResponseParam;
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for show alerts on my dashboard section
        /// </summary>
        /// <param name="objMyDashBoardRequestParam">objMyDashBoardRequestParam</param>
        /// <returns>MyDashBoardResponseParam</returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>2 Aug 2014</createdDate>
        private MyDashBoardResponseParam GetInvitesAlerts(MyDashBoardResponseParam objMyDashBoardResponseParam, MyDashBoardAlertRequestParam objMyDashBoardAlertRequestParam)
        {
            try
            {
                bool IsICApply = true;
                bool IsVendorApply = true;
                bool IsClientApply = true;
                if (!object.Equals(objMyDashBoardAlertRequestParam.ConfigurationSettings, null))
                {
                    IsICApply = objMyDashBoardAlertRequestParam.ConfigurationSettings.IsIc;
                    IsVendorApply = objMyDashBoardAlertRequestParam.ConfigurationSettings.IsVendor;
                    IsClientApply = objMyDashBoardAlertRequestParam.ConfigurationSettings.IsClient;
                }
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    #region Invites alerts
                    //Invites
                    if (objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserType.Equals(Shared.Individual) || objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserType.Equals(Shared.Company) || objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserType.Equals(Shared.SuperAdmin))
                    {
                        // if (!permissionname.Equals("User"))
                        // {
                        if (!object.Equals(objMyDashBoardAlertRequestParam.PermissionList, null))
                        {
                            if (objMyDashBoardAlertRequestParam.PermissionList.Contains(Shared.Invite))
                            {
                                var incominvitesres = (from map in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                       join user in objDecisionPointEntities.DP_User
                                                       on map.CreatedBy equals user.Id
                                                       join profile in objDecisionPointEntities.DP_Profile
                                                       on user.Id equals profile.UserId
                                                       where map.ReceiverCompanyId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId &&
                                                       map.Invitationstatus == false && map.Status == 0 && map.IsActive == true && user.IsRegistered == false && user.IsActive == true
                                                       && SqlFunctions.DateDiff("DAY", map.LastInvitationDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 0
                                                       select new InviteResponseParam
                                                       {
                                                           Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                           EmailId = user.EmailId,
                                                           Date = map.CreatedDate,
                                                           TableId = map.Id
                                                       }).Distinct().ToList();
                                objMyDashBoardResponseParam.IncomInviteAlerts = incominvitesres;
                            }
                        }
                        var outGoInvitesRes = (from map in objDecisionPointEntities.DP_ComapnyVendorMapping
                                               join user in objDecisionPointEntities.DP_User
                                               on map.VendorId equals user.Id
                                               join profile in objDecisionPointEntities.DP_Profile
                                               on user.Id equals profile.UserId
                                               where map.CompanyId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId &&
                                               map.Invitationstatus == false && map.Status == 0 && map.IsActive == true && user.IsRegistered == false && user.IsActive == true
                                               && SqlFunctions.DateDiff("DAY", map.LastInvitationDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 0
                                               && SqlFunctions.DateDiff("DAY", map.LastInvitationDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 5
                                               select new InviteResponseParam
                                               {
                                                   Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                   EmailId = user.EmailId,
                                                   Date = map.CreatedDate,
                                                   TableId = map.Id,
                                                   UserType = profile.UserType,
                                                   CreatedById = map.CreatedBy,
                                                   CompanyId = map.CompanyId,
                                                   VendorId = map.VendorId
                                               }).Distinct().ToList();
                        var outGoIcInviteRes = outGoInvitesRes.Where(x => x.UserType == Shared.IC).ToList();
                        var outGoCompanyInviteRes = (from list in outGoInvitesRes
                                                     join flowmapping in objDecisionPointEntities.DP_FlowMapping
                                                     on new { a = list.CreatedById, b = list.CompanyId, c = list.VendorId }
                                                     equals new { a = flowmapping.CreatedBy, b = flowmapping.CreatedCompanyId, c = flowmapping.UserId }
                                                     into Fm
                                                     from fFlowMapping in Fm.DefaultIfEmpty()
                                                     join flowmaster in objDecisionPointEntities.DP_FlowMaster
                                                     on fFlowMapping.FlowId equals flowmaster.Id
                                                      into flowMaster
                                                     from fFlowMaster in flowMaster.DefaultIfEmpty()
                                                     select new { list, fFlowMaster }).ToList();
                        if (!object.Equals(outGoCompanyInviteRes, null))
                        {
                            if (outGoCompanyInviteRes.Count > 0)
                            {
                                outGoCompanyInviteRes.Where(x => x.list.UserType == Shared.Company);
                            }
                        }
                        if (!object.Equals(objMyDashBoardAlertRequestParam.PermissionList, null))
                        {
                            if (objMyDashBoardAlertRequestParam.PermissionList.Contains(Shared.ManageIC) && IsICApply)
                            {
                                objMyDashBoardResponseParam.OutgoICVendorInviteAlerts = outGoIcInviteRes;
                            }
                            if (outGoCompanyInviteRes.Count > 0)
                            {
                                if (objMyDashBoardAlertRequestParam.PermissionList.Contains(Shared.ManageClient) && IsClientApply)
                                {

                                    objMyDashBoardResponseParam.OutgoICVendorInviteAlerts.Union(outGoCompanyInviteRes.Where(x => x.fFlowMaster.Flow == Shared.Client).Select(x => x.list).ToList());

                                }
                                if (objMyDashBoardAlertRequestParam.PermissionList.Contains(Shared.ManageVendor) && IsVendorApply)
                                {
                                    objMyDashBoardResponseParam.OutgoICVendorInviteAlerts.Union(outGoCompanyInviteRes.Where(x => x.fFlowMaster.Flow == Shared.Vendor).Select(x => x.list).ToList());
                                }
                            }
                            if (objMyDashBoardAlertRequestParam.PermissionList.Contains(Shared.ManageStaff))
                            {
                                var outGoStaffInvitesRes = (from map in objDecisionPointEntities.DP_CompanyStaffMapping
                                                            join user in objDecisionPointEntities.DP_User
                                                            on map.StaffId equals user.Id
                                                            join profile in objDecisionPointEntities.DP_Profile
                                                            on user.Id equals profile.UserId
                                                            where map.CompanyId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId &&
                                                            map.Invitationstatus == false && map.Status == 0 && map.IsActive == true && user.IsRegistered == false && user.IsActive == true
                                                            && SqlFunctions.DateDiff("DAY", map.LastInvitationDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 0
                                                            && SqlFunctions.DateDiff("DAY", map.LastInvitationDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 5
                                                            select new InviteResponseParam
                                                            {
                                                                Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                                EmailId = user.EmailId,
                                                                Date = map.CreatedDate,
                                                                TableId = map.Id,
                                                                UserType = profile.UserType
                                                            }).Distinct().ToList();
                                objMyDashBoardResponseParam.OutgoStaffInviteAlerts = outGoStaffInvitesRes;
                            }
                        }
                        //  }
                    }
                    else if (objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserType.Equals(Shared.IC))
                    {
                        if (!object.Equals(objMyDashBoardAlertRequestParam.PermissionList, null))
                        {
                            if (objMyDashBoardAlertRequestParam.PermissionList.Contains(Shared.Invite))
                            {
                                var incomInvitesRes = (from map in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                       join user in objDecisionPointEntities.DP_User
                                                     on map.CreatedBy equals user.Id
                                                       join profile in objDecisionPointEntities.DP_Profile
                                                       on user.Id equals profile.UserId
                                                       where map.VendorId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserId && map.Invitationstatus == false && user.IsRegistered == true
                                                  && map.Status == 0 && map.IsActive == true && user.IsActive == true
                                                  && SqlFunctions.DateDiff("DAY", map.LastInvitationDate, objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.SelectedDate) >= 0
                                                       select new InviteResponseParam
                                                       {
                                                           Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                           EmailId = user.EmailId,
                                                           Date = map.CreatedDate,
                                                           TableId = map.Id
                                                       }).Distinct().ToList();
                                objMyDashBoardResponseParam.IncomInviteAlerts = incomInvitesRes;
                            }
                        }
                    }

                    #endregion
                }
                return objMyDashBoardResponseParam;
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used for show alerts on my dashboard section
        /// </summary>
        /// <param name="objMyDashBoardRequestParam">objMyDashBoardRequestParam</param>
        /// <returns>MyDashBoardResponseParam</returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>2 Aug 2014</createdDate>
        private MyDashBoardResponseParam GetContractsAlerts(MyDashBoardResponseParam objMyDashBoardResponseParam, MyDashBoardAlertRequestParam objMyDashBoardAlertRequestParam)
        {
            try
            {

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    #region Contract Events
                    if (!object.Equals(objMyDashBoardAlertRequestParam.PermissionList, null))
                    {
                        if (objMyDashBoardAlertRequestParam.PermissionList.Contains(Shared.MyContracts))
                        {
                            var contractAlerts = (from contractmaster in objDecisionPointEntities.DP_CreateContractMaster
                                                  join service in objDecisionPointEntities.DP_ServicesMaster
                                                  on contractmaster.ServiceId equals service.Id
                                                  where contractmaster.OwnerId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.UserId && contractmaster.CreatorCompanyId == objMyDashBoardAlertRequestParam.MyDashBoardAlertRequest.CompanyId
                                                  && SqlFunctions.DateDiff("DAY", currentdate, contractmaster.ExpirationDate) <= contractmaster.ExpirationDateReminder
                                                  select new { contractmaster, service }).ToList();
                            foreach (var item in contractAlerts)
                            {
                                if (!item.contractmaster.Status.Equals(Shared.Alerts))
                                {
                                    item.contractmaster.Status = Shared.Alerts;
                                }
                                var contractMailLogs = (from contractMailLog in objDecisionPointEntities.DP_ContractMailReminderLog
                                                        where contractMailLog.ContractId == item.contractmaster.Id
                                                        select contractMailLog).Distinct().ToList();

                                if (contractMailLogs.Count == 0)
                                {
                                    DP_ContractMailReminderLog objDPContractMailReminderLog = new DP_ContractMailReminderLog()
                                    {
                                        ContractId = item.contractmaster.Id,
                                        MailDuration = item.contractmaster.ExpirationDateReminder,
                                        NextMailSendingDate = currentdate
                                    };
                                    objDecisionPointEntities.DP_ContractMailReminderLog.Add(objDPContractMailReminderLog);
                                }

                            }
                            objDecisionPointEntities.SaveChanges();
                            objMyDashBoardResponseParam.ContractsAlerts = contractAlerts.Select(x => new CreateContractResponseParam { Title = x.contractmaster.Title, ManagerName = x.contractmaster.ManagerName, ExpirationDate = x.contractmaster.ExpirationDate, ServiceName = x.service.Service }).ToList();
                        }
                    }
                    #endregion
                }
                return objMyDashBoardResponseParam;
            }
            catch
            {
                throw;
            }
        }


        #endregion

        #region Background Check Master

        /// <summary>
        /// GetBackgroundCheckMaster
        /// </summary>
        /// <createdby>Sumit Saurav</createdby>
        /// <createdDate>Aug 14 2014</createdDate>
        /// <returns>ienumerable BackGroundCheckMasterResponseParam</returns>
        public IList<BackGroundCheckMasterRequestParam> GetBackgroundCheckMaster(string creatorCompanyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from Backmap in objDecisionPointEntities.DP_BGCheckMaster
                                 join BackPkg in objDecisionPointEntities.DP_BGCheckPackageMaster
                                 on Backmap.BGCheckPkgId equals BackPkg.Id
                                 join icType in objDecisionPointEntities.DP_VendorType
                                 on Backmap.ICTypeId equals icType.Id
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on Backmap.UserId equals profile.UserId
                                 where Backmap.CreatorCompanyId == creatorCompanyId && BackPkg.IsDeleted == false
                                 select new BackGroundCheckMasterRequestParam
                                 {
                                     Id = Backmap.Id,
                                     UserId = (int)(Backmap.CreatedBy == null ? 0 : Backmap.CreatedBy),
                                     CompanyId = Backmap.CreatorCompanyId,
                                     ReqCompanyName = profile.BusinessName,
                                     ICType = icType.VendorType,
                                     RequiredByUserId = profile.UserId,
                                     RequiredByCompanyId = Backmap.CompanyId,
                                     BackgroundTitle = BackPkg.BGCheckPackage,
                                     ICTypeId = Backmap.ICTypeId,
                                     BGCheckId = string.IsNullOrEmpty(Backmap.ReqPkgByCompany) ? string.Empty : Backmap.ReqPkgByCompany,
                                     BGCheckPkgId = (int)(Backmap.BGCheckPkgId == null ? 0 : Backmap.BGCheckPkgId),
                                     IsActive = (bool)(Backmap.IsActive == null ? false : Backmap.IsActive)
                                 }).Distinct().OrderByDescending(x => x.ReqCompanyName).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// GetBackgroundCheckPackages
        /// </summary>
        /// <createdby>Bobi</createdby>
        /// <createdDate>Jan 31 2015</createdDate>
        /// <returns>IList BackGroundCheckMasterResponseParam</returns>
        public IList<BackGroundCheckMasterResponseParam> GetBackgroundCheckPackages()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    /*In DP_BGCheckPackageMaster If type if 0:than those packages inculde on JCR and payment And 1:than that package inculde in payment only And if 
                     2: than that package does not inculde in JCR and payment screen both And if 3: than inculde in JCR only */
                    var BGPckDetails = (from BGPckMaster in objDecisionPointEntities.DP_BGCheckPackageMaster
                                        where BGPckMaster.IsDeleted == false && (BGPckMaster.Type == 0 || BGPckMaster.Type == 3)
                                        select new BackGroundCheckMasterResponseParam
                                        {
                                            BackgroundTitle = BGPckMaster.BGCheckPackage,
                                            Id = BGPckMaster.Id,
                                            Source = BGPckMaster.Source,
                                            Description = BGPckMaster.Description,
                                            PacakgeCost = (double)(BGPckMaster.Cost == null ? 0 : BGPckMaster.Cost),
                                            SterlingPkgName = BGPckMaster.SterlingPkgName,
                                            PacakgeType = (byte)BGPckMaster.Type,
                                            PacakgeGroup = BGPckMaster.PacakgeGroup
                                        }).OrderBy(x => x.PacakgeGroup).ToList();
                    return BGPckDetails;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// GetBackgroundCheckPackages
        /// </summary>
        /// <createdby>Bobi</createdby>
        /// <createdDate>Jan 31 2015</createdDate>
        /// <returns>IList BackGroundCheckMasterResponseParam</returns>
        public IList<BackGroundCheckMasterResponseParam> GetPackagesDetails()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from BGPkgMaster in objDecisionPointEntities.DP_BGCheckPackageMaster
                                 join BGPckDetailMaster in objDecisionPointEntities.DP_BGCheckPackageDetailMaster
                                 on BGPkgMaster.Id equals BGPckDetailMaster.PackageId
                                 into BGCheckDM
                                 from BGCheckDetail in BGCheckDM.DefaultIfEmpty()
                                 where BGPkgMaster.IsDeleted == false
                                 select new BackGroundCheckMasterResponseParam
                                 {
                                     BackgroundTitle = BGPkgMaster.BGCheckPackage,
                                     Id = BGPkgMaster.Id,
                                     Source = BGPkgMaster.Source,
                                     Description = BGPkgMaster.Description,
                                     PacakgeCost = (double)(BGPkgMaster.Cost == null ? 0 : BGPkgMaster.Cost),
                                     PacakgeDetailCost = (double)(BGCheckDetail.Cost == null ? 0 : BGCheckDetail.Cost),
                                     SterlingPkgName = BGPkgMaster.SterlingPkgName,
                                     PacakgeType = (byte)BGPkgMaster.Type,
                                     Content = BGCheckDetail.Content
                                 }).ToList();

                    return query;

                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save the compliance sections
        /// </summary>
        /// <param name="objLicInsRequestParam">LicenseInsuranceRequestParam</param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>Jan 31 2015</createdDate>
        public int SetBackgroundMapping(BackGroundCheckMasterRequestParam objBackGroundCheckMasterRequestParam)
        {
            int profLicId = 0;
            try
            {
                if (objBackGroundCheckMasterRequestParam.OperationType.Equals(2) || objBackGroundCheckMasterRequestParam.OperationType.Equals(3))
                {
                    profLicId = SetBacgroundMappingFromProfile(objBackGroundCheckMasterRequestParam);
                }
                else
                {
                    profLicId = SetBacgroundMappingFromJCR(objBackGroundCheckMasterRequestParam);
                }
            }
            catch
            {
                throw;
            }
            return profLicId;
        }
        /// <summary>
        /// Used to save the compliance sections 
        /// </summary>
        /// <param name="objBackGroundCheckMasterRequestParam"></param>
        /// <returns></returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>Jan 31 2015</createdDate>
        private int SetBacgroundMappingFromJCR(BackGroundCheckMasterRequestParam objBackGroundCheckMasterRequestParam)
        {
            int profLicId = 0;

            try
            {
                bgCHeckList = objBackGroundCheckMasterRequestParam.BGCheckId.Split(char.Parse(Shared.Comma)).Select(x => int.Parse(x)).ToList();
                foreach (var client in objBackGroundCheckMasterRequestParam.ClientIds)
                {
                    foreach (var icTypeStaffTitle in objBackGroundCheckMasterRequestParam.ICTypeStaffTitleIds)
                    {
                        foreach (int bgCheckPkgId in bgCHeckList)
                        {
                            using (objDecisionPointEntities = new DecisionPointEntities())
                            {
                                userId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                                companyId = client.Split(char.Parse(Shared.Colon))[1];
                                icTypeStaffTitleId = Convert.ToInt32(icTypeStaffTitle, CultureInfo.InvariantCulture);
                                var bgCheckDetails = (from reqdoc in objDecisionPointEntities.DP_BGCheckMaster
                                                      where reqdoc.BGCheckPkgId == bgCheckPkgId
                                                      && reqdoc.CreatorCompanyId == objBackGroundCheckMasterRequestParam.CompanyId
                                                       && reqdoc.UserId == userId
                                                            && reqdoc.CompanyId == companyId
                                                            && reqdoc.ICTypeId == icTypeStaffTitleId
                                                      select reqdoc).FirstOrDefault();
                                if (bgCheckDetails != null)
                                {
                                    bgCheckDetails.ICTypeId = Convert.ToInt32(icTypeStaffTitle, CultureInfo.InvariantCulture);
                                    bgCheckDetails.BGCheckPkgId = bgCheckPkgId;
                                    bgCheckDetails.UserId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                                    bgCheckDetails.CompanyId = client.Split(char.Parse(Shared.Colon))[1];
                                    bgCheckDetails.ModifiedBy = objBackGroundCheckMasterRequestParam.ModifiedBy;
                                    bgCheckDetails.ModifiedDate = currentdate;
                                    bgCheckDetails.IsActive = true;
                                    bgCheckDetails.IsDeleted = false;
                                    bgCheckDetails.ReqPkgByCompany = objBackGroundCheckMasterRequestParam.BGCheckId;
                                    objDecisionPointEntities.SaveChanges();
                                    profLicId = bgCheckDetails.Id;
                                }
                                else
                                {

                                    //Insert req doc details for sender in database
                                    DP_BGCheckMaster objDPBGCheckMaster = new DP_BGCheckMaster()
                                    {
                                        ICTypeId = Convert.ToInt32(icTypeStaffTitle, CultureInfo.InvariantCulture),
                                        UserId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture),
                                        CompanyId = client.Split(char.Parse(Shared.Colon))[1],
                                        BGCheckPkgId = bgCheckPkgId,
                                        IsActive = true,
                                        CreatedBy = objBackGroundCheckMasterRequestParam.UserId,
                                        CreatedDate = currentdate,
                                        IsDeleted = false,
                                        CreatorCompanyId = objBackGroundCheckMasterRequestParam.CompanyId,
                                        ReqPkgByCompany = objBackGroundCheckMasterRequestParam.BGCheckId,
                                        Source = objBackGroundCheckMasterRequestParam.Source
                                    };
                                    objDecisionPointEntities.DP_BGCheckMaster.Add(objDPBGCheckMaster);
                                    objDecisionPointEntities.SaveChanges();
                                    profLicId = objDPBGCheckMaster.Id;

                                }
                            }

                            objBackGroundCheckMasterRequestParam.BGCheckPkgId = bgCheckPkgId;
                            //Sent Professional License to Recipients
                            SentBGCheckTorecipients(profLicId, objBackGroundCheckMasterRequestParam, client.Split(char.Parse(Shared.Colon))[1], icTypeStaffTitle);

                        }

                    }

                }
                return profLicId;
            }
            catch (Exception)
            {

                throw;
            }
        }


        /// <summary>
        /// Used to save the compliance sections 
        /// </summary>
        /// <param name="objBackGroundCheckMasterRequestParam"></param>
        /// <returns></returns>
        /// <createdby>Bobi</createdby>
        /// <createdDate>Jan 31 2015</createdDate>
        private int SetBacgroundMappingFromProfile(BackGroundCheckMasterRequestParam objBackGroundCheckMasterRequestParam)
        {
            int profLicId = 0;
            bool IsUpdatePkg = false;
            try
            {
                bgCHeckList = objBackGroundCheckMasterRequestParam.BGCheckId.Split(char.Parse(Shared.Comma)).Select(x => int.Parse(x)).ToList();
                foreach (var client in objBackGroundCheckMasterRequestParam.ClientIds)
                {
                    foreach (var icType in objBackGroundCheckMasterRequestParam.ICTypeStaffTitleIds)
                    {
                        foreach (int bgCheckPkgId in bgCHeckList)
                        {
                            using (objDecisionPointEntities = new DecisionPointEntities())
                            {
                                ////delete record if not in updated list but exist in datatabse with particular company
                                //var removebgCheckDetails = (from bgmaster in objDecisionPointEntities.DP_BGCheckMaster
                                //                            join bgmapping in objDecisionPointEntities.DP_BGCheckMapping
                                //                            on bgmaster.Id equals bgmapping.BGCheckId
                                //                            join bgdetailmapping in objDecisionPointEntities.DP_BGCheckDetailMapping
                                //                            on bgmapping.Id equals bgdetailmapping.BGCheckMappingId
                                //                            where !bgCHeckList.Contains((int)bgmaster.BGCheckPkgId)
                                //                            && bgmaster.CreatorCompanyId == objBackGroundCheckMasterRequestParam.CompanyId && bgmaster.UserId == objBackGroundCheckMasterRequestParam.UserId
                                //                            && bgmaster.CompanyId == objBackGroundCheckMasterRequestParam.CompanyId
                                //                            select new { bgmaster, bgdetailmapping }).ToList();
                                //foreach (var item in removebgCheckDetails)
                                //{
                                //    objDecisionPointEntities.DP_BGCheckMaster.Remove(item.bgmaster);
                                //    objDecisionPointEntities.DP_BGCheckDetailMapping.Remove(item.bgdetailmapping);
                                //}
                                //Edit Req doc details for sender table in database
                                //var bgCheckDetails = (from reqdoc in objDecisionPointEntities.DP_BGCheckMaster
                                //                      where reqdoc.BGCheckPkgId == bgCheckPkgId
                                //                      && reqdoc.CreatorCompanyId == objBackGroundCheckMasterRequestParam.CompanyId && reqdoc.UserId == objBackGroundCheckMasterRequestParam.UserId
                                //                      && reqdoc.CompanyId == objBackGroundCheckMasterRequestParam.CompanyId
                                //                      select reqdoc).FirstOrDefault();
                                //if (bgCheckDetails != null)
                                //{
                                //    bgCheckDetails.ICTypeId = Convert.ToInt32(icType, CultureInfo.InvariantCulture);
                                //    bgCheckDetails.BGCheckPkgId = bgCheckPkgId;
                                //    bgCheckDetails.UserId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                                //    bgCheckDetails.CompanyId = client.Split(char.Parse(Shared.Colon))[1];
                                //    bgCheckDetails.ModifiedBy = objBackGroundCheckMasterRequestParam.ModifiedBy;
                                //    bgCheckDetails.ModifiedDate = currentdate;
                                //    bgCheckDetails.IsActive = true;
                                //    bgCheckDetails.IsDeleted = false;
                                //    bgCheckDetails.ReqPkgByCompany = objBackGroundCheckMasterRequestParam.BGCheckId;
                                //    objDecisionPointEntities.SaveChanges();
                                //    profLicId = bgCheckDetails.Id;
                                //}
                                //else
                                //{
                                var chkPackageName = (from pkgName in objDecisionPointEntities.DP_BGCheckPackageMaster
                                                      where pkgName.Id == bgCheckPkgId
                                                      select pkgName.SterlingPkgName).FirstOrDefault();
                                if (!string.IsNullOrEmpty(chkPackageName))
                                {
                                    if (chkPackageName.Contains("Update"))
                                    {
                                        IsUpdatePkg = true;
                                    }
                                }
                                if (!IsUpdatePkg)
                                {
                                    //Insert req doc details for sender in database
                                    DP_BGCheckMaster objDPBGCheckMaster = new DP_BGCheckMaster()
                                    {
                                        ICTypeId = Convert.ToInt32(icType, CultureInfo.InvariantCulture),
                                        UserId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture),
                                        CompanyId = client.Split(char.Parse(Shared.Colon))[1],
                                        BGCheckPkgId = bgCheckPkgId,
                                        IsActive = true,
                                        CreatedBy = objBackGroundCheckMasterRequestParam.UserId,
                                        CreatedDate = currentdate,
                                        IsDeleted = false,
                                        ReqPkgByCompany = objBackGroundCheckMasterRequestParam.BGCheckId,
                                        Source = objBackGroundCheckMasterRequestParam.Source
                                    };
                                    if (objBackGroundCheckMasterRequestParam.PayType.Equals(Shared.One))
                                    {
                                        objDPBGCheckMaster.CreatorCompanyId = client.Split(char.Parse(Shared.Colon))[1];
                                    }
                                    else
                                    {
                                        objDPBGCheckMaster.CreatorCompanyId = objBackGroundCheckMasterRequestParam.CompanyId;
                                    }
                                    objDecisionPointEntities.DP_BGCheckMaster.Add(objDPBGCheckMaster);
                                    objDecisionPointEntities.SaveChanges();
                                    profLicId = objDPBGCheckMaster.Id;
                                }
                                // }


                                ////check OperationType is 0, 1, 2, 3 : 0 for save, and 1 for update, 2 for purchase pacakge by ic And 3 for upgrade package
                                //if (objBackGroundCheckMasterRequestParam.OperationType.Equals(0) || objBackGroundCheckMasterRequestParam.OperationType.Equals(2))
                                //{
                                //    //Insert req doc details for sender in database
                                //    DP_BGCheckMaster objDPBGCheckMaster = new DP_BGCheckMaster()
                                //    {
                                //        ICTypeId = Convert.ToInt32(icType, CultureInfo.InvariantCulture),
                                //        UserId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture),
                                //        CompanyId = client.Split(char.Parse(Shared.Colon))[1],
                                //        BGCheckPkgId = bgCheckPkgId,
                                //        IsActive = true,
                                //        CreatedBy = objBackGroundCheckMasterRequestParam.UserId,
                                //        CreatedDate = currentdate,
                                //        IsDeleted = false,
                                //        CreatorCompanyId = objBackGroundCheckMasterRequestParam.CompanyId,
                                //        ReqPkgByCompany = objBackGroundCheckMasterRequestParam.BGCheckId
                                //    };
                                //    objDecisionPointEntities.DP_BGCheckMaster.Add(objDPBGCheckMaster);
                                //    objDecisionPointEntities.SaveChanges();
                                //    profLicId = objDPBGCheckMaster.Id;
                                //}
                                //else
                                //{
                                //    //Edit Req doc details for sender table in database
                                //    var bgCheckDetails = (from reqdoc in objDecisionPointEntities.DP_BGCheckMaster
                                //                          where reqdoc.BGCheckPkgId == bgCheckPkgId
                                //                          && reqdoc.CreatorCompanyId == objBackGroundCheckMasterRequestParam.CompanyId && reqdoc.UserId == objBackGroundCheckMasterRequestParam.UserId
                                //                          && reqdoc.CompanyId == objBackGroundCheckMasterRequestParam.CompanyId
                                //                          select reqdoc).FirstOrDefault();
                                //    if (bgCheckDetails != null)
                                //    {
                                //        bgCheckDetails.ICTypeId = Convert.ToInt32(icType, CultureInfo.InvariantCulture);
                                //        bgCheckDetails.BGCheckPkgId = bgCheckPkgId;
                                //        bgCheckDetails.UserId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                                //        bgCheckDetails.CompanyId = client.Split(char.Parse(Shared.Colon))[1];
                                //        bgCheckDetails.ModifiedBy = objBackGroundCheckMasterRequestParam.ModifiedBy;
                                //        bgCheckDetails.ModifiedDate = currentdate;
                                //        bgCheckDetails.IsActive = true;
                                //        bgCheckDetails.IsDeleted = false;
                                //        bgCheckDetails.ReqPkgByCompany = objBackGroundCheckMasterRequestParam.BGCheckId;
                                //    }
                                //    objDecisionPointEntities.SaveChanges();
                                //    profLicId = bgCheckDetails.Id;
                                //}
                            }
                            if (!IsUpdatePkg)
                            {
                                objBackGroundCheckMasterRequestParam.BGCheckPkgId = bgCheckPkgId;
                                //Sent Professional License to Recipients
                                SentBGCheckTorecipients(profLicId, objBackGroundCheckMasterRequestParam, client.Split(char.Parse(Shared.Colon))[1], icType);
                            }
                        }

                    }

                }
                return profLicId;
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Used for Sent the created Reqiure documents with title to staff and IC as per services 
        /// </summary>
        /// <param name="profLicId"></param>
        /// <param name="objLicenseInsuranceRequestParam"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>3 june 2014</createddate>
        private void SentBGCheckTorecipients(int profLicId, BackGroundCheckMasterRequestParam objBackGroundCheckMasterRequestParam, string companyid, string icTypeId)
        {

            FilterRequestParam objFilterRequestParam = null;
            try
            {
                //if OperationType 2||3 than background save from sterling response: else background check save from JCR
                if (objBackGroundCheckMasterRequestParam.OperationType.Equals(2) || objBackGroundCheckMasterRequestParam.OperationType.Equals(3))
                {
                    ICResponseParam objICResponseParam = new ICResponseParam() { Id = objBackGroundCheckMasterRequestParam.UserId, CompanyId = objBackGroundCheckMasterRequestParam.CompanyId };
                    SetPackagesListInMapping(profLicId, objBackGroundCheckMasterRequestParam, companyid, icTypeId, objICResponseParam);
                }
                else
                {
                    objFilterRequestParam = new FilterRequestParam();
                    objFilterRequestParam.CompanyId = objBackGroundCheckMasterRequestParam.CompanyId;
                    objFilterRequestParam.vendortypefilter = icTypeId;

                    //get IC list of company
                    objFilterRequestParam.type = 1;
                    IEnumerable<ICResponseParam> IClist = GetICdetailforLicIns(objFilterRequestParam);
                    foreach (var IC in IClist)
                    {
                        using (objDecisionPointEntities = new DecisionPointEntities())
                        {
                            var getICBgStatus = (from bgStatus in objDecisionPointEntities.DP_BGCheckMaster
                                                 join bgMap in objDecisionPointEntities.DP_BGCheckMapping
                                                 on bgStatus.Id equals bgMap.BGCheckId
                                                 where bgStatus.UserId == IC.Id && bgStatus.CompanyId == IC.CompanyId && bgStatus.CreatedBy == IC.Id && bgStatus.CreatorCompanyId == IC.CompanyId &&
                                                 bgStatus.BGCheckPkgId == objBackGroundCheckMasterRequestParam.BGCheckPkgId
                                                 select new { bgMap }).FirstOrDefault();
                            if (!object.Equals(getICBgStatus, null))
                            {
                                objBackGroundCheckMasterRequestParam.SterlingOrderStatus = getICBgStatus.bgMap.Status;
                                objBackGroundCheckMasterRequestParam.SterlingOrderId = getICBgStatus.bgMap.SterlingOrderId;
                                objBackGroundCheckMasterRequestParam.LicenseNumber = getICBgStatus.bgMap.LicenseNumber;
                            }
                        }
                        SetPackagesListInMapping(profLicId, objBackGroundCheckMasterRequestParam, companyid, icTypeId, IC);
                    }
                }
            }
            catch
            {
                throw;
            }

        }


        /// <summary>
        /// Used for Sent the created Reqiure documents with title to staff and IC as per services 
        /// </summary>
        /// <param name="profLicId"></param>
        /// <param name="objLicenseInsuranceRequestParam"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>3 june 2014</createddate>
        private void SetPackagesListInMapping(int profLicId, BackGroundCheckMasterRequestParam objBackGroundCheckMasterRequestParam, string companyid, string icTypeId, ICResponseParam objICResponseParam)
        {
            try
            {
                int profLicenseId = 0;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var bgCheckMappingDetails = (from docrec in objDecisionPointEntities.DP_BGCheckMapping
                                                 where docrec.BGCheckId == profLicId && docrec.UserId == objICResponseParam.Id && docrec.CompanyId == objICResponseParam.CompanyId
                                                 select docrec).FirstOrDefault();
                    if (bgCheckMappingDetails == null)
                    {
                        //save background check mapping details
                        DP_BGCheckMapping objDPBGCheckMapping = new DP_BGCheckMapping()
                        {
                            BGCheckId = profLicId,
                            CompanyId = objICResponseParam.CompanyId,
                            UserId = objICResponseParam.Id,
                            ReceivedDate = currentdate,
                            Source = "Sterling",
                            Status = Shared.Pending,
                            StatusChangeDate = currentdate,
                            SterlingOrderId = objBackGroundCheckMasterRequestParam.SterlingOrderId,
                            RequirmentType = (byte)objBackGroundCheckMasterRequestParam.RequirmentType,
                            LicenseStateCode = objBackGroundCheckMasterRequestParam.StateAbbre,
                            LicenseNumber = objBackGroundCheckMasterRequestParam.LicenseNumber
                        };
                        if (!string.IsNullOrEmpty(objBackGroundCheckMasterRequestParam.SterlingOrderStatus))
                        {
                            objDPBGCheckMapping.Status = objBackGroundCheckMasterRequestParam.SterlingOrderStatus;
                        }
                        objDecisionPointEntities.DP_BGCheckMapping.Add(objDPBGCheckMapping);
                        objDecisionPointEntities.SaveChanges();
                        profLicenseId = objDPBGCheckMapping.Id;
                    }
                    else
                    {
                        bgCheckMappingDetails.BGCheckId = profLicId;
                        bgCheckMappingDetails.CompanyId = objICResponseParam.CompanyId;
                        bgCheckMappingDetails.UserId = objICResponseParam.Id;
                        bgCheckMappingDetails.ModifiedDate = currentdate;
                        bgCheckMappingDetails.ModifiedBy = objBackGroundCheckMasterRequestParam.UserId;
                        profLicenseId = bgCheckMappingDetails.Id;
                        //delete bg check details mapping
                        var pkgDetailsMapping = (from pkgDetailMapping in objDecisionPointEntities.DP_BGCheckDetailMapping
                                                 where pkgDetailMapping.BGCheckMappingId == profLicenseId
                                                 select pkgDetailMapping).ToList();
                        foreach (var item in pkgDetailsMapping)
                        {
                            objDecisionPointEntities.DP_BGCheckDetailMapping.Remove(item);
                        }
                    }
                    //save background check details mapping
                    var packageDetail = (from pkgmaster in objDecisionPointEntities.DP_BGCheckPackageMaster
                                         join pkgDetail in objDecisionPointEntities.DP_BGCheckPackageDetailMaster
                                         on pkgmaster.Id equals pkgDetail.PackageId
                                         where pkgmaster.Id == objBackGroundCheckMasterRequestParam.BGCheckPkgId && pkgmaster.IsDeleted == false
                                         select pkgDetail).ToList();
                    foreach (var item in packageDetail)
                    {
                        var pkgMappingDetail = (from pkgDetailMapping in objDecisionPointEntities.DP_BGCheckDetailMapping
                                                where pkgDetailMapping.BGCheckMappingId == profLicenseId && pkgDetailMapping.BGCheckPkgDetailId == item.Id
                                                select pkgDetailMapping).ToList();
                        if (pkgMappingDetail.Count <= 0)
                        {
                            DP_BGCheckDetailMapping objDPBGCheckDetailMapping = new DP_BGCheckDetailMapping()
                            {
                                BGCheckMappingId = profLicenseId,
                                Status = Shared.Pending,
                                BGCheckPkgDetailId = item.Id,
                                StatusChangeDate = currentdate
                            };
                            objDecisionPointEntities.DP_BGCheckDetailMapping.Add(objDPBGCheckDetailMapping);
                        }
                    }
                    objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        ///// <summary>
        ///// save and update background mapping details
        ///// </summary>
        ///// <param name="objBackGroundCheckMasterRequestParam">BackGroundCheckMasterRequestParam</param>
        ///// <CreatedBy>Sumit Saurav</CreatedBy>
        ///// <CreatedDate>Sept 12 2014</CreatedDate>
        ///// <returns>int</returns>
        //public int SetBackgroundMapping(BackGroundCheckMasterRequestParam objBackGroundCheckMasterRequestParam)
        //{
        //    try
        //    {
        //        using (objDecisionPointEntities = new DecisionPointEntities())
        //        {
        //            if (!object.Equals(objBackGroundCheckMasterRequestParam, null))
        //            {
        //                if (objBackGroundCheckMasterRequestParam.Id > 0) // check wheater to update or insert
        //                {
        //                    #region Update
        //                    var query = (from Backmap in objDecisionPointEntities.DP_BGCheckMaster
        //                                 where Backmap.Id == objBackGroundCheckMasterRequestParam.Id
        //                                 select Backmap).FirstOrDefault();
        //                    if (query != null)
        //                    {
        //                        query.ICTypeId = objBackGroundCheckMasterRequestParam.ICTypeId;
        //                        query.ModifiedBy = objBackGroundCheckMasterRequestParam.ClientUserId;
        //                        query.ModifiedDate = currentdate;
        //                        query.UserId = objBackGroundCheckMasterRequestParam.ClientUserId;
        //                        query.CompanyId = objBackGroundCheckMasterRequestParam.ClientCompanyId;
        //                        query.BGCheckPkgId = objBackGroundCheckMasterRequestParam.BGCheckId;

        //                    }
        //                    #endregion
        //                }
        //                else
        //                {
        //                    #region save

        //                    // save record in BGCheck Master
        //                    DP_BGCheckMaster objDPBGCheckMaster = new DP_BGCheckMaster()
        //                    {
        //                        ICTypeId = objBackGroundCheckMasterRequestParam.ICTypeId,
        //                        ModifiedBy = objBackGroundCheckMasterRequestParam.ClientUserId,
        //                        ModifiedDate = currentdate,
        //                        UserId = objBackGroundCheckMasterRequestParam.ClientUserId,
        //                        CompanyId = objBackGroundCheckMasterRequestParam.ClientCompanyId,
        //                        BGCheckPkgId = objBackGroundCheckMasterRequestParam.BGCheckId,
        //                        IsActive = true,
        //                        CreatedBy = objBackGroundCheckMasterRequestParam.ClientUserId,
        //                        CreatedDate = currentdate

        //                    };
        //                    objDecisionPointEntities.DP_BGCheckMaster.Add(objDPBGCheckMaster);
        //                    // save record in BGCheck Mapping
        //                    DP_BGCheckMapping objDPBGCheckMapping = new DP_BGCheckMapping()
        //                    {
        //                        CompanyId = objBackGroundCheckMasterRequestParam.ICCompanyId,
        //                        UserId = objBackGroundCheckMasterRequestParam.ICUserId,
        //                        Status = objBackGroundCheckMasterRequestParam.BGCheckStatus,
        //                        ReceivedDate = objBackGroundCheckMasterRequestParam.ReceivedDate,
        //                        Source = objBackGroundCheckMasterRequestParam.BGCheckSource,
        //                        ModifiedBy = objBackGroundCheckMasterRequestParam.ClientUserId,
        //                        ModifiedDate = currentdate,
        //                        BGCheckId = objDPBGCheckMaster.Id,
        //                        CreatedBy = objBackGroundCheckMasterRequestParam.ClientUserId,
        //                        CreatedDate = currentdate
        //                    };
        //                    objDecisionPointEntities.DP_BGCheckMapping.Add(objDPBGCheckMapping);
        //                    #endregion
        //                }
        //            }
        //            return objDecisionPointEntities.SaveChanges();
        //        }

        //    }
        //    catch
        //    {
        //        throw;
        //    }
        //}

        /// <summary>
        /// get GetBackgroundMapping details 
        /// </summary>
        /// <param name="createdBy">created by </param>
        /// <param name="userId">user id</param>
        /// <param name="backMasterId">master Id</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Sept 12 2014</CreatedDate>
        /// <returns>list of background details</returns>
        public IEnumerable<BackGroundCheckMasterResponseParam> GetBackgroundMapping(BackGroundCheckMasterRequestParam objBackGroundCheckMasterRequestParam)
        {
            try
            {
                IEnumerable<BackGroundCheckMasterResponseParam> backgroundMappingDetails = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //OperationType 0: case of direct login by user And OperationType 1: case of impersination by super admin And OperationType 2: impersination by any company
                    if (objBackGroundCheckMasterRequestParam.OperationType.Equals(0) || objBackGroundCheckMasterRequestParam.OperationType.Equals(3))
                    {
                        backgroundMappingDetails = (from bgCheckMaster in objDecisionPointEntities.DP_BGCheckMaster
                                                    join bgCheckMap in objDecisionPointEntities.DP_BGCheckMapping
                                                    on bgCheckMaster.Id equals bgCheckMap.BGCheckId

                                                    join bgCheckPackageMaster in objDecisionPointEntities.DP_BGCheckPackageMaster
                                                    on bgCheckMaster.BGCheckPkgId equals bgCheckPackageMaster.Id

                                                    join bgCheckPackgeDetail in objDecisionPointEntities.DP_BGCheckPackageDetailMaster
                                                    on bgCheckPackageMaster.Id equals bgCheckPackgeDetail.PackageId
                                                    into bgCheckPkgDetail
                                                    from bgCheckPkgDetailMaster in bgCheckPkgDetail.DefaultIfEmpty()

                                                    join user in objDecisionPointEntities.DP_User
                                                    on bgCheckMaster.UserId equals user.Id

                                                    join profile in objDecisionPointEntities.DP_Profile
                                                    on user.Id equals profile.UserId

                                                    where bgCheckMap.CompanyId == objBackGroundCheckMasterRequestParam.CompanyId &&
                                                    bgCheckMap.UserId == objBackGroundCheckMasterRequestParam.UserId
                                                    && bgCheckMaster.CreatorCompanyId == objBackGroundCheckMasterRequestParam.CreatorCompanyId
                                                    && bgCheckPackageMaster.IsDeleted == false
                                                    select new BackGroundCheckMasterResponseParam
                                                    {
                                                        BackgroundTitle = bgCheckPackageMaster.BGCheckPackage,
                                                        Id = bgCheckMap.Id,
                                                        Status = bgCheckMap.Status == null ? string.Empty : bgCheckMap.Status,
                                                        Description = (bgCheckPkgDetailMaster.Content == null ? string.Empty : bgCheckPkgDetailMaster.Content),
                                                        Source = (bgCheckPackageMaster.Source == null ? string.Empty : bgCheckPackageMaster.Source),
                                                        CreatedDate = bgCheckPkgDetailMaster.CreatedDate,
                                                        RequiredByCompanyId = bgCheckMaster.CompanyId,
                                                        RequiredByCompanyName = profile.BusinessName,
                                                        ReceivedDate = bgCheckMap.ReceivedDate,
                                                        SterlingPkgName = bgCheckPackageMaster.SterlingPkgName,
                                                        SterlingPkgId = bgCheckPackageMaster.Id,
                                                        SterlingOrderId = string.IsNullOrEmpty(bgCheckMap.SterlingOrderId) == null ? string.Empty : bgCheckMap.SterlingOrderId,
                                                        UpgradePkgIds = bgCheckPackageMaster.UpgradePackage,
                                                        BgCheckMasterTblId = bgCheckMaster.Id,
                                                        LicenseNumber = bgCheckMap.LicenseNumber,
                                                        LicenseExpDate = bgCheckMap.LicenseExpDate,
                                                        LicenseStateCode = bgCheckMap.LicenseStateCode,
                                                        LicenseCountryCode = bgCheckMap.LicenseCountryCode,
                                                        RequirementType = bgCheckMap.RequirmentType == 0 ? "Internal" : "SubClient",
                                                        StateAbbre = bgCheckMap.LicenseStateCode,
                                                        MappedSterlingPkg = bgCheckPackageMaster.MappedPackage
                                                    }).Distinct().OrderBy(x => x.RequiredByCompanyId).ToList();
                        if (objBackGroundCheckMasterRequestParam.OperationType.Equals(3))
                        {
                            var internalReq = backgroundMappingDetails.Where(x => x.RequirementType == "Internal").ToList();
                            var subClientReq = backgroundMappingDetails.Where(x => x.RequirementType == "SubClient").ToList();
                            if (internalReq.Select(x => x.SterlingPkgName).Contains("Premium Package"))
                            {
                                var subClientReq1 = subClientReq.Where(x => x.SterlingPkgName.Contains("Standard Package") || x.SterlingPkgName.Contains("Premium Package") || x.SterlingPkgName.Contains("Enhanced Nationwide Criminal") || x.SterlingPkgName.Contains("Professional License")).ToList();
                                foreach (BackGroundCheckMasterResponseParam objBackGroundCheckMasterResponseParam in subClientReq1)
                                {
                                    subClientReq.Remove(objBackGroundCheckMasterResponseParam);
                                }

                            }
                            else if (internalReq.Select(x => x.SterlingPkgName).Distinct().Contains("Standard Package"))
                            {
                                var subClientReq1 = subClientReq.Where(x => x.SterlingPkgName.Contains("Enhanced Nationwide Criminal") || x.SterlingPkgName.Contains("Standard Package")).ToList();
                                foreach (BackGroundCheckMasterResponseParam objBackGroundCheckMasterResponseParam in subClientReq1)
                                {
                                    subClientReq.Remove(objBackGroundCheckMasterResponseParam);
                                }
                            }
                            backgroundMappingDetails = internalReq.Union(subClientReq).ToList();
                        }
                    }
                    else if (objBackGroundCheckMasterRequestParam.OperationType.Equals(1) || objBackGroundCheckMasterRequestParam.OperationType.Equals(2))
                    {
                        backgroundMappingDetails = (from bgCheckMaster in objDecisionPointEntities.DP_BGCheckMaster
                                                    join bgCheckMap in objDecisionPointEntities.DP_BGCheckMapping
                                                    on bgCheckMaster.Id equals bgCheckMap.BGCheckId

                                                    join bgCheckPackageMaster in objDecisionPointEntities.DP_BGCheckPackageMaster
                                                    on bgCheckMaster.BGCheckPkgId equals bgCheckPackageMaster.Id

                                                    join bgCheckPackgeDetail in objDecisionPointEntities.DP_BGCheckPackageDetailMaster
                                                    on bgCheckPackageMaster.Id equals bgCheckPackgeDetail.PackageId
                                                    into bgCheckPkgDetail
                                                    from bgCheckPkgDetailMaster in bgCheckPkgDetail.DefaultIfEmpty()

                                                    join user in objDecisionPointEntities.DP_User
                                                    on bgCheckMaster.UserId equals user.Id

                                                    join profile in objDecisionPointEntities.DP_Profile
                                                    on user.Id equals profile.UserId

                                                    where bgCheckMap.CompanyId == objBackGroundCheckMasterRequestParam.CompanyId &&
                                                    bgCheckMap.UserId == objBackGroundCheckMasterRequestParam.UserId && profile.UserType == Shared.Company
                                                    && bgCheckPackageMaster.IsDeleted == false
                                                    select new BackGroundCheckMasterResponseParam
                                                    {
                                                        BackgroundTitle = bgCheckPackageMaster.BGCheckPackage,
                                                        Id = bgCheckMap.Id,
                                                        Status = bgCheckMap.Status == null ? string.Empty : bgCheckMap.Status,
                                                        Description = (bgCheckPkgDetailMaster.Content == null ? string.Empty : bgCheckPkgDetailMaster.Content),
                                                        Source = (bgCheckPackageMaster.Source == null ? string.Empty : bgCheckPackageMaster.Source),
                                                        CreatedDate = bgCheckPkgDetailMaster.CreatedDate,
                                                        RequiredByCompanyId = bgCheckMaster.CompanyId,
                                                        RequiredByCompanyName = profile.BusinessName,
                                                        ReceivedDate = bgCheckMap.ReceivedDate,
                                                        SterlingPkgName = bgCheckPackageMaster.SterlingPkgName,
                                                        SterlingPkgId = bgCheckPackageMaster.Id,
                                                        CreatorCompanyId = bgCheckMaster.CreatorCompanyId,
                                                        SterlingOrderId = string.IsNullOrEmpty(bgCheckMap.SterlingOrderId) == null ? string.Empty : bgCheckMap.SterlingOrderId,
                                                        UpgradePkgIds = bgCheckPackageMaster.UpgradePackage,
                                                        BgCheckMasterTblId = bgCheckMaster.Id,
                                                        LicenseNumber = bgCheckMap.LicenseNumber,
                                                        LicenseExpDate = bgCheckMap.LicenseExpDate,
                                                        LicenseStateCode = bgCheckMap.LicenseStateCode,
                                                        LicenseCountryCode = bgCheckMap.LicenseCountryCode,
                                                        RequirementType = bgCheckMap.RequirmentType == 0 ? "Internal" : "SubClient",
                                                        StateAbbre = bgCheckMap.LicenseStateCode,
                                                        MappedSterlingPkg = bgCheckPackageMaster.MappedPackage
                                                    }).Distinct().OrderBy(x => x.RequiredByCompanyId).ToList();
                        if (objBackGroundCheckMasterRequestParam.OperationType.Equals(2))
                        {
                            backgroundMappingDetails = backgroundMappingDetails.Where(x => x.CreatorCompanyId == objBackGroundCheckMasterRequestParam.CreatorCompanyId).ToList();
                        }
                    }
                    return backgroundMappingDetails;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// GetBackgroundUploadDocById
        /// </summary>
        /// <param name="reqDocId">reqDocId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Sept 13 2014</CreatedDate>
        /// <returns>UploadDocDetailsRequestParam</returns>
        public IList<UploadDocDetailsRequestParam> GetBackgroundUploadDocById(int reqDocId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from uploddoc in objDecisionPointEntities.DP_BackgroundDocUpload
                                 where uploddoc.BGMasterId == reqDocId
                                 select new UploadDocDetailsRequestParam
                                 {
                                     DocLoc = uploddoc.DocLoc,
                                     DocSeq = (int)uploddoc.DocSeqNo,
                                     DocTblId = uploddoc.Id

                                 }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// GetBackgroundByVisitorId
        /// </summary>
        /// <param name="createdBy">createdBy</param>
        /// <param name="userId">userId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Sept 16 2014</CreatedDate>
        /// <returns></returns>
        public IList<BackGroundCheckMasterRequestParam> GetBackgroundByVisitorId(int createdBy, int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from Backmap in objDecisionPointEntities.DP_BackGroundMapping
                                 where Backmap.CreatedBy == createdBy && Backmap.UserId == userId
                                 select new BackGroundCheckMasterRequestParam
                                 {
                                     Id = Backmap.Id,
                                     UserId = (int)(Backmap.UserId == null ? 0 : Backmap.UserId),
                                     MasterId = (int)(Backmap.MasterId == null ? 0 : Backmap.MasterId),
                                     BackgroundCheckStatus = Backmap.Status,
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Set IC Client Permissions
        /// </summary>
        /// <param name="createdBy">createdBy</param>
        /// <param name="userId">userId</param>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>Jan 9 2015</CreatedDate>
        /// <returns>int</returns>
        public int SetICClientPermissions(ICClientPermissionRequestParam objICClientPermissionRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var icClientPerDetails = (from icClientPerList in objDecisionPointEntities.DP_ICClientsPermissionMaster
                                              where icClientPerList.CreatedBy == objICClientPermissionRequestParam.ICUserId && icClientPerList.CreatorCompanyId == objICClientPermissionRequestParam.ICCompanyId
                                              select icClientPerList).ToList();
                    if (icClientPerDetails.Count > 0)
                    {
                        foreach (var item in icClientPerDetails)
                        {
                            objDecisionPointEntities.DP_ICClientsPermissionMaster.Remove(item);
                        }
                    }
                    DP_ICClientsPermissionMaster objDPICClientsPermissionMaster = new DP_ICClientsPermissionMaster()
                    {
                        CreatedBy = objICClientPermissionRequestParam.ICUserId,
                        CreatorCompanyId = objICClientPermissionRequestParam.ICCompanyId,
                        CreatedDate = currentdate,
                        IsVisible = objICClientPermissionRequestParam.IsVisible,
                        VisibleTo = objICClientPermissionRequestParam.VisibleTo
                    };
                    objDecisionPointEntities.DP_ICClientsPermissionMaster.Add(objDPICClientsPermissionMaster);
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Get IC Client Permissions
        /// </summary>
        /// <param name="createdBy">createdBy</param>
        /// <param name="userId">userId</param>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>Jan 9 2015</CreatedDate>
        /// <returns>int</returns>
        public IList<ICClientPermissionRequestParam> GetICClientPermissions(ICClientPermissionRequestParam objICClientPermissionRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var icClientPerDetails = (from icClientPerList in objDecisionPointEntities.DP_ICClientsPermissionMaster
                                              where icClientPerList.CreatedBy == objICClientPermissionRequestParam.ICUserId && icClientPerList.CreatorCompanyId == objICClientPermissionRequestParam.ICCompanyId
                                              select new ICClientPermissionRequestParam
                                              {
                                                  IsVisible = (bool)(icClientPerList.IsVisible == null ? false : icClientPerList.IsVisible),
                                                  VisibleTo = icClientPerList.VisibleTo
                                              }).ToList();
                    return icClientPerDetails;

                }

            }
            catch (Exception)
            {

                throw;
            }
        }

        //public bool CheckJobComplianceVerification(BackGroundCheckMasterRequestParam objBackGroundCheckMasterRequestParam)
        //{
        //    try
        //    {
        //        foreach (var icType in objBackGroundCheckMasterRequestParam.ICTypeIds)
        //        {
        //            foreach (int bgCheckPkgId in bgCHeckList)
        //            {
        //                using (objDecisionPointEntities = new DecisionPointEntities())
        //                {
        //                    userId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
        //                    companyId = client.Split(char.Parse(Shared.Colon))[1];
        //                    icTypeId = Convert.ToInt32(icType, CultureInfo.InvariantCulture);
        //                    var chkJCR=(from bgMaster in objDecisionPointEntities.DP_BGCheckMaster
        //                                    where bgMaster.)
        //                }
        //            }
        //        }
        //    }
        //    catch
        //    {
        //        throw;
        //    }
        //}
        #endregion

        #region ProfLicense & Insurance Master & Additional Req Master
        /// <summary>
        /// Used to save the specific reqiurement
        /// </summary>
        /// <param name="objLicInsRequestParam">LicenseInsuranceRequestParam</param>
        /// <returns>int</returns>
        /// <createdBy>Sumit Saurav</createdBy>
        /// <createdDate>Aug 21 2014</createdDate>
        public int SaveProfessionalLicense(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            int profLicId = 0;
            try
            {
                if (objLicInsRequestParam.OperationType.Equals(1))
                {
                    profLicId = SaveProfessionalLicenseFromJCR(objLicInsRequestParam);
                }
                else if (objLicInsRequestParam.OperationType.Equals(2))
                {
                    profLicId = SaveProfessionalLicenseFromProfile(objLicInsRequestParam);
                }

            }
            catch
            {

                throw;
            }
            return profLicId;
        }
        /// <summary>
        /// Used for Save prof license added by JCR Screen
        /// </summary>
        /// <param name="objLicInsRequestParam"></param>
        /// <createdby>atul</createdby>
        /// <createddate>5 may 2015</createddate>
        private int SaveProfessionalLicenseFromJCR(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            int profLicId = 0;
            try
            {
                foreach (var client in objLicInsRequestParam.ClientIds)
                {
                    foreach (var icType in objLicInsRequestParam.ICTypeIds)
                    {
                        using (objDecisionPointEntities = new DecisionPointEntities())
                        {
                            userId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                            companyId = client.Split(char.Parse(Shared.Colon))[1];
                            icTypeStaffTitleId = Convert.ToInt32(icType, CultureInfo.InvariantCulture);
                            var chkProfessionalLicDetails = (from reqdoc in objDecisionPointEntities.DP_ProfessionalLicenseMaster
                                                             where reqdoc.CreatorCompanyId == objLicInsRequestParam.CompanyId
                                                             && reqdoc.UserId == userId &&
                                                             reqdoc.CompanyId == companyId && reqdoc.LicenseType == objLicInsRequestParam.LicenseType &&
                                                             reqdoc.ICTypeId == icTypeStaffTitleId
                                                             select reqdoc).FirstOrDefault();
                            if (!object.Equals(chkProfessionalLicDetails, null))
                            {
                                chkProfessionalLicDetails.ICTypeId = Convert.ToInt32(icType, CultureInfo.InvariantCulture);
                                chkProfessionalLicDetails.IsStaffTitle = objLicInsRequestParam.IsStaffTitle;
                                chkProfessionalLicDetails.UserId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                                chkProfessionalLicDetails.CompanyId = client.Split(char.Parse(Shared.Colon))[1];
                                chkProfessionalLicDetails.CreatorCompanyId = objLicInsRequestParam.CompanyId;
                                chkProfessionalLicDetails.CreatedBy = objLicInsRequestParam.UserId;
                                chkProfessionalLicDetails.CreatedDate = currentdate;
                                chkProfessionalLicDetails.IsActive = true;
                                chkProfessionalLicDetails.IsDeleted = false;
                                chkProfessionalLicDetails.LicenseType = objLicInsRequestParam.LicenseType;
                                chkProfessionalLicDetails.Source = objLicInsRequestParam.Source;
                                profLicId = chkProfessionalLicDetails.Id;
                                //delete ack details as per req doc Id
                                var resack = (from reqdocack in objDecisionPointEntities.Dp_ProfessionalLicenseAck
                                              where reqdocack.ProfLicId == chkProfessionalLicDetails.Id
                                              select reqdocack).ToList();
                                foreach (var item in resack)
                                {
                                    objDecisionPointEntities.Dp_ProfessionalLicenseAck.Remove(item);
                                }
                            }
                            else
                            {
                                //Insert req doc details for sender in database
                                DP_ProfessionalLicenseMaster objDPProfessionalLicenseMaster = new DP_ProfessionalLicenseMaster()
                                {
                                    ICTypeId = Convert.ToInt32(icType, CultureInfo.InvariantCulture),
                                    IsStaffTitle = objLicInsRequestParam.IsStaffTitle,
                                    UserId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture),
                                    CompanyId = client.Split(char.Parse(Shared.Colon))[1],
                                    CreatorCompanyId = objLicInsRequestParam.CompanyId,
                                    CreatedBy = objLicInsRequestParam.UserId,
                                    CreatedDate = currentdate,
                                    IsActive = true,
                                    IsDeleted = false,
                                    LicenseType = objLicInsRequestParam.LicenseType,
                                    Source = objLicInsRequestParam.Source
                                };
                                objDecisionPointEntities.DP_ProfessionalLicenseMaster.Add(objDPProfessionalLicenseMaster);
                                objDecisionPointEntities.SaveChanges();
                                profLicId = objDPProfessionalLicenseMaster.Id;
                            }
                            if (!object.Equals(objLicInsRequestParam.Acknowleagement, null))
                            {
                                //Save Req doc Ack in database
                                foreach (var item in objLicInsRequestParam.Acknowleagement)
                                {
                                    Dp_ProfessionalLicenseAck objDpProfessionalLicenseAck = new Dp_ProfessionalLicenseAck()
                                    {
                                        ProfLicId = profLicId,
                                        IsDeleted = false,
                                        Ackknow = item
                                    };

                                    objDecisionPointEntities.Dp_ProfessionalLicenseAck.Add(objDpProfessionalLicenseAck);
                                }
                                objDecisionPointEntities.SaveChanges();
                            }


                        }
                        //Sent Professional License to Recipients
                        SentProfessionalLicTorecipients(profLicId, objLicInsRequestParam, icType);
                    }

                }
                return profLicId;
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Used for save prof license added by IC profile
        /// </summary>
        /// <param name="objLicInsRequestParam"></param>
        /// <createdby>atul</createdby>
        /// <createddate>5 May 2015</createddate>
        private int SaveProfessionalLicenseFromProfile(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            int profLicId = 0;
            try
            {

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var chkProfessionalLicDetails = (from reqdoc in objDecisionPointEntities.DP_ProfessionalLicenseMaster
                                                     where reqdoc.CreatorCompanyId == objLicInsRequestParam.CompanyId
                                                     && reqdoc.UserId == userId &&
                                                     reqdoc.CompanyId == companyId && reqdoc.LicenseType == objLicInsRequestParam.LicenseType &&
                                                     reqdoc.ICTypeId == objLicInsRequestParam.ICTypeId
                                                     select reqdoc).FirstOrDefault();
                    if (!object.Equals(chkProfessionalLicDetails, null))
                    {
                        chkProfessionalLicDetails.ICTypeId = objLicInsRequestParam.ICTypeId;
                        chkProfessionalLicDetails.UserId = objLicInsRequestParam.UserId;
                        chkProfessionalLicDetails.CompanyId = objLicInsRequestParam.CompanyId;
                        chkProfessionalLicDetails.CreatorCompanyId = objLicInsRequestParam.CompanyId;
                        chkProfessionalLicDetails.CreatedBy = objLicInsRequestParam.UserId;
                        chkProfessionalLicDetails.CreatedDate = currentdate;
                        chkProfessionalLicDetails.IsActive = true;
                        chkProfessionalLicDetails.IsDeleted = false;
                        chkProfessionalLicDetails.LicenseType = objLicInsRequestParam.LicenseType;
                        chkProfessionalLicDetails.Source = objLicInsRequestParam.Source;
                        profLicId = chkProfessionalLicDetails.Id;

                    }
                    else
                    {
                        //Insert req doc details for sender in database
                        DP_ProfessionalLicenseMaster objDPProfessionalLicenseMaster = new DP_ProfessionalLicenseMaster()
                        {
                            ICTypeId = objLicInsRequestParam.ICTypeId,
                            UserId = objLicInsRequestParam.UserId,
                            CompanyId = objLicInsRequestParam.CompanyId,
                            CreatorCompanyId = objLicInsRequestParam.CompanyId,
                            CreatedBy = objLicInsRequestParam.UserId,
                            CreatedDate = currentdate,
                            IsActive = true,
                            IsDeleted = false,
                            LicenseType = objLicInsRequestParam.LicenseType,
                            Source = objLicInsRequestParam.Source
                        };
                        objDecisionPointEntities.DP_ProfessionalLicenseMaster.Add(objDPProfessionalLicenseMaster);
                        objDecisionPointEntities.SaveChanges();
                        profLicId = objDPProfessionalLicenseMaster.Id;
                    }


                    objDecisionPointEntities.SaveChanges();

                }
                //Sent Professional License to Recipients
                SentProfessionalLicTorecipients(profLicId, objLicInsRequestParam, Convert.ToString(objLicInsRequestParam.ICTypeId));
            }
            catch (Exception)
            {

                throw;
            }
            return profLicId;
        }
        /// <summary>
        /// Used for Sent the created Reqiure documents with title to staff and IC as per services 
        /// </summary>
        /// <param name="profLicId"></param>
        /// <param name="objLicenseInsuranceRequestParam"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>3 june 2014</createddate>
        private void SentProfessionalLicTorecipients(int profLicId, LicenseInsuranceRequestParam objLicenseInsuranceRequestParam, string icTypeId)
        {
            try
            {
                if (objLicenseInsuranceRequestParam.OperationType.Equals(1))
                    SaveProfLicenseInMappingFromJCR(profLicId, objLicenseInsuranceRequestParam, icTypeId);
                else if (objLicenseInsuranceRequestParam.OperationType.Equals(2))
                    SaveProfLicenseInMappingFromProfile(profLicId, objLicenseInsuranceRequestParam, icTypeId);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for Save Professional license mapping from IC profile
        /// </summary>
        /// <param name="profLicId"></param>
        /// <param name="objLicenseInsuranceRequestParam"></param>
        /// <param name="icTypeId"></param>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>12 May 2015</CreatedDate>
        private void SaveProfLicenseInMappingFromProfile(int profLicId, LicenseInsuranceRequestParam objLicenseInsuranceRequestParam, string icTypeId)
        {
            int profLicMapId = 0;
            // int stateIdVal = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    //if (objLicenseInsuranceRequestParam.Source.Contains(Shared.Sterling))
                    //{
                    //    var getICBgStatus = (from bgStatus in objDecisionPointEntities.DP_BGCheckMaster
                    //                         join bgMap in objDecisionPointEntities.DP_BGCheckMapping
                    //                         on bgStatus.Id equals bgMap.BGCheckId
                    //                         where bgStatus.UserId == objLicenseInsuranceRequestParam.UserId && bgStatus.CompanyId == objLicenseInsuranceRequestParam.CompanyId && bgStatus.CreatedBy == objLicenseInsuranceRequestParam.UserId && bgStatus.CreatorCompanyId == objLicenseInsuranceRequestParam.CompanyId &&
                    //                         bgStatus.BGCheckPkgId == 4//static id for prfessional license come from DP_BGCheckPackageMaster
                    //                         select new { bgMap }).FirstOrDefault();
                    //    if (!object.Equals(getICBgStatus, null))
                    //    {
                    //        objLicenseInsuranceRequestParam.SterlingOrderStatus = getICBgStatus.bgMap.Status;
                    //        objLicenseInsuranceRequestParam.SterlingOrderId = getICBgStatus.bgMap.SterlingOrderId;
                    //        objLicenseInsuranceRequestParam.LicenseNumber = getICBgStatus.bgMap.LicenseNumber;
                    //        objLicenseInsuranceRequestParam.ExpirationDate = getICBgStatus.bgMap.LicenseExpDate;
                    //        objLicenseInsuranceRequestParam.StateAbbre = getICBgStatus.bgMap.LicenseStateCode;
                    //    }
                    //    var stateId = (from state in objDecisionPointEntities.DP_State
                    //                   where state.StateAbbre == objLicenseInsuranceRequestParam.StateAbbre
                    //                   select state.Id).FirstOrDefault();
                    //    stateIdVal = stateId;
                    //}

                    var profLicMappingDetails = (from docrec in objDecisionPointEntities.DP_ProfessionalLicenseMapping
                                                 where docrec.ProfLiceId == profLicId && docrec.UserId == objLicenseInsuranceRequestParam.UserId && docrec.CompanyId == objLicenseInsuranceRequestParam.CompanyId
                                                 select docrec).FirstOrDefault();
                    if (profLicMappingDetails == null)
                    {
                        DP_ProfessionalLicenseMapping objDPProfessionalLicenseMapping = new DP_ProfessionalLicenseMapping()
                        {
                            ProfLiceId = profLicId,
                            CompanyId = objLicenseInsuranceRequestParam.CompanyId,
                            UserId = objLicenseInsuranceRequestParam.UserId,
                            Title = objLicenseInsuranceRequestParam.Title,
                            Source = objLicenseInsuranceRequestParam.Source,
                            Status = Shared.Pending,
                            LicenseNumber = objLicenseInsuranceRequestParam.LicenseNumber,
                            ExpirationDate = objLicenseInsuranceRequestParam.ExpirationDate,
                            StateId = objLicenseInsuranceRequestParam.StateId
                        };
                        //if (objLicenseInsuranceRequestParam.Source.Contains(Shared.Sterling))
                        //{
                        //    if (!string.IsNullOrEmpty(objLicenseInsuranceRequestParam.SterlingOrderStatus))
                        //    {
                        //        objDPProfessionalLicenseMapping.Status = objLicenseInsuranceRequestParam.SterlingOrderStatus;
                        //    }
                        //    objDPProfessionalLicenseMapping.SterlingOrderId = objLicenseInsuranceRequestParam.SterlingOrderId;
                        //    objDPProfessionalLicenseMapping.LicenseNumber = objLicenseInsuranceRequestParam.LicenseNumber;
                        //    if (!object.Equals(objLicenseInsuranceRequestParam.ExpirationDate, null))
                        //    {
                        //        objDPProfessionalLicenseMapping.ExpirationDate = objLicenseInsuranceRequestParam.ExpirationDate;
                        //    }
                        //    if (stateIdVal != 0)
                        //    {
                        //        objDPProfessionalLicenseMapping.StateId = stateIdVal;
                        //    }
                        //}
                        objDecisionPointEntities.DP_ProfessionalLicenseMapping.Add(objDPProfessionalLicenseMapping);
                        objDecisionPointEntities.SaveChanges();
                        profLicMapId = objDPProfessionalLicenseMapping.Id;
                    }
                    else
                    {
                        profLicMappingDetails.ProfLiceId = profLicId;
                        profLicMappingDetails.CompanyId = objLicenseInsuranceRequestParam.CompanyId;
                        profLicMappingDetails.UserId = objLicenseInsuranceRequestParam.UserId;
                        profLicMappingDetails.Title = objLicenseInsuranceRequestParam.Title;
                        profLicMappingDetails.Source = objLicenseInsuranceRequestParam.Source;
                        profLicMappingDetails.LicenseNumber = objLicenseInsuranceRequestParam.LicenseNumber;
                        profLicMappingDetails.ExpirationDate = objLicenseInsuranceRequestParam.ExpirationDate;
                        profLicMappingDetails.StateId = objLicenseInsuranceRequestParam.StateId;
                        objDecisionPointEntities.SaveChanges();
                        profLicMapId = profLicMappingDetails.Id;
                    }
                    #region DocUpload and Remove

                    List<string> DocLoclist = new List<string>();
                    if (!string.IsNullOrEmpty(objLicenseInsuranceRequestParam.UploadedDoc))
                    {
                        DocLoclist = objLicenseInsuranceRequestParam.UploadedDoc.Split(';').ToList();
                    }
                    //remove uploaded documents by child user[Who received the JCR]
                    var profLicUploadDocs = (from profLicUploadDoc in objDecisionPointEntities.DP_ProfessionalLicenseUploadDocs
                                             where profLicUploadDoc.ProfLicMapId == profLicMapId
                                             select profLicUploadDoc).ToList();
                    if (!object.Equals(profLicUploadDocs, null))
                    {
                        foreach (var item in profLicUploadDocs)
                        {
                            objDecisionPointEntities.DP_ProfessionalLicenseUploadDocs.Remove(item);
                        }
                    }
                    foreach (var item in DocLoclist)
                    {
                        if (!string.IsNullOrEmpty(item))
                        {
                            string[] str = item.Split(char.Parse(Shared.Hash));
                            var DocLocation = str[0];
                            int docSequence = Convert.ToInt32(str[1]);
                            DP_ProfessionalLicenseUploadDocs objDP_ProfessionalLicenseUploadDocs = new DP_ProfessionalLicenseUploadDocs()
                            {
                                ProfLicMapId = profLicMapId,
                                DocLoc = DocLocation,
                                DocSeqNo = docSequence,
                                UserId = objLicenseInsuranceRequestParam.UserId,
                                CompanyId = objLicenseInsuranceRequestParam.CompanyId,
                                ProfLicId = profLicId,
                                DocUploadedDate = currentdate
                            };
                            objDecisionPointEntities.DP_ProfessionalLicenseUploadDocs.Add(objDP_ProfessionalLicenseUploadDocs);

                        }

                    }
                    #endregion

                    #region Update Doc Status in Mapping
                    var profLicMappDetails = (from docrec in objDecisionPointEntities.DP_ProfessionalLicenseMapping
                                              where docrec.ProfLiceId == profLicId && docrec.UserId == objLicenseInsuranceRequestParam.UserId && docrec.CompanyId == objLicenseInsuranceRequestParam.CompanyId
                                              select docrec).FirstOrDefault();
                    if (!object.Equals(profLicMappDetails, null))
                    {
                        profLicMappDetails.DocAndDataStatus = true;
                        profLicMappDetails.DocUploadedDate = currentdate;
                    }
                    #endregion
                    objDecisionPointEntities.SaveChanges();

                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used for save professional license mapping from JCR Screen
        /// </summary>
        /// <param name="profLicId"></param>
        /// <param name="objLicenseInsuranceRequestParam"></param>
        /// <param name="icTypeId"></param>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>12 May 2015</CreatedDate>
        private void SaveProfLicenseInMappingFromJCR(int profLicId, LicenseInsuranceRequestParam objLicenseInsuranceRequestParam, string icTypeId)
        {
            int stateIdVal = 0;
            FilterRequestParam objFilterRequestParam = null;
            try
            {
                objFilterRequestParam = new FilterRequestParam();
                objFilterRequestParam.CompanyId = objLicenseInsuranceRequestParam.CompanyId;
                objFilterRequestParam.vendortypefilter = icTypeId;

                //get IC list of company
                objFilterRequestParam.type = 1;
                IEnumerable<ICResponseParam> IClist = GetICdetailforLicIns(objFilterRequestParam);
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    foreach (var IC in IClist)
                    {
                        if (objLicenseInsuranceRequestParam.Source.Contains(Shared.Sterling))
                        {
                            var getICBgStatus = (from bgStatus in objDecisionPointEntities.DP_BGCheckMaster
                                                 join bgMap in objDecisionPointEntities.DP_BGCheckMapping
                                                 on bgStatus.Id equals bgMap.BGCheckId
                                                 where bgStatus.UserId == IC.Id && bgStatus.CompanyId == IC.CompanyId && bgStatus.CreatedBy == IC.Id && bgStatus.CreatorCompanyId == IC.CompanyId &&
                                                 bgStatus.BGCheckPkgId == 4//static id for prfessional license come from DP_BGCheckPackageMaster
                                                 select new { bgMap }).FirstOrDefault();
                            if (!object.Equals(getICBgStatus, null))
                            {
                                objLicenseInsuranceRequestParam.SterlingOrderStatus = getICBgStatus.bgMap.Status;
                                objLicenseInsuranceRequestParam.SterlingOrderId = getICBgStatus.bgMap.SterlingOrderId;
                                objLicenseInsuranceRequestParam.LicenseNumber = getICBgStatus.bgMap.LicenseNumber;
                                objLicenseInsuranceRequestParam.ExpirationDate = getICBgStatus.bgMap.LicenseExpDate;
                                objLicenseInsuranceRequestParam.StateAbbre = getICBgStatus.bgMap.LicenseStateCode;
                            }
                            var stateId = (from state in objDecisionPointEntities.DP_State
                                           where state.StateAbbre == objLicenseInsuranceRequestParam.StateAbbre
                                           select state.Id).FirstOrDefault();
                            stateIdVal = stateId;
                        }

                        var profLicMappingDetails = (from docrec in objDecisionPointEntities.DP_ProfessionalLicenseMapping
                                                     where docrec.ProfLiceId == profLicId && docrec.UserId == IC.Id && docrec.CompanyId == IC.CompanyId
                                                     select docrec).FirstOrDefault();
                        if (profLicMappingDetails == null)
                        {
                            DP_ProfessionalLicenseMapping objDPProfessionalLicenseMapping = new DP_ProfessionalLicenseMapping()
                            {
                                ProfLiceId = profLicId,
                                CompanyId = IC.CompanyId,
                                UserId = IC.Id,
                                Title = objLicenseInsuranceRequestParam.Title,
                                Source = objLicenseInsuranceRequestParam.Source,
                                Status = Shared.Pending,

                            };
                            if (objLicenseInsuranceRequestParam.Source.Contains(Shared.Sterling))
                            {
                                if (!string.IsNullOrEmpty(objLicenseInsuranceRequestParam.SterlingOrderStatus))
                                {
                                    objDPProfessionalLicenseMapping.Status = objLicenseInsuranceRequestParam.SterlingOrderStatus;
                                }
                                objDPProfessionalLicenseMapping.SterlingOrderId = objLicenseInsuranceRequestParam.SterlingOrderId;
                                objDPProfessionalLicenseMapping.LicenseNumber = objLicenseInsuranceRequestParam.LicenseNumber;
                                if (!object.Equals(objLicenseInsuranceRequestParam.ExpirationDate, null))
                                {
                                    objDPProfessionalLicenseMapping.ExpirationDate = objLicenseInsuranceRequestParam.ExpirationDate;
                                }
                                if (stateIdVal != 0)
                                {
                                    objDPProfessionalLicenseMapping.StateId = stateIdVal;
                                }
                            }
                            objDecisionPointEntities.DP_ProfessionalLicenseMapping.Add(objDPProfessionalLicenseMapping);
                        }
                        else
                        {
                            profLicMappingDetails.ProfLiceId = profLicId;
                            profLicMappingDetails.CompanyId = IC.CompanyId;
                            profLicMappingDetails.UserId = IC.Id;
                            profLicMappingDetails.Title = objLicenseInsuranceRequestParam.Title;
                            profLicMappingDetails.Source = objLicenseInsuranceRequestParam.Source;
                        }

                    }
                    objDecisionPointEntities.SaveChanges();


                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save the specific reqiurement
        /// </summary>
        /// <param name="objLicInsRequestParam">LicenseInsuranceRequestParam</param>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Feb 4 2015</createdDate>
        public int SaveInsurance(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            int profLicId = 0;
            try
            {
                if (objLicInsRequestParam.OperationType.Equals(1))
                {
                    profLicId = SaveInsuranceFromJCR(objLicInsRequestParam);
                }
                else if (objLicInsRequestParam.OperationType.Equals(2))
                {
                    profLicId = SaveInsuranceFromMyProfile(objLicInsRequestParam);
                }
            }
            catch
            {
                throw;
            }
            return profLicId;
        }
        /// <summary>
        /// Used for save insurance from JCR screen
        /// </summary>
        /// <param name="objLicInsRequestParam"></param>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Feb 4 2015</createdDate>
        private int SaveInsuranceFromJCR(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            int profLicId = 0;
            try
            {
                foreach (var client in objLicInsRequestParam.ClientIds)
                {
                    foreach (var icType in objLicInsRequestParam.ICTypeIds)
                    {
                        using (objDecisionPointEntities = new DecisionPointEntities())
                        {
                            userId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                            companyId = client.Split(char.Parse(Shared.Colon))[1];
                            icTypeStaffTitleId = Convert.ToInt32(icType, CultureInfo.InvariantCulture);
                            var chkInsDetails = (from reqdoc in objDecisionPointEntities.DP_InsuranceMaster
                                                 where reqdoc.CreatorCompanyId == objLicInsRequestParam.CompanyId &&
                                                 reqdoc.UserId == userId &&
                                                 reqdoc.CompanyId == companyId && reqdoc.InsuranceType == objLicInsRequestParam.InsuranceType &&
                                                 reqdoc.ICTypeId == icTypeStaffTitleId
                                                 select reqdoc).FirstOrDefault();
                            if (chkInsDetails != null)
                            {
                                chkInsDetails.ICTypeId = Convert.ToInt32(icType, CultureInfo.InvariantCulture);
                                chkInsDetails.UserId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture);
                                chkInsDetails.CompanyId = client.Split(char.Parse(Shared.Colon))[1];
                                chkInsDetails.CreatorCompanyId = objLicInsRequestParam.CompanyId;
                                chkInsDetails.CreatedBy = objLicInsRequestParam.UserId;
                                chkInsDetails.CreatedDate = currentdate;
                                chkInsDetails.IsActive = true;
                                chkInsDetails.IsDeleted = false;
                                chkInsDetails.InsuranceType = objLicInsRequestParam.InsuranceType;
                                profLicId = chkInsDetails.Id;
                                //delete ack details as per req doc Id
                                var resack = (from reqdocack in objDecisionPointEntities.DP_InsuranceAck
                                              where reqdocack.InsId == chkInsDetails.Id
                                              select reqdocack).ToList();
                                foreach (var item in resack)
                                {
                                    objDecisionPointEntities.DP_InsuranceAck.Remove(item);
                                }
                            }
                            else
                            {
                                //Insert req doc details for sender in database
                                DP_InsuranceMaster objDPInsuranceMaster = new DP_InsuranceMaster()
                                {
                                    ICTypeId = Convert.ToInt32(icType, CultureInfo.InvariantCulture),
                                    UserId = Convert.ToInt32(client.Split(char.Parse(Shared.Colon))[0], CultureInfo.InvariantCulture),
                                    CompanyId = client.Split(char.Parse(Shared.Colon))[1],
                                    CreatorCompanyId = objLicInsRequestParam.CompanyId,
                                    CreatedBy = objLicInsRequestParam.UserId,
                                    CreatedDate = currentdate,
                                    IsActive = true,
                                    IsDeleted = false,
                                    InsuranceType = objLicInsRequestParam.InsuranceType,
                                    Source = objLicInsRequestParam.Source,
                                    InsuranceVerType = objLicInsRequestParam.InsuranceVerType
                                };
                                objDecisionPointEntities.DP_InsuranceMaster.Add(objDPInsuranceMaster);
                                objDecisionPointEntities.SaveChanges();
                                profLicId = objDPInsuranceMaster.Id;
                            }


                            //Save Req doc Ack in database
                            foreach (var item in objLicInsRequestParam.Acknowleagement)
                            {
                                DP_InsuranceAck objDPInsuranceAck = new DP_InsuranceAck()
                                {
                                    InsId = profLicId,
                                    IsDeleted = false,
                                    Ackknow = item
                                };

                                objDecisionPointEntities.DP_InsuranceAck.Add(objDPInsuranceAck);
                            }
                            objDecisionPointEntities.SaveChanges();
                        }
                        //Sent Professional License to Recipients
                        SentInsuranceTorecipients(profLicId, objLicInsRequestParam, icType);
                    }

                }

            }
            catch
            {
                throw;
            }
            return profLicId;
        }
        /// <summary>
        /// Used for save insurance from Profile screen
        /// </summary>
        /// <param name="objLicInsRequestParam"></param>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Feb 4 2015</createdDate>
        private int SaveInsuranceFromMyProfile(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            int profLicId = 0;
            try
            {

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var chkInsDetails = (from reqdoc in objDecisionPointEntities.DP_InsuranceMaster
                                         where reqdoc.CreatorCompanyId == objLicInsRequestParam.CompanyId &&
                                         reqdoc.UserId == userId &&
                                         reqdoc.CompanyId == companyId && reqdoc.InsuranceType == objLicInsRequestParam.InsuranceType &&
                                         reqdoc.ICTypeId == objLicInsRequestParam.ICTypeId
                                         select reqdoc).FirstOrDefault();
                    if (chkInsDetails != null)
                    {
                        chkInsDetails.ICTypeId = objLicInsRequestParam.ICTypeId;
                        chkInsDetails.UserId = objLicInsRequestParam.UserId;
                        chkInsDetails.CompanyId = objLicInsRequestParam.CompanyId;
                        chkInsDetails.CreatorCompanyId = objLicInsRequestParam.CompanyId;
                        chkInsDetails.CreatedBy = objLicInsRequestParam.UserId;
                        chkInsDetails.CreatedDate = currentdate;
                        chkInsDetails.IsActive = true;
                        chkInsDetails.IsDeleted = false;
                        chkInsDetails.InsuranceType = objLicInsRequestParam.InsuranceType;
                        profLicId = chkInsDetails.Id;

                    }
                    else
                    {
                        //Insert req doc details for sender in database
                        DP_InsuranceMaster objDPInsuranceMaster = new DP_InsuranceMaster()
                        {
                            ICTypeId = objLicInsRequestParam.ICTypeId,
                            UserId = objLicInsRequestParam.UserId,
                            CompanyId = objLicInsRequestParam.CompanyId,
                            CreatorCompanyId = objLicInsRequestParam.CompanyId,
                            CreatedBy = objLicInsRequestParam.UserId,
                            CreatedDate = currentdate,
                            IsActive = true,
                            IsDeleted = false,
                            InsuranceType = objLicInsRequestParam.InsuranceType,
                            Source = objLicInsRequestParam.Source,
                            InsuranceVerType = objLicInsRequestParam.InsuranceVerType
                        };
                        objDecisionPointEntities.DP_InsuranceMaster.Add(objDPInsuranceMaster);
                        objDecisionPointEntities.SaveChanges();
                        profLicId = objDPInsuranceMaster.Id;
                    }

                    objDecisionPointEntities.SaveChanges();
                }
                //Sent Professional License to Recipients
                SentInsuranceTorecipients(profLicId, objLicInsRequestParam, Convert.ToString(objLicInsRequestParam.ICTypeId, CultureInfo.InvariantCulture));


            }
            catch
            {
                throw;
            }
            return profLicId;
        }
        /// <summary>
        /// Used for Sent the created Reqiure documents with title to staff and IC as per services 
        /// </summary>
        /// <param name="profLicId"></param>
        /// <param name="objLicenseInsuranceRequestParam"></param>
        /// <createdby>bobi</createdby>
        /// <createddate>3 june 2014</createddate>
        private void SentInsuranceTorecipients(int profLicId, LicenseInsuranceRequestParam objLicenseInsuranceRequestParam, string icTypeId)
        {
            try
            {
                if (objLicenseInsuranceRequestParam.OperationType.Equals(1))
                    SaveInsuranceInMappingFromJCR(profLicId, objLicenseInsuranceRequestParam, icTypeId);
                else if (objLicenseInsuranceRequestParam.OperationType.Equals(2))
                    SaveInsuranceInMappingFromProfile(profLicId, objLicenseInsuranceRequestParam, icTypeId);
            }
            catch
            {
                throw;
            }

        }
        /// <summary>
        /// Used for save insurance mapping from JCR screen
        /// </summary>
        /// <param name="objLicInsRequestParam"></param>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Feb 4 2015</createdDate>
        private void SaveInsuranceInMappingFromJCR(int profLicId, LicenseInsuranceRequestParam objLicenseInsuranceRequestParam, string icTypeId)
        {
            FilterRequestParam objFilterRequestParam = null;
            try
            {
                objFilterRequestParam = new FilterRequestParam();
                objFilterRequestParam.CompanyId = objLicenseInsuranceRequestParam.CompanyId;
                objFilterRequestParam.vendortypefilter = icTypeId;

                //get IC list of company
                objFilterRequestParam.type = 1;
                IEnumerable<ICResponseParam> IClist = GetICdetailforLicIns(objFilterRequestParam);
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    foreach (var IC in IClist)
                    {
                        var profInsMappingDetails = (from docrec in objDecisionPointEntities.DP_InsuranceMapping
                                                     where docrec.InsId == profLicId && docrec.UserId == IC.Id && docrec.CompanyId == IC.CompanyId
                                                     select docrec).FirstOrDefault();
                        if (profInsMappingDetails == null)
                        {
                            DP_InsuranceMapping objDPInsuranceMapping = new DP_InsuranceMapping()
                            {
                                InsId = profLicId,
                                CompanyId = IC.CompanyId,
                                UserId = IC.Id,
                                Title = objLicenseInsuranceRequestParam.Title,
                                Status = Shared.Pending
                            };
                            objDecisionPointEntities.DP_InsuranceMapping.Add(objDPInsuranceMapping);
                        }
                        else
                        {
                            profInsMappingDetails.InsId = profLicId;
                            profInsMappingDetails.CompanyId = IC.CompanyId;
                            profInsMappingDetails.UserId = IC.Id;
                            profInsMappingDetails.Title = objLicenseInsuranceRequestParam.Title;
                        }

                    }
                    objDecisionPointEntities.SaveChanges();


                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used for save insurance mapping from Profile page
        /// </summary>
        /// <param name="objLicInsRequestParam"></param>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Feb 4 2015</createdDate>
        private void SaveInsuranceInMappingFromProfile(int profLicId, LicenseInsuranceRequestParam objLicenseInsuranceRequestParam, string icTypeId)
        {
            try
            {
                int insMapId = 0;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var profInsMappingDetails = (from docrec in objDecisionPointEntities.DP_InsuranceMapping
                                                 where docrec.InsId == profLicId && docrec.UserId == objLicenseInsuranceRequestParam.UserId && docrec.CompanyId == objLicenseInsuranceRequestParam.CompanyId
                                                 select docrec).FirstOrDefault();
                    if (profInsMappingDetails == null)
                    {
                        DP_InsuranceMapping objDPInsuranceMapping = new DP_InsuranceMapping()
                        {
                            InsId = profLicId,
                            CompanyId = objLicenseInsuranceRequestParam.CompanyId,
                            UserId = objLicenseInsuranceRequestParam.UserId,
                            Title = objLicenseInsuranceRequestParam.Title,
                            Status = Shared.Pending,
                            CompanyName = objLicenseInsuranceRequestParam.CompanyName,
                            PolicyNumber = objLicenseInsuranceRequestParam.PolicyNumber,
                            Aggregate = objLicenseInsuranceRequestParam.Aggregate,
                            SingleOccurance = objLicenseInsuranceRequestParam.SingleOccurance
                        };
                        objDecisionPointEntities.DP_InsuranceMapping.Add(objDPInsuranceMapping);
                        objDecisionPointEntities.SaveChanges();
                        insMapId = objDPInsuranceMapping.Id;
                    }
                    else
                    {
                        profInsMappingDetails.InsId = profLicId;
                        profInsMappingDetails.CompanyId = objLicenseInsuranceRequestParam.CompanyId;
                        profInsMappingDetails.UserId = objLicenseInsuranceRequestParam.UserId;
                        profInsMappingDetails.Title = objLicenseInsuranceRequestParam.Title;
                        profInsMappingDetails.CompanyName = objLicenseInsuranceRequestParam.CompanyName;
                        profInsMappingDetails.PolicyNumber = objLicenseInsuranceRequestParam.PolicyNumber;
                        profInsMappingDetails.Aggregate = objLicenseInsuranceRequestParam.Aggregate;
                        profInsMappingDetails.SingleOccurance = objLicenseInsuranceRequestParam.SingleOccurance;

                        insMapId = profInsMappingDetails.Id;
                    }
                    #region DocUpload and Remove

                    List<string> DocLoclist = new List<string>();
                    if (!string.IsNullOrEmpty(objLicenseInsuranceRequestParam.UploadedDoc))
                    {
                        DocLoclist = objLicenseInsuranceRequestParam.UploadedDoc.Split(';').ToList();
                    }
                    //remove uploaded documents by child user[Who received the JCR]
                    var profLicUploadDocs = (from profLicUploadDoc in objDecisionPointEntities.DP_InsuranceUploadDocs
                                             where profLicUploadDoc.InsMapId == insMapId
                                             select profLicUploadDoc).ToList();
                    if (!object.Equals(profLicUploadDocs, null))
                    {
                        foreach (var item in profLicUploadDocs)
                        {
                            objDecisionPointEntities.DP_InsuranceUploadDocs.Remove(item);
                        }
                    }
                    foreach (var item in DocLoclist)
                    {
                        if (!string.IsNullOrEmpty(item))
                        {
                            string[] str = item.Split(char.Parse(Shared.Hash));
                            var DocLocation = str[0];
                            int docSequence = Convert.ToInt32(str[1]);
                            DP_InsuranceUploadDocs objDP_InsuranceUploadDocs = new DP_InsuranceUploadDocs()
                            {
                                InsMapId = insMapId,
                                DocLoc = DocLocation,
                                DocSeqNo = docSequence,
                                UserId = objLicenseInsuranceRequestParam.UserId,
                                CompanyId = objLicenseInsuranceRequestParam.CompanyId,
                                InsId = profLicId,
                                DocUploadedDate = currentdate
                            };
                            objDecisionPointEntities.DP_InsuranceUploadDocs.Add(objDP_InsuranceUploadDocs);

                        }

                    }
                    #endregion

                    #region Update Doc Status in Mapping
                    var profLicMappDetails = (from docrec in objDecisionPointEntities.DP_InsuranceMapping
                                              where docrec.InsId == profLicId && docrec.UserId == objLicenseInsuranceRequestParam.UserId && docrec.CompanyId == objLicenseInsuranceRequestParam.CompanyId
                                              select docrec).FirstOrDefault();
                    if (!object.Equals(profLicMappDetails, null))
                    {
                        profLicMappDetails.DocAndDataStatus = true;
                        profLicMappDetails.DocUploadedDate = currentdate;
                    }
                    #endregion
                    objDecisionPointEntities.SaveChanges();

                }


            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Get IC detail  for license insurance
        /// </summary>
        /// <param name="filterRequestParam">FilterRequestParam</param>
        /// <returns>ICResponseParam</returns>         
        /// <createdBy>Sumit Saurav</createdBy>
        /// <createdDate>Aug 26 2013</createdDate>
        public IEnumerable<ICResponseParam> GetICdetailforLicIns(FilterRequestParam filterRequestParam)
        {
            IEnumerable<ICResponseParam> finallist = null;
            try
            {
                objAdditionalRequirementRep = new AdditionalRequirementRep();
                finallist = objAdditionalRequirementRep.GetICdetailforLicIns(filterRequestParam);
                return finallist;
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Get License Insurance Master details
        /// </summary>
        /// <param name="objSubmitReqDocRequestParam">LicenseInsuranceRequestParam</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Aug 26 2014</CreatedDate>
        /// <returns>LicenseInsuranceResponseParam</returns>
        public IEnumerable<LicenseInsuranceResponseParam> GetProfessionalLicenseMaster(string creatorCompanyId)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from profLicemaster in objDecisionPointEntities.DP_ProfessionalLicenseMaster
                                 join icType in objDecisionPointEntities.DP_VendorType
                                 on profLicemaster.ICTypeId equals icType.Id
                                 into newICType
                                 from finalICType in newICType.DefaultIfEmpty()
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on profLicemaster.UserId equals profile.UserId
                                 join title in objDecisionPointEntities.DP_TitleMaster
                                 on profLicemaster.ICTypeId equals title.Id into newTitle
                                 from finalTitle in newTitle.DefaultIfEmpty()
                                 where profLicemaster.CreatorCompanyId == creatorCompanyId
                                 select new LicenseInsuranceResponseParam
                                 {
                                     LicInsId = profLicemaster.Id,

                                     UserId = (int)(profLicemaster.CreatedBy == null ? 0 : profLicemaster.CreatedBy),
                                     CompanyId = profLicemaster.CreatorCompanyId,
                                     VendorTypeId = profLicemaster.ICTypeId,
                                     VendorType = finalICType.VendorType ?? finalTitle.Title,
                                     ReqCompanyName = profile.BusinessName,
                                     RequiredByUserId = profile.UserId,
                                     RequiredByCompanyId = profLicemaster.CompanyId,
                                     LicenseType = profLicemaster.LicenseType,
                                     Source = profLicemaster.Source,
                                     IsStaffTitle = profLicemaster.IsStaffTitle??false,
                                     IsActive = (bool)(profLicemaster.IsActive == null ? false : profLicemaster.IsActive)
                                 }).Distinct().OrderByDescending(x => x.ReqCompanyName).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Get Insurance Master details
        /// </summary>
        /// <param name="objSubmitReqDocRequestParam">LicenseInsuranceRequestParam</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Aug 26 2014</CreatedDate>
        /// <returns>LicenseInsuranceResponseParam</returns>
        public IEnumerable<LicenseInsuranceResponseParam> GetInsuranceMaster(string creatorCompanyId)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from insmaster in objDecisionPointEntities.DP_InsuranceMaster
                                 join icType in objDecisionPointEntities.DP_VendorType
                                 on insmaster.ICTypeId equals icType.Id
                                 into newICType
                                 from finalICType in newICType.DefaultIfEmpty()
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on insmaster.UserId equals profile.UserId
                                 join title in objDecisionPointEntities.DP_TitleMaster
                                 on insmaster.ICTypeId equals title.Id into newTitle
                                 from finalTitle in newTitle.DefaultIfEmpty()
                                 where insmaster.CreatorCompanyId == creatorCompanyId
                                 select new LicenseInsuranceResponseParam
                                 {
                                     LicInsId = insmaster.Id,
                                     UserId = (int)(insmaster.CreatedBy == null ? 0 : insmaster.CreatedBy),
                                     CompanyId = insmaster.CreatorCompanyId,
                                     VendorTypeId = insmaster.ICTypeId,
                                     VendorType = finalICType.VendorType,
                                     ReqCompanyName = profile.BusinessName,
                                     RequiredByUserId = profile.UserId,
                                     RequiredByCompanyId = insmaster.CompanyId,
                                     InsuranceType = insmaster.InsuranceType,
                                     IsActive = (bool)(insmaster.IsActive == null ? false : insmaster.IsActive),
                                     InsuranceVerType = insmaster.InsuranceVerType
                                 }).Distinct().OrderByDescending(x => x.ReqCompanyName).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Get Insurance Master details
        /// </summary>
        /// <param name="objSubmitReqDocRequestParam">LicenseInsuranceRequestParam</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Aug 26 2014</CreatedDate>
        /// <returns>LicenseInsuranceResponseParam</returns>
        public IEnumerable<LicenseInsuranceResponseParam> GetAdditionareqMaster(string creatorCompanyId)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from addReqMaster in objDecisionPointEntities.DP_AdditionalReqMaster
                                 join icType in objDecisionPointEntities.DP_VendorType
                                 on addReqMaster.ICTypeId equals icType.Id
                                 into newICType
                                 from finalICType in newICType.DefaultIfEmpty()
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on addReqMaster.UserId equals profile.UserId
                                 join title in objDecisionPointEntities.DP_TitleMaster
                                 on addReqMaster.ICTypeId equals title.Id into newTitle
                                 from finalTitle in newTitle.DefaultIfEmpty()
                                 where addReqMaster.CreatorCompanyId == creatorCompanyId
                                 select new LicenseInsuranceResponseParam
                                 {
                                     UserId = (int)(addReqMaster.CreatedBy == null ? 0 : addReqMaster.CreatedBy),
                                     CompanyId = addReqMaster.CreatorCompanyId,
                                     LicInsId = addReqMaster.Id,
                                     VendorTypeId = addReqMaster.ICTypeId,
                                     VendorType = finalICType.VendorType ?? finalTitle.Title,
                                     ReqCompanyName = profile.BusinessName,
                                     RequiredByCompanyId = addReqMaster.CompanyId,
                                     RequiredByUserId = profile.UserId,
                                     UploadedDoc = addReqMaster.UploadedBy,
                                     title = addReqMaster.Title,
                                     Review = addReqMaster.Review,
                                     IsStaffTitle = addReqMaster.IsStaffTitle,
                                     IsActive = (bool)(addReqMaster.IsActive == null ? false : addReqMaster.IsActive)
                                 }).Distinct().OrderByDescending(x => x.ReqCompanyName).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }


        /// <summary>
        /// Used to get the ack details as per License Insurance master Id
        /// </summary>
        /// <param name="reqDocId">reqDocId</param>
        /// <returns>IList<string></returns>
        /// <createdby>Sumit Saurav</createdby>
        /// <createddate>Aug 26 2014</createddate>
        public IList<string> GetAckByLicInsId(int tblMapId, int type)
        {
            IList<string> ackDetails = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals(0))
                    {
                        ackDetails = (from ack in objDecisionPointEntities.Dp_ProfessionalLicenseAck
                                      where ack.ProfLicId == tblMapId
                                      select ack.Ackknow).Distinct().ToList();
                    }
                    else if (type.Equals(1))
                    {
                        ackDetails = (from ack in objDecisionPointEntities.DP_InsuranceAck
                                      where ack.InsId == tblMapId
                                      select ack.Ackknow).Distinct().ToList();
                    }
                    else if (type.Equals(2))
                    {
                        ackDetails = (from ack in objDecisionPointEntities.DP_AdditionalReqAck
                                      where ack.AddReqId == tblMapId
                                      select ack.Ackknow).Distinct().ToList();
                    }

                    return ackDetails;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Get Upload DocBy LicInsId
        /// </summary>
        /// <param name="licInsId">licInsId</param>
        /// <param name="companyId">companyId</param>
        /// <returns>UploadDocDetailsRequestParam list</returns>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Aug 26 2014</CreatedDate>        
        public IList<UploadDocDetailsRequestParam> GetUploadDocByLicInsId(int tblMapId, int type)
        {
            bool chkAdditionalReqStatus = false;
            IList<UploadDocDetailsRequestParam> uploadedDocList = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //get professional license uploaded docs
                    if (type.Equals(0))
                    {
                        uploadedDocList = (from uploddoc in objDecisionPointEntities.DP_ProfessionalLicenseUploadDocs
                                           where uploddoc.ProfLicMapId == tblMapId
                                           select new UploadDocDetailsRequestParam
                                           {
                                               DocLoc = uploddoc.DocLoc,
                                               DocSeq = (int)uploddoc.DocSeqNo,
                                               DocTblId = uploddoc.Id,
                                               UploadedDocDate = uploddoc.DocUploadedDate

                                           }).Distinct().ToList();
                    }
                    //get insurance uploaded docs
                    else if (type.Equals(1))
                    {
                        uploadedDocList = (from uploddoc in objDecisionPointEntities.DP_InsuranceUploadDocs
                                           where uploddoc.InsMapId == tblMapId
                                           select new UploadDocDetailsRequestParam
                                           {
                                               DocLoc = uploddoc.DocLoc,
                                               DocSeq = (int)uploddoc.DocSeqNo,
                                               DocTblId = uploddoc.Id,
                                               UploadedDocDate = uploddoc.DocUploadedDate
                                           }).Distinct().ToList();
                    }
                    //get additional requiredments uploaded docs
                    else if (type.Equals(2))
                    {
                        var checkuploadedBy = (from addReqMap in objDecisionPointEntities.DP_AdditionalReqMapping
                                               join addreqMaster in objDecisionPointEntities.DP_AdditionalReqMaster
                                               on addReqMap.AddReqId equals addreqMaster.Id
                                               where addReqMap.Id == tblMapId
                                               select new { addreqMaster.UploadedBy, addreqMaster.Id }).FirstOrDefault();
                        if (!string.IsNullOrEmpty(checkuploadedBy.UploadedBy))
                        {
                            if (checkuploadedBy.UploadedBy.Equals(Shared.Company))
                            {
                                chkAdditionalReqStatus = true;
                                uploadedDocList = (from uploddoc in objDecisionPointEntities.DP_AdditionalReqUploadDocs
                                                   where uploddoc.AddReqId == tblMapId
                                                   select new UploadDocDetailsRequestParam
                                                   {
                                                       DocLoc = uploddoc.DocLoc,
                                                       DocSeq = (int)uploddoc.DocSeqNo,
                                                       DocTblId = uploddoc.Id,
                                                       UploadedDocDate = uploddoc.DocUploadedDate
                                                   }).Distinct().ToList();
                            }
                        }
                        if (!chkAdditionalReqStatus)
                        {
                            uploadedDocList = (from uploddoc in objDecisionPointEntities.DP_AdditionalReqUploadDocs
                                               where uploddoc.AddReqMapId == tblMapId
                                               select new UploadDocDetailsRequestParam
                                               {
                                                   DocLoc = uploddoc.DocLoc,
                                                   DocSeq = (int)uploddoc.DocSeqNo,
                                                   DocTblId = uploddoc.Id,
                                                   UploadedDocDate = uploddoc.DocUploadedDate
                                               }).Distinct().ToList();
                        }

                    }
                    //get driver lic uploaded docs
                    else if (type.Equals(3))
                    {
                        uploadedDocList = (from uploddoc in objDecisionPointEntities.DP_BackgroundDocUpload
                                           where uploddoc.BackMapId == tblMapId
                                           select new UploadDocDetailsRequestParam
                                           {
                                               DocLoc = uploddoc.DocLoc,
                                               DocSeq = (int)uploddoc.DocSeqNo,
                                               DocTblId = uploddoc.Id,
                                               UploadedDocDate = uploddoc.DocUploadedDate
                                           }).Distinct().ToList();
                    }
                    return uploadedDocList;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Get Receiver Required Doc
        /// </summary>
        /// <param name="licInsId">Doc Id</param>
        /// <createdby>Bobi</createdby>
        /// <createddate>Sep a 2014</createddate>
        /// <returns>list of document</returns>
        public IList<ReceiverReqDocResponseParam> GetLicAndInsAsPerUnqiueId(int licInsId, int userId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var LicAndInsDetails = (from licinsmaster in objDecisionPointEntities.DP_LicenseInsuranceMaster
                                            #region Query Left Join

                                            join licinsrece in objDecisionPointEntities.DP_LicenseInsuranceReceiver
                                            on licinsmaster.Id equals licinsrece.LicInsId into LicInsReceiver
                                            from licinsRecv in LicInsReceiver.DefaultIfEmpty()

                                            join licinsUpload in objDecisionPointEntities.DP_LicenseInsuranceDocUpload
                                            on licinsmaster.Id equals licinsUpload.LicInsId into licinsUpload
                                            from dockUpload in licinsUpload.DefaultIfEmpty()

                                            join licinsAck in objDecisionPointEntities.DP_LicenseInsuranceAck
                                            on licinsmaster.Id equals licinsAck.LicInsId into docAck
                                            from dockAck in docAck.DefaultIfEmpty()

                                            where licinsmaster.Id == licInsId && licinsRecv.CompanyId == companyId && licinsRecv.UserId == userId &&
                                            licinsRecv.IsActive == true
                                            && licinsmaster.IsDeleted == false && licinsmaster.IsActive == true
                                            #endregion
                                            select new ReceiverReqDocResponseParam
                                            {
                                                #region Parameter Assignments
                                                title = licinsmaster.Title,
                                                IsCompanyReq = (bool)(licinsmaster.IsCompanyNameReq == null ? false : licinsmaster.IsCompanyNameReq),
                                                IsExpDateReq = (bool)(licinsmaster.IsExpiryDateReq == null ? false : licinsmaster.IsExpiryDateReq),
                                                IsLicenseReq = (bool)(licinsmaster.isLicenseNumberreq == null ? false : licinsmaster.isLicenseNumberreq),
                                                IsPolicyReq = (bool)(licinsmaster.isPolicyNumberReq == null ? false : licinsmaster.isPolicyNumberReq),
                                                IsStateReq = (bool)(licinsmaster.IsStatereq == null ? false : licinsmaster.IsStatereq),
                                                UserPer = (bool)(licinsmaster.Allowtoupload == null ? false : licinsmaster.Allowtoupload),
                                                ReqDocFor = licinsmaster.ReqDocFor,
                                                ReqDocType = (byte)(licinsmaster.ReqType == null ? 1 : licinsmaster.ReqType),//to discuss
                                                ReqDocId = licinsmaster.Id,
                                                CompanyName = licinsRecv.CompanyName,
                                                PolicyNumber = licinsRecv.PolicyNo,
                                                LisenceNumber = licinsRecv.LicenseNumber,
                                                StateAbbre = (licinsRecv.StateAbbre == null ? string.Empty : licinsRecv.StateAbbre),
                                                ExpirationDate = licinsRecv.ExpirationDate,
                                                IsCompleted = (byte)(licinsRecv.IsCompleted == null ? 0 : licinsRecv.IsCompleted),
                                                Acknoledgment = dockAck.Ackknow,
                                                DocLoc = dockUpload.DocLoc,
                                                DocSeqNo = (int)(dockUpload.DocSeqNo == null ? 0 : dockUpload.DocSeqNo),
                                                DocReceiverUserId = (int)(dockUpload.ReceverUserId == null ? 0 : dockUpload.ReceverUserId),
                                                DocSenderUserId = (int)(dockUpload.SenderUserId == null ? 0 : dockUpload.SenderUserId),
                                                DocUploadTblId = (int)(dockUpload.Id == null ? 0 : dockUpload.Id),

                                                #endregion
                                            }).Distinct().ToList();


                    return LicAndInsDetails;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used For get the reqiured documents details by company/individuals
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns>retrun the req documemnt of particular user</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 20 2013</createdDate>
        public IEnumerable<UserDashBoardResponseParam> GetLicAndInsAsPerVendorType(int userId, string companyId, List<int> vendorTypeIds)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    // entity query for fetch individual reqiured documents record  as per user Id
                    return GetLicAndIns(userId, companyId, vendorTypeIds);
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used For get the reqiured documents details by company/individuals
        /// </summary>
        /// <param name="userId"></param>
        /// <returns>retrun the req documemnt of particular user</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 20 2013</createdDate>
        private IEnumerable<UserDashBoardResponseParam> GetLicAndIns(int userId, string companyId, List<int> vendorTypeIds)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    // entity query for fetch individual reqiured documents record  as per user Id
                    var licInsDetails = (from liceinsreceiver in objDecisionPointEntities.DP_LicenseInsuranceReceiver
                                         join licindmaster in objDecisionPointEntities.DP_LicenseInsuranceMaster
                                         on liceinsreceiver.LicInsId equals licindmaster.Id

                                         join vendortype in objDecisionPointEntities.DP_VendorType
                                         on licindmaster.VendorTypeId equals vendortype.Id into vendortype1
                                         from vendortypes in vendortype1.DefaultIfEmpty()

                                         join profile in objDecisionPointEntities.DP_Profile
                                         on licindmaster.CreatedBy equals profile.UserId

                                         where liceinsreceiver.UserId == userId && liceinsreceiver.CompanyId == companyId && liceinsreceiver.IsActive == true
                                         && licindmaster.IsDeleted == false && licindmaster.IsActive == true
                                         && ((vendorTypeIds.Contains((int)(licindmaster.VendorTypeId == null ? 0 : licindmaster.VendorTypeId))) || licindmaster.IsElectronic == false)
                                         select new UserDashBoardResponseParam
                                         {
                                             reqiuredDocId = licindmaster.Id,
                                             reqiuredDoctName = licindmaster.Title,
                                             expirationDate = liceinsreceiver.ExpirationDate,
                                             StateName = (liceinsreceiver.StateAbbre == null ? string.Empty : liceinsreceiver.StateAbbre),
                                             LicenseNumber = (liceinsreceiver.LicenseNumber == null ? string.Empty : liceinsreceiver.LicenseNumber),
                                             PolicyNumber = (liceinsreceiver.PolicyNo == null ? string.Empty : liceinsreceiver.PolicyNo),
                                             ReqType = (int)(licindmaster.ReqType == null ? 0 : licindmaster.ReqType),
                                             IsCompleted = (int)(liceinsreceiver.IsCompleted == null ? 0 : liceinsreceiver.IsCompleted),
                                             ServiceId = (int)(licindmaster.VendorTypeId == null ? 0 : licindmaster.VendorTypeId),
                                             ServiceName = vendortypes.VendorType,
                                             companyName = profile.BusinessName,
                                             CreatorCompanyid = licindmaster.CompanyId,
                                             IsElectronically = (bool)(licindmaster.IsElectronic == null ? true : licindmaster.IsElectronic),
                                             completeDate = liceinsreceiver.CompletedDate,
                                             LicCreatedDate = (DateTime)(liceinsreceiver.CreatedDate)
                                         }).Distinct().ToList();
                    return licInsDetails;
                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to save the specific reqiurement
        /// </summary>
        /// <param name="objLicInsRequestParam">LicenseInsuranceRequestParam</param>
        /// <returns>int</returns>
        /// <createdBy>Sumit Saurav</createdBy>
        /// <createdDate>Aug 21 2014</createdDate>
        public int SaveAdditionalReq(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            int addReqId = 0;
            try
            {
                objAdditionalRequirementRep = new AdditionalRequirementRep();
                if (objLicInsRequestParam.OperationType.Equals(1))
                {
                    objAdditionalRequirementRep.SaveAdditionalReqFromJCR(objLicInsRequestParam);
                }
                else
                {
                    objAdditionalRequirementRep.SaveAdditionalReqFromProfile(objLicInsRequestParam);
                }

            }

            catch
            {
                throw;
            }
            return addReqId;
        }


        /// <summary>
        /// used for active or deactivate the JCR
        /// </summary>
        /// <param name="tblId"></param>
        /// <param name="status"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        public int ActiveOrDeactivateJCR(int tblId, bool status, int type)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals(0))
                    {
                        var bgCheckDetails = (from bgCheckMaster in objDecisionPointEntities.DP_BGCheckMaster
                                              where bgCheckMaster.Id == tblId
                                              select bgCheckMaster).FirstOrDefault();
                        if (!object.Equals(bgCheckDetails, null))
                        {
                            bgCheckDetails.IsActive = status;
                        }
                    }
                    if (type.Equals(1))
                    {
                        var profLicDetails = (from profLicMaster in objDecisionPointEntities.DP_ProfessionalLicenseMaster
                                              where profLicMaster.Id == tblId
                                              select profLicMaster).FirstOrDefault();
                        if (!object.Equals(profLicDetails, null))
                        {
                            profLicDetails.IsActive = status;
                        }
                    }
                    if (type.Equals(2))
                    {
                        var insDetails = (from insMaster in objDecisionPointEntities.DP_InsuranceMaster
                                          where insMaster.Id == tblId
                                          select insMaster).FirstOrDefault();
                        if (!object.Equals(insDetails, null))
                        {
                            insDetails.IsActive = status;
                        }
                    }
                    if (type.Equals(3))
                    {
                        var addReqDetails = (from addReqMaster in objDecisionPointEntities.DP_AdditionalReqMaster
                                             where addReqMaster.Id == tblId
                                             select addReqMaster).FirstOrDefault();
                        if (!object.Equals(addReqDetails, null))
                        {
                            addReqDetails.IsActive = status;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        #endregion

        #region Reports
        /// <summary>
        /// Used for get the all users details which exist in system
        /// </summary>
        /// <param name="dateFrom"></param>
        /// <param name="dateto"></param>
        /// <returns></returns>
        /// <createby>Bobi</createby>
        /// <createddate>25 Aug 2014</createddate>
        public IList<ReportResponseParam> GetAllUsersDetailsInSystem(ReportResponseParam objReportResponseParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var getUsesDetails = (from user in objDecisionPointEntities.DP_User
                                          join childprofile in objDecisionPointEntities.DP_Profile
                                          on user.Id equals childprofile.UserId
                                          join parentprofile in objDecisionPointEntities.DP_Profile
                                          on user.CreatedBy equals parentprofile.UserId
                                          where user.CompanyId == objReportResponseParam.CompanyId
                                          && EntityFunctions.TruncateTime(user.CreatedDate) >= EntityFunctions.TruncateTime(objReportResponseParam.DateFrom)
                                          && EntityFunctions.TruncateTime(user.CreatedDate) <= EntityFunctions.TruncateTime(objReportResponseParam.DateTo)
                                          && user.IsRegistered == (objReportResponseParam.Status == "0" ? false : true)
                                          select new ReportResponseParam
                                          {

                                              ChildUserName = childprofile.Firstname + Shared.SingleSpace + childprofile.LastName,
                                              ChildID = childprofile.Id,
                                              ChildEmailId = user.EmailId,
                                              ChildPhoneNo = childprofile.CellNumber,
                                              Status = user.IsRegistered == false ? "Pending" : "Active",
                                          }).ToList();

                    return getUsesDetails;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// Used for get the saved report details
        /// </summary>
        /// <param name="companyId">companyId</param>
        /// <returns>IList<ReportResponseParam></returns>
        /// <createby>Bobi</createby>
        /// <createddate>25 Aug 2014</createddate>
        public IList<ReportResponseParam> GetSavedReportDetails(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var savedReportDetails = (from rpt in objDecisionPointEntities.DP_ReportLog
                                              where rpt.Companyd == companyId
                                              select new ReportResponseParam
                                              {
                                                  DateFrom = rpt.DateFrom,
                                                  DateTo = rpt.DateTo,
                                                  Status = rpt.Status == false ? "Pending" : "Active"
                                              }).ToList();

                    return savedReportDetails;
                }
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Used for saved the report with filter cretaria
        /// </summary>
        /// <param name="objReportResponseParam">objReportResponseParam</param>
        /// <returns>int</returns>
        /// <createby>Bobi</createby>
        /// <createddate>25 Aug 2014</createddate>
        public int SavedReportDetails(ReportResponseParam objReportResponseParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (!object.Equals(objReportResponseParam, null))
                    {
                        DP_ReportLog objDP_ReportLog = new DP_ReportLog()
                        {
                            Companyd = objReportResponseParam.CompanyId,
                            CreatedBy = objReportResponseParam.UserId,
                            CreateDate = DateTime.Now.Date,
                            DateFrom = objReportResponseParam.DateFrom,
                            DateTo = objReportResponseParam.DateTo,
                            Status = objReportResponseParam.Status == "1" ? true : false
                        };
                        objDecisionPointEntities.DP_ReportLog.Add(objDP_ReportLog);
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
        }
        #endregion

        #region Webinar
        /// <summary>
        /// get list of all users in a company
        /// </summary>
        /// <param name="companyId">companyId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Sep 01 2014</CreatedDate>
        /// <returns>WebinarUsersResponseParam</returns>
        public IList<WebinarUsersResponseParam> getAllWebinarUsers(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.IsRegistered == true && user.CompanyId == companyId
                                 select new WebinarUsersResponseParam
                                 {
                                     UserId = user.Id,
                                     CompanyId = user.CompanyId,
                                     FirstName = profile.Firstname,
                                     LastName = profile.LastName,
                                     Email = user.EmailId,
                                     Role = profile.UserType
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get list of all admin from companies
        /// </summary>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Sep 03 2014</CreatedDate>
        /// <returns>WebinarUsersResponseParam</returns>
        public IList<WebinarUsersResponseParam> GetAllCompanyAdmin()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 join webinar in objDecisionPointEntities.DP_WebinarOrganiserMaster
                                 on user.Id equals webinar.UserId into web
                                 from webs in web.DefaultIfEmpty()//.Where(x=>x.IsActive==true)
                                 where user.IsRegistered == true && user.IsActive == true && user.IsDeleted == false && (profile.UserType == Shared.SuperAdmin)// permision id =2 for admin
                                 select new WebinarUsersResponseParam
                                 {
                                     Id = webs.Id == null ? 0 : webs.Id,
                                     CompanyId = user.CompanyId,
                                     UserId = user.Id,
                                     Email = user.EmailId,
                                     CompanyName = profile.BusinessName,
                                     FirstName = profile.Firstname,
                                     LastName = profile.LastName,
                                     OrganiserId = webs.OrganiserId,
                                     AppKey = webs.AppKey,
                                     UserName = webs.UserName,
                                     Password = webs.Password,
                                     IsActive = (bool)(webs.IsActive == null ? false : webs.IsActive)
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }

        }

        /// <summary>
        /// save and update webinar user details
        /// </summary>
        /// <param name="objWebinarUsersResponseParam">WebinarUsersResponseParam</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Sept 9 2014</CreatedDate>
        /// <returns>int</returns>
        public int setWebinarUserDetails(WebinarUsersResponseParam objWebinarUsersResponseParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (objWebinarUsersResponseParam.Id == 0) // if id is zero then save
                    {
                        DP_WebinarOrganiserMaster objDP_WebinarOrganiserMaster = new DP_WebinarOrganiserMaster()
                        {
                            UserId = objWebinarUsersResponseParam.UserId,
                            UserName = objWebinarUsersResponseParam.UserName,
                            Password = objWebinarUsersResponseParam.Password,
                            AppKey = objWebinarUsersResponseParam.AppKey,
                            OrganiserId = objWebinarUsersResponseParam.OrganiserId,
                            IsActive = objWebinarUsersResponseParam.IsActive,
                            CreateDate = DateTime.Now.Date,
                            CreatedBy = objWebinarUsersResponseParam.CreatedBy,
                        };
                        objDecisionPointEntities.DP_WebinarOrganiserMaster.Add(objDP_WebinarOrganiserMaster);
                    }
                    else // code for update details
                    {
                        var query = (from webinarMaster in objDecisionPointEntities.DP_WebinarOrganiserMaster
                                     where webinarMaster.Id == objWebinarUsersResponseParam.Id && webinarMaster.UserId == objWebinarUsersResponseParam.UserId
                                     select webinarMaster).FirstOrDefault();
                        if (query != null)
                        {
                            if (objWebinarUsersResponseParam.IsActive)
                            {
                                query.UserName = objWebinarUsersResponseParam.UserName;
                                query.Password = objWebinarUsersResponseParam.Password;
                                query.OrganiserId = objWebinarUsersResponseParam.OrganiserId;
                                query.AppKey = objWebinarUsersResponseParam.AppKey;
                                query.IsActive = objWebinarUsersResponseParam.IsActive;
                            }
                            else
                            {
                                query.IsActive = objWebinarUsersResponseParam.IsActive;
                            }
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get webinar orgainser login details as per user id
        /// </summary>
        /// <param name="userId">user id</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Sept 17 2014</CreatedDate>
        /// <returns>WebinarUsersResponseParam</returns>
        public IList<WebinarUsersResponseParam> GetWebinarOrganiser(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from webinar in objDecisionPointEntities.DP_WebinarOrganiserMaster
                                 where webinar.UserId == userId && webinar.IsActive == true

                                 select new WebinarUsersResponseParam
                                 {
                                     Id = webinar.Id,
                                     UserId = webinar.UserId,
                                     OrganiserId = webinar.OrganiserId,
                                     AppKey = webinar.AppKey,
                                     UserName = webinar.UserName,
                                     Password = webinar.Password
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }

        }
        #endregion

        #region CoverageArea
        /// <summary>
        /// get city list as per zip
        /// </summary>
        /// <param name="Zip">zip code</param>
        /// <returns>list of city</returns>
        public IEnumerable<ZipResponseParam> GetCityListByzip(string Zip)
        {
            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.GetCityListByzip(Zip);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get city list
        /// </summary>
        /// <param name="userId"></param>
        /// <returns>list of city</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 7 2014</createdDate>
        public IList<CityResponseParam> GetCityList(int userId, string companyId, int type)
        {
            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.GetCityList(userId, companyId, type);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get zip list by city
        /// </summary>
        /// <param name="CityName">city name</param>
        /// <returns>list of zip code as per city selection</returns>
        public IEnumerable<ZipResponseParam> GetZipListByCity(string CityName, string stateabbrelist, string county)
        {
            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.GetZipListByCity(CityName, stateabbrelist, county);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// save state mapping
        /// </summary>
        /// <param name="stateRequestParam">contains state name and abbreviation</param>
        /// <param name="type"></param>
        /// <returns>result save or not</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>feb 3 2014</createdDate>
        public int SaveStateMapping(StateRequestParam stateRequestParam, string type)
        {

            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.SaveStateMapping(stateRequestParam, type);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// saves county selected by a company
        /// </summary>
        /// <param name="countyRequestParam">county name and user id</param>
        /// <param name="type"></param>
        /// <returns> result saved or not</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>feb 3 2014</createdDate>
        public int SaveCountyMapping(CountyRequestParam countyRequestParam, string type)
        {

            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.SaveCountyMapping(countyRequestParam, type);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// saves city selected by a company in dp_citymapping
        /// </summary>
        /// <param name="cityRequestParam">city details</param>
        /// <param name="type">string</param>
        /// <returns>int type result saved or not</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>feb 6 2014</createdDate>
        public int SaveCityMapping(CityRequestParam cityRequestParam, string type)
        {

            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.SaveCityMapping(cityRequestParam, type);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// saves selected zip by a company
        /// </summary>
        /// <param name="zipRequestParam">zip codes</param>
        /// <param name="isDelete"></param>
        /// <param name="type"></param>
        /// <returns>int type result saved or not</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>feb 6 2014</createdDate>
        public int SaveZipMapping(ZipRequestParam zipRequestParam, string type)
        {

            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.SaveZipMapping(zipRequestParam, type);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get state list
        /// </summary>
        /// <returns>list of states</returns>
        public IEnumerable<StateResponseParam> GetStateList()
        {
            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.GetStateList();
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get city list
        /// </summary>
        /// <param name="countyId">county id</param>
        /// <returns>list of cities</returns>
        public IEnumerable<CityResponseParam> GetCityList(string countyId)
        {
            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.GetCityList(countyId);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get city list for staff and IC
        /// </summary>
        /// <param name="countyId">county id</param>
        /// <returns>list of cities</returns>
        public IEnumerable<CityResponseParam> GetCityList(string countyId, int userId)
        {
            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.GetCityList(countyId, userId);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get state list
        /// </summary>
        /// <param name="userId"></param>
        /// <returns>list of states</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>dec 20 2013</createdDate>
        public IList<StateResponseParam> GetStateList(int userId, string companyId, int type)
        {
            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.GetStateList(userId, companyId, type);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// get county list
        /// </summary>
        /// <returns>list of county</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>jan 7 2014</createdDate>
        public IList<CountyResponseParam> GetCountyList(int userId, string companyId, int type)
        {
            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.GetCountyList(userId, companyId, type);
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// Used to get coverage area status
        /// </summary>
        /// <param name="userId"></param>
        /// <returns>int</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>feb 6 2014</createdDate>
        public int CoverageAreaDoesNotApply(int userId, string companyId, int type, string coverageAreaStatus)
        {
            try
            {
                objCoverageAreaRep = new CoverageAreaRep();
                int inserted = 0;
                //if type is 0 than coverage area set for company if 1 than coverage set for particular user
                if (type.Equals(0))
                {
                    inserted = objCoverageAreaRep.ApplyCoverageAreaForParticularCompany(userId, companyId, type, coverageAreaStatus);
                }
                else if (type.Equals(1))
                {
                    inserted = objCoverageAreaRep.ApplyCoverageAreaForParticularUser(userId, companyId, type, coverageAreaStatus);
                }
                return inserted;

            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        ///  Used to get coverage area status
        /// </summary>
        /// <param name="userId"></param>
        /// <returns>int</returns>
        /// <createdBy>Sumit</createdBy>
        /// <createdDate>feb 6 2014</createdDate>
        public string GetCAOrServiceDoesNotApply(int userId, string companyId, int type)
        {
            try
            {

                objCoverageAreaRep = new CoverageAreaRep();
                return objCoverageAreaRep.GetCAOrServiceDoesNotApply(userId, companyId, type);
            }
            catch
            {
                throw;
            }
        }



        #endregion

        #region Invitation Mail sending methods

        /// <summary>
        /// get user details for resending mail
        /// </summary>
        /// <param name="userId">userId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Oct 10 2014</CreatedDate>
        /// <returns>InvitationMailSendResponseParam</returns>
        public IList<InvitationMailSendResponseParam> GetUserDetailsForResendingMail(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 join senderProfile in objDecisionPointEntities.DP_Profile
                                 on user.CreatedBy equals senderProfile.UserId
                                 where user.IsRegistered == false && user.Id == userId

                                 select new InvitationMailSendResponseParam
                                 {
                                     UserId = user.Id,
                                     ParentUserId = (int)(user.CreatedBy == null ? 0 : user.CreatedBy),
                                     ParentCompanyId = !string.IsNullOrEmpty(senderProfile.BusinessName) ? string.Empty : senderProfile.BusinessName,
                                     FirstName = profile.Firstname,
                                     LastName = profile.LastName,
                                     EmailId = user.EmailId,
                                     BusinessName = profile.BusinessName,
                                     Password = user.Password,
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Get User List With No Registration 
        /// </summary>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Oct 13 2014</CreatedDate>
        /// <returns>InvitationMailSendResponseParam</returns>
        public IList<InvitationMailSendResponseParam> GetUserListWithNoRegistration()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.IsRegistered == false

                                 select new InvitationMailSendResponseParam
                                 {
                                     UserId = user.Id,
                                     ParentUserId = (int)(user.CreatedBy == null ? 0 : user.CreatedBy),
                                     FirstName = profile.Firstname,
                                     LastName = profile.LastName,
                                     EmailId = user.EmailId,
                                     BusinessName = profile.BusinessName,
                                     Password = user.Password,
                                     UserType = profile.UserType,
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get site url for mail sending
        /// </summary>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Oct 13 2014</CreatedDate>
        /// <returns>string</returns>
        public static string GetSiteUrl()
        {
            try
            {
                using (DecisionPointEntities objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from siteurl in objDecisionPointEntities.DP_SiteUrl
                                 select siteurl.SiteUrl).FirstOrDefault();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        #region Invitation Mail Using Window Service
        /// <summary>
        /// get list of all vendors whose inviation mail is not sent
        /// </summary>
        /// <Createdby>Sumit Saurav</Createdby>
        /// <CreatedDate>Oct 08 2014</CreatedDate>
        /// <returns>InvitationMailSendResponseParam</returns>
        public IList<InvitationMailSendResponseParam> GetVendorListWithNoInvitationMail()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 //get invitation receiver details
                                 join vendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                 on user.Id equals vendorMap.VendorId
                                 //get invitation sender details
                                 join senderProfile in objDecisionPointEntities.DP_Profile
                                on vendorMap.CreatedBy equals senderProfile.UserId
                                 where vendorMap.IsMailSent == false
                                 && vendorMap.Status == 0

                                 select new InvitationMailSendResponseParam
                                 {
                                     UserId = user.Id,
                                     ParentUserId = (int)(user.CreatedBy == null ? 0 : user.CreatedBy),
                                     ParentCompanyId = senderProfile.BusinessName,
                                     FirstName = profile.Firstname,
                                     LastName = profile.LastName,
                                     EmailId = user.EmailId,
                                     BusinessName = profile.BusinessName,
                                     Password = user.Password,
                                     UserType = profile.UserType,
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get list of all ic non client list whose inviation mail is not sent
        /// </summary>
        /// <Createdby>Bobi</Createdby>
        /// <CreatedDate>Jan 01 2015</CreatedDate>
        /// <returns>GetICNonClientWithNoInvitationMail</returns>
        public IList<InvitationMailSendResponseParam> GetICNonClientWithNoInvitationMail()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 //get invitation receiver details
                                 join receiverMap in objDecisionPointEntities.DP_ICNonClientsMapping
                                 on user.Id equals receiverMap.InvitedUserId
                                 //get invitation sender details
                                 join senderProfile in objDecisionPointEntities.DP_Profile
                                on receiverMap.InviteeUserId equals senderProfile.UserId
                                 where receiverMap.IsMailSent == false
                                 && receiverMap.Invitationstatus == false
                                 select new InvitationMailSendResponseParam
                                 {
                                     UserId = user.Id,
                                     ParentUserId = (int)(user.CreatedBy == null ? 0 : user.CreatedBy),
                                     ParentCompanyId = senderProfile.BusinessName,
                                     FirstName = profile.Firstname,
                                     LastName = profile.LastName,
                                     EmailId = user.EmailId,
                                     BusinessName = profile.BusinessName,
                                     Password = user.Password,
                                     UserType = profile.UserType,
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get list of all staff whose inviation mail is not sent
        /// </summary>
        ///<Createdby>Sumit Saurav</Createdby>
        /// <CreatedDate>Oct 08 2014</CreatedDate>
        /// <returns>InvitationMailSendResponseParam</returns>
        public IList<InvitationMailSendResponseParam> GetStaffListWithNoInvitationMail()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId

                                 join vendorMap in objDecisionPointEntities.DP_CompanyStaffMapping
                                 on user.Id equals vendorMap.StaffId
                                 where vendorMap.IsMailSent == false
                                 && user.IsRegistered == false

                                 select new InvitationMailSendResponseParam
                                 {
                                     UserId = user.Id,
                                     ParentUserId = (int)(user.CreatedBy == null ? 0 : user.CreatedBy),
                                     FirstName = profile.Firstname,
                                     LastName = profile.LastName,
                                     EmailId = user.EmailId,
                                     BusinessName = profile.BusinessName,
                                     Password = user.Password,
                                     UserType = profile.UserType,
                                 }).ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// update mail status to true in table after mail sending
        /// </summary>
        /// <param name="userId">User Id</param>
        /// <param name="parentUserId">Invitee company User id</param>
        /// <param name="type">type 0 for staff and 1 for vendor</param>
        /// <Createdby>Sumit Saurav</Createdby>
        /// <CreatedDate>Oct 08 2014</CreatedDate>
        /// <returns>int</returns>
        public int UpdateMailStatus(int userId, int parentUserId, string type)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    // apply condition on type 0 for staff map table and 1 for ic non client map table,2 for vendor map table
                    if (type.Equals(Shared.Individual))
                    {
                        var query = (from staffMap in objDecisionPointEntities.DP_CompanyStaffMapping
                                     where staffMap.StaffId == userId && staffMap.CreatedBy == parentUserId
                                     select staffMap).FirstOrDefault();
                        if (query != null)
                        {
                            //update mail status
                            query.IsMailSent = true;
                            //update last date of invitation mail
                            query.LastInvitationDate = currentdate;
                        }
                    }
                    // apply condition on type 0 for staff map table and 1 for vendor map table
                    if (type.Equals(Shared.NonClient))
                    {
                        var query = (from icnonclientMap in objDecisionPointEntities.DP_ICNonClientsMapping
                                     where icnonclientMap.InvitedUserId == userId && icnonclientMap.CreatedBy == parentUserId
                                     select icnonclientMap).FirstOrDefault();
                        if (query != null)
                        {
                            //update mail status
                            query.IsMailSent = true;
                            //update last date of invitation mail
                            query.LastInvitationDate = currentdate;
                        }
                    }
                    else
                    {
                        var query = (from vendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                     where vendorMap.VendorId == userId && vendorMap.CreatedBy == parentUserId
                                     select vendorMap).FirstOrDefault();
                        if (query != null)
                        {
                            //update mail status
                            query.IsMailSent = true;
                            //update last date of invitation mail
                            query.LastInvitationDate = currentdate;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        #endregion
        #endregion

        #region Contract Management

        /// <summary>
        /// get list of contract type
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="id">id</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>14 Nov 2014</CreatedDate>
        /// <returns>CompanyDashBoardResponseParam</returns>
        public IEnumerable<CompanyDashBoardResponseParam> GetContractType(string type, string id)
        {
            IEnumerable<CompanyDashBoardResponseParam> finallist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.Admin.Trim().ToUpper(CultureInfo.InvariantCulture)))
                    {
                        var query = (from contract in objDecisionPointEntities.DP_ContractMaster
                                     where contract.IsDeleted == false && contract.CompanyId == id
                                     select new CompanyDashBoardResponseParam
                                     {
                                         ContractTypeName = contract.ContractName,
                                         isDeleted = contract.IsDeleted,
                                         isActive = contract.IsActive,
                                         id = contract.Id,
                                     }).ToList();
                        finallist = query;
                    }
                    else if (type.Trim().ToUpper(CultureInfo.InvariantCulture).Equals(Shared.Company.Trim().ToUpper(CultureInfo.InvariantCulture)))
                    {
                        var query = (from contract in objDecisionPointEntities.DP_ContractMaster
                                     where contract.IsDeleted == false && contract.IsActive == true && contract.CompanyId == id
                                     select new CompanyDashBoardResponseParam
                                     {
                                         ContractTypeName = contract.ContractName,
                                         isDeleted = contract.IsDeleted,
                                         isActive = contract.IsActive,
                                         id = contract.Id,
                                     }).ToList();
                        finallist = query;
                    }
                }
            }
            catch
            {
                throw;
            }
            return finallist;
        }

        /// <summary>
        /// Add contract type
        /// </summary>
        /// <param name="contractType">contractType</param>
        /// <param name="companyId">companyId</param>
        /// <param name="userId">userId</param>
        ///  <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>14 Nov 2014</CreatedDate>
        /// <returns>int</returns>
        public int AddContractType(string contractType, string companyId, int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var res = (from cus in objDecisionPointEntities.DP_ContractMaster
                               where cus.ContractName == contractType && cus.CompanyId == companyId
                               select cus).FirstOrDefault();

                    if (res != null)
                    {
                        return -1;
                    }
                    else
                    {
                        DP_ContractMaster objDP_ContractMaster = new DP_ContractMaster
                        {
                            ContractName = contractType,
                            IsDeleted = false,
                            IsActive = true,
                            CompanyId = companyId,
                            CreatedBy = userId,
                            CreatedDate = DateTime.Now.Date
                        };
                        objDecisionPointEntities.DP_ContractMaster.Add(objDP_ContractMaster);

                        return objDecisionPointEntities.SaveChanges();
                    }
                }
            }
            catch
            {
                throw;
            }

        }

        /// <summary>
        /// UpdateContractType
        /// </summary>
        /// <param name="contractTypeId">contractTypeId</param>
        /// <param name="contractTypename">contractTypename</param>
        /// <param name="companyId">companyId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>14 Nov 2014</CreatedDate>
        /// <returns>int</returns>
        public int UpdateContractType(int contractTypeId, string contractTypename, string companyId)
        {
            int res = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query1 = (from contract in objDecisionPointEntities.DP_ContractMaster
                                  where contract.ContractName == contractTypename && contract.CompanyId == companyId
                                  select contract).FirstOrDefault();
                    if (query1 != null && !query1.Id.Equals(contractTypeId))
                    {
                        res = -1;

                    }
                    else
                    {
                        var query = (from contract in objDecisionPointEntities.DP_ContractMaster
                                     where contract.Id == contractTypeId
                                     select contract).FirstOrDefault();
                        query.ContractName = contractTypename;

                        //Finally saved the changes in local database
                        res = objDecisionPointEntities.SaveChanges();
                    }

                }

            }
            catch
            {
                throw;
            }
            return res;
        }

        /// <summary>
        /// enable and disable contract type
        /// </summary>
        /// <param name="contractTypeId">contractTypeId</param>
        /// <param name="isActive">isActive</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>14 Nov 2014</CreatedDate>
        /// <returns>int</returns>
        public int DisaEnaContractType(int contractTypeId, bool isActive)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //Get record of that particular messages which we are going to delete
                    var query = (from contract in objDecisionPointEntities.DP_ContractMaster
                                 where contract.Id == contractTypeId
                                 select contract).FirstOrDefault();
                    query.IsActive = isActive;

                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// save details of create contract master
        /// </summary>
        /// <param name="createContractRequestParam">CreateContractRequestParam</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>25 Nov 2014</CreatedDate>
        /// <returns>int</returns>
        public int SetCreateContract(CreateContractRequestParam createContractRequestParam)
        {
            try
            {
                int contractId = 0;
                int result = 0;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (string.IsNullOrEmpty(createContractRequestParam.Status))
                    {
                        createContractRequestParam.Status = Shared.Staging;
                    }
                    // save in create contract master table using selected services.
                    #region Code to save details Contract Master Table

                    if (createContractRequestParam.ServiceList != null && createContractRequestParam.ServiceList.Count > 0)
                    {
                        foreach (var item in createContractRequestParam.ServiceList)
                        {
                            #region Code to assign parameters in Contract Master Table

                            DP_CreateContractMaster objDP_CreateContractMaster = new DP_CreateContractMaster()
                            {
                                ManagerName = createContractRequestParam.ManagerName,
                                OwnerId = createContractRequestParam.OwnerId,
                                ContractWithId = createContractRequestParam.ContractWithId,
                                ExecutedById = createContractRequestParam.ExecutedById,
                                ExecutedDate = createContractRequestParam.ExecutedDate,
                                ExpirationDate = createContractRequestParam.ExpirationDate,
                                ContractDate = createContractRequestParam.ContractDate,
                                ExpirationDateReminder = createContractRequestParam.ExpirationDateReminder,
                                GeneralComments = createContractRequestParam.GeneralComments,
                                Paragraph = createContractRequestParam.Paragraph,
                                Section = createContractRequestParam.Section,
                                SubSection = createContractRequestParam.SubSection,
                                Notes = createContractRequestParam.Notes,
                                EventDate = createContractRequestParam.EventDate,
                                EventDateReminder = createContractRequestParam.EventDateReminder,
                                CreatorCompanyId = createContractRequestParam.CreatorCompanyId,
                                ContractorCompanyId = createContractRequestParam.ContractorCompanyId,
                                IsActive = createContractRequestParam.IsActive,
                                IsDeleted = createContractRequestParam.IsDeleted,
                                IsCompleted = createContractRequestParam.IsCompleted,
                                CreatedBy = createContractRequestParam.CreatedBy,
                                CreatedDate = DateTime.Now.Date,
                                Role = createContractRequestParam.Role,
                                Title = createContractRequestParam.Title,
                                ServiceId = item,
                                Status = createContractRequestParam.Status,
                            };

                            #endregion
                            objDecisionPointEntities.DP_CreateContractMaster.Add(objDP_CreateContractMaster);
                            result += objDecisionPointEntities.SaveChanges();
                            contractId = objDP_CreateContractMaster.Id;
                            //save details of uploaded documents in table
                            #region Code to save uploaded file details

                            //if (createContractRequestParam.DocList != null && createContractRequestParam.DocList.Count > 0)
                            if (createContractRequestParam.FilePathStr != null && createContractRequestParam.FilePathStr.Count > 0)
                            {
                                foreach (var docs in createContractRequestParam.FilePathStr)
                                {
                                    DP_CreateContractDocMaster objDocMaster = new DP_CreateContractDocMaster()
                                    {
                                        ContractId = contractId,
                                        FileLoc = docs,
                                        FileTitle = Path.GetFileName(docs),
                                        CreatedBy = createContractRequestParam.CreatedBy,
                                        CreatedDate = DateTime.Now.Date,
                                        IsDeleted = createContractRequestParam.IsDeleted
                                    };
                                    objDecisionPointEntities.DP_CreateContractDocMaster.Add(objDocMaster);
                                    result += objDecisionPointEntities.SaveChanges();
                                }

                            }
                            #endregion

                            // save details of contract events

                            if (createContractRequestParam.EventList != null && createContractRequestParam.EventList.Count > 0)
                            {
                                foreach (var events in createContractRequestParam.EventList)
                                {
                                    DP_ContractEvent objDP_ContractEvent = new DP_ContractEvent()
                                    {
                                        ContractId = contractId,
                                        EventTitle = events.EventTitle,
                                        Paragraph = events.Paragraphs,
                                        Section = events.Sections,
                                        SubSection = events.SubSections,
                                        EventDate = events.EventDate,
                                        EventReminderDay = events.EventDateReminder,
                                        Notes = events.Notes,
                                        CreatedBy = createContractRequestParam.CreatedBy,
                                        IsDeleted = false,
                                        AssignedUserIds = events.AssignedUserIds
                                    };
                                    objDecisionPointEntities.DP_ContractEvent.Add(objDP_ContractEvent);
                                    objDecisionPointEntities.SaveChanges();
                                }
                            }
                        }

                    }
                    #endregion

                    //Finally saved the changes in local database
                    return result;
                }

            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// save details of create contract master
        /// </summary>
        /// <param name="createContractRequestParam">CreateContractRequestParam</param>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>30 Dec 2014</CreatedDate>
        /// <returns>int</returns>
        public int UpdateCreateContract(CreateContractRequestParam createContractRequestParam)
        {
            try
            {
                int contractId = 0;
                int result = 0;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (string.IsNullOrEmpty(createContractRequestParam.Status))
                    {
                        createContractRequestParam.Status = Shared.Staging;
                    }
                    // save in create contract master table using selected services.
                    #region Code to save details Contract Master Table

                    if (createContractRequestParam.ServiceList != null && createContractRequestParam.ServiceList.Count > 0)
                    {
                        foreach (var item in createContractRequestParam.ServiceList)
                        {
                            #region Code to assign parameters in Contract Master Table
                            var contractMasterDetails = (from contractMaster in objDecisionPointEntities.DP_CreateContractMaster
                                                         where contractMaster.Id == createContractRequestParam.Id && contractMaster.ServiceId == item &&
                                                         contractMaster.CreatorCompanyId == createContractRequestParam.CreatorCompanyId
                                                         && contractMaster.ContractorCompanyId == createContractRequestParam.ContractorCompanyId
                                                         select contractMaster).FirstOrDefault();
                            if (!object.Equals(contractMasterDetails, null))
                            {
                                if (createContractRequestParam.ExpirationDate > currentdate)
                                {
                                    createContractRequestParam.Status = Shared.Executed;
                                }
                                else
                                {
                                    createContractRequestParam.Status = Shared.Expired;
                                }
                                contractMasterDetails.ManagerName = createContractRequestParam.ManagerName;
                                contractMasterDetails.OwnerId = createContractRequestParam.OwnerId;
                                contractMasterDetails.ContractWithId = createContractRequestParam.ContractWithId;
                                contractMasterDetails.ExecutedById = createContractRequestParam.ExecutedById;
                                contractMasterDetails.ExecutedDate = createContractRequestParam.ExecutedDate;
                                contractMasterDetails.ExpirationDate = createContractRequestParam.ExpirationDate;
                                contractMasterDetails.ContractDate = createContractRequestParam.ContractDate;
                                contractMasterDetails.ExpirationDateReminder = createContractRequestParam.ExpirationDateReminder;
                                contractMasterDetails.GeneralComments = createContractRequestParam.GeneralComments;
                                contractMasterDetails.Paragraph = createContractRequestParam.Paragraph;
                                contractMasterDetails.Section = createContractRequestParam.Section;
                                contractMasterDetails.SubSection = createContractRequestParam.SubSection;
                                contractMasterDetails.Notes = createContractRequestParam.Notes;
                                contractMasterDetails.EventDate = createContractRequestParam.EventDate;
                                contractMasterDetails.EventDateReminder = createContractRequestParam.EventDateReminder;
                                contractMasterDetails.CreatorCompanyId = createContractRequestParam.CreatorCompanyId;
                                contractMasterDetails.ContractorCompanyId = createContractRequestParam.ContractorCompanyId;
                                contractMasterDetails.IsActive = createContractRequestParam.IsActive;
                                contractMasterDetails.IsDeleted = createContractRequestParam.IsDeleted;
                                contractMasterDetails.IsCompleted = createContractRequestParam.IsCompleted;
                                contractMasterDetails.CreatedBy = createContractRequestParam.CreatedBy;
                                contractMasterDetails.CreatedDate = currentdate;
                                contractMasterDetails.Role = createContractRequestParam.Role;
                                contractMasterDetails.Title = createContractRequestParam.Title;
                                contractMasterDetails.ServiceId = item;
                                contractMasterDetails.Status = createContractRequestParam.Status;
                                //contract mail logs
                                var contractMailLogs = (from contractMailLog in objDecisionPointEntities.DP_ContractMailReminderLog
                                                        where contractMailLog.ContractId == createContractRequestParam.Id
                                                        select contractMailLog).Distinct().FirstOrDefault();
                                if (!object.Equals(contractMailLogs, null))
                                {
                                    if (!contractMasterDetails.ExpirationDate.Equals(createContractRequestParam.ExpirationDate) || !contractMasterDetails.ExpirationDateReminder.Equals(createContractRequestParam.ExpirationDateReminder))
                                    {
                                        contractMailLogs.MailDuration = createContractRequestParam.ExpirationDateReminder;
                                        contractMailLogs.NextMailSendingDate = createContractRequestParam.ExpirationDate.Value.AddDays(-(createContractRequestParam.ExpirationDateReminder));
                                    }
                                }
                                result += objDecisionPointEntities.SaveChanges();
                                contractId = createContractRequestParam.Id;
                            }
                            else
                            {
                                DP_CreateContractMaster objDP_CreateContractMaster = new DP_CreateContractMaster()
                                {
                                    ManagerName = createContractRequestParam.ManagerName,
                                    OwnerId = createContractRequestParam.OwnerId,
                                    ContractWithId = createContractRequestParam.ContractWithId,
                                    ExecutedById = createContractRequestParam.ExecutedById,
                                    ExecutedDate = createContractRequestParam.ExecutedDate,
                                    ExpirationDate = createContractRequestParam.ExpirationDate,
                                    ContractDate = createContractRequestParam.ContractDate,
                                    ExpirationDateReminder = createContractRequestParam.ExpirationDateReminder,
                                    GeneralComments = createContractRequestParam.GeneralComments,
                                    Paragraph = createContractRequestParam.Paragraph,
                                    Section = createContractRequestParam.Section,
                                    SubSection = createContractRequestParam.SubSection,
                                    Notes = createContractRequestParam.Notes,
                                    EventDate = createContractRequestParam.EventDate,
                                    EventDateReminder = createContractRequestParam.EventDateReminder,
                                    CreatorCompanyId = createContractRequestParam.CreatorCompanyId,
                                    ContractorCompanyId = createContractRequestParam.ContractorCompanyId,
                                    IsActive = createContractRequestParam.IsActive,
                                    IsDeleted = createContractRequestParam.IsDeleted,
                                    IsCompleted = createContractRequestParam.IsCompleted,
                                    CreatedBy = createContractRequestParam.CreatedBy,
                                    CreatedDate = DateTime.Now.Date,
                                    Role = createContractRequestParam.Role,
                                    Title = createContractRequestParam.Title,
                                    ServiceId = item,
                                    Status = createContractRequestParam.Status,
                                };
                                objDecisionPointEntities.DP_CreateContractMaster.Add(objDP_CreateContractMaster);
                                result += objDecisionPointEntities.SaveChanges();
                                contractId = objDP_CreateContractMaster.Id;
                            }


                            #endregion



                            //save details of uploaded documents in table
                            #region Code to save uploaded file details

                            //if (createContractRequestParam.DocList != null && createContractRequestParam.DocList.Count > 0)
                            if (createContractRequestParam.FilePathStr != null && createContractRequestParam.FilePathStr.Count > 0)
                            {
                                var contractDocMasterDetails = (from contractDocMaster in objDecisionPointEntities.DP_CreateContractDocMaster
                                                                where contractDocMaster.ContractId == createContractRequestParam.Id
                                                                select contractDocMaster).ToList();
                                if (!object.Equals(contractDocMasterDetails, null))
                                {
                                    foreach (var document in contractDocMasterDetails)
                                    {
                                        objDecisionPointEntities.DP_CreateContractDocMaster.Remove(document);
                                    }
                                }
                                foreach (var docs in createContractRequestParam.FilePathStr)
                                {
                                    DP_CreateContractDocMaster objDocMaster = new DP_CreateContractDocMaster()
                                    {
                                        ContractId = contractId,
                                        FileLoc = docs,
                                        FileTitle = Path.GetFileName(docs),
                                        CreatedBy = createContractRequestParam.CreatedBy,
                                        CreatedDate = DateTime.Now.Date,
                                        IsDeleted = createContractRequestParam.IsDeleted
                                    };
                                    objDecisionPointEntities.DP_CreateContractDocMaster.Add(objDocMaster);

                                    result += objDecisionPointEntities.SaveChanges();
                                }

                            }
                            #endregion

                            // save details of contract events

                            if (createContractRequestParam.EventList != null && createContractRequestParam.EventList.Count > 0)
                            {
                                foreach (var events in createContractRequestParam.EventList)
                                {
                                    if (!events.ContractEventId.Equals(0))
                                    {
                                        var contractEventsDetails = (from contractEvents in objDecisionPointEntities.DP_ContractEvent
                                                                     where contractEvents.ContractId == createContractRequestParam.Id && contractEvents.Id == events.ContractEventId
                                                                     select contractEvents).FirstOrDefault();
                                        if (!object.Equals(contractEventsDetails, null))
                                        {
                                            contractEventsDetails.EventTitle = events.EventTitle;
                                            contractEventsDetails.Paragraph = events.Paragraphs;
                                            contractEventsDetails.Section = events.Sections;
                                            contractEventsDetails.SubSection = events.SubSections;
                                            contractEventsDetails.EventDate = events.EventDate;
                                            contractEventsDetails.EventReminderDay = events.EventDateReminder;
                                            contractEventsDetails.Notes = events.Notes;
                                            contractEventsDetails.CreatedBy = createContractRequestParam.CreatedBy;
                                            contractEventsDetails.AssignedUserIds = events.AssignedUserIds;
                                            //contract event mail logs
                                            var contractMailLogs = (from contractMailLog in objDecisionPointEntities.DP_ContractEventsMailLog
                                                                    where contractMailLog.ContractEventId == events.ContractEventId
                                                                    select contractMailLog).Distinct().FirstOrDefault();
                                            if (!object.Equals(contractMailLogs, null))
                                            {
                                                if (!contractMasterDetails.EventDate.Equals(createContractRequestParam.EventDate) || !contractMasterDetails.EventDateReminder.Equals(createContractRequestParam.EventDateReminder))
                                                {
                                                    contractMailLogs.MailDuration = contractEventsDetails.EventReminderDay;
                                                    contractMailLogs.NextMailSendingDate = contractEventsDetails.EventDate.Value.AddDays(-(createContractRequestParam.EventDateReminder));
                                                    contractMailLogs.MailSentTo = contractEventsDetails.AssignedUserIds;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        DP_ContractEvent objDP_ContractEvent = new DP_ContractEvent()
                                        {
                                            ContractId = contractId,
                                            EventTitle = events.EventTitle,
                                            Paragraph = events.Paragraphs,
                                            Section = events.Sections,
                                            SubSection = events.SubSections,
                                            EventDate = events.EventDate,
                                            EventReminderDay = events.EventDateReminder,
                                            Notes = events.Notes,
                                            CreatedBy = createContractRequestParam.CreatedBy,
                                            IsDeleted = false,
                                            AssignedUserIds = events.AssignedUserIds
                                        };
                                        objDecisionPointEntities.DP_ContractEvent.Add(objDP_ContractEvent);
                                    }
                                    objDecisionPointEntities.SaveChanges();
                                }
                            }
                        }

                    }
                    #endregion

                    //Finally saved the changes in local database
                    return result;
                }

            }
            catch
            {
                throw;
            }
        }



        ///// <summary>
        ///// update details of contract master
        ///// </summary>
        ///// <param name="createContractRequestParam">CreateContractRequestParam</param>
        ///// <CreatedBy>Bobi</CreatedBy>
        ///// <CreatedDate>26 Dec 2014</CreatedDate>
        ///// <returns>int</returns>
        //public int UpdateCreateContract(CreateContractRequestParam createContractRequestParam)
        //{
        //    try
        //    {
        //        using (objDecisionPointEntities = new DecisionPointEntities())
        //        {
        //            // update in create contract master table using selected services.
        //            #region Code to assign parameters in Contract Master Table
        //            if (createContractRequestParam.ServiceList != null && createContractRequestParam.ServiceList.Count > 0)
        //            {
        //                var contractMasterDetails = (from contractMaster in objDecisionPointEntities.DP_CreateContractMaster
        //                                             where contractMaster.Id == createContractRequestParam.Id
        //                                             select contractMaster).ToList();
        //                if (!object.Equals(contractMasterDetails, null))
        //                {
        //                    foreach (var contract in contractMasterDetails)
        //                    {
        //                        objDecisionPointEntities.DP_CreateContractMaster.Remove(contract);
        //                    }
        //                }

        //            #endregion
        //                //update details of uploaded documents in table
        //                #region Code to update uploaded file details
        //                var contractDocMasterDetails = (from contractDocMaster in objDecisionPointEntities.DP_CreateContractDocMaster
        //                                                where contractDocMaster.ContractId == createContractRequestParam.Id
        //                                                select contractDocMaster).ToList();
        //                if (!object.Equals(contractDocMasterDetails, null))
        //                {
        //                    foreach (var document in contractDocMasterDetails)
        //                    {
        //                        objDecisionPointEntities.DP_CreateContractDocMaster.Remove(document);
        //                    }
        //                }
        //                #endregion
        //                // update details of contract events
        //                #region Code to update details Contract Events Table
        //                var contractEventsDetails = (from contractEvents in objDecisionPointEntities.DP_ContractEvent
        //                                             where contractEvents.ContractId == createContractRequestParam.Id
        //                                             select contractEvents).ToList();
        //                if (!object.Equals(contractEventsDetails, null))
        //                {
        //                    foreach (var events in contractEventsDetails)
        //                    {
        //                        objDecisionPointEntities.DP_ContractEvent.Remove(events);
        //                    }
        //                }
        //                #endregion
        //            }
        //            objDecisionPointEntities.SaveChanges();
        //        }
        //        createContractRequestParam.Status = "Executed";
        //        return SetCreateContract(createContractRequestParam);
        //    }
        //    catch
        //    {
        //        throw;
        //    }
        //}

        /// <summary>
        /// Get Company Id By UserId
        /// </summary>
        /// <param name="userId">userId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>28 Nov 2014</CreatedDate>
        /// <returns>string</returns>
        public string GetCompanyIdByUserId(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 where user.Id == userId
                                 select user.CompanyId).FirstOrDefault();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }

        public int SaveNonMember(CreateContractRequestParam createContractRequestParam)
        {
            try
            {
                int result = 0;
                bool chkExistStatus = false;
                string genCompanyId = GenrateCompanyId();
                string genUserId = GenrateUserId();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (!string.IsNullOrEmpty(createContractRequestParam.EmailId))
                    {
                        //check user existence in dp_user table using email id.
                        var checkUserExistence = (from user in objDecisionPointEntities.DP_User
                                                  where user.EmailId == createContractRequestParam.EmailId
                                                  select user).FirstOrDefault();
                        if (checkUserExistence != null)//if user exists in dp_user table
                        {
                            var checkUserType = (from profile in objDecisionPointEntities.DP_Profile
                                                 where profile.UserId == checkUserExistence.Id
                                                 select profile).FirstOrDefault();
                            if (checkUserType != null && checkUserType.UserType != Shared.Individual)
                            {
                                //check user existence in DP_ComapnyVendorMapping table
                                var checkMapExistence = (from vendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                         where vendorMap.CompanyId == createContractRequestParam.CreatorCompanyId && vendorMap.VendorId == checkUserExistence.Id
                                                         select vendorMap).FirstOrDefault();
                                if (checkMapExistence != null) // if user exists in mapping table.
                                {
                                    #region to check isActive condition in mapping table

                                    //check user is active or not??
                                    if ((bool)(checkMapExistence.IsActive == null ? false : checkMapExistence.IsActive))
                                    {
                                        result = checkMapExistence.Id;
                                    }
                                    else
                                    {
                                        // update is active true in vendor mapping
                                        checkMapExistence.IsActive = true;
                                        objDecisionPointEntities.SaveChanges();
                                    }
                                    #endregion
                                }
                                else
                                {
                                    // insert in DP_ComapnyVendorMapping table
                                    #region to save in company vendor mapping

                                    DP_ComapnyVendorMapping objDP_CompanyVendorMapping = new DP_ComapnyVendorMapping()
                                    {
                                        CompanyId = createContractRequestParam.CreatorCompanyId,
                                        VendorId = checkUserExistence.Id,
                                        Invitationstatus = false,
                                        CreatedBy = createContractRequestParam.CreatedBy,
                                        CreatedDate = DateTime.Now.Date,
                                        PaymentType = 2,
                                        Status = 0,
                                        IsDeleted = 0,
                                        IsActive = true,
                                        StatusChangedate = DateTime.Now.Date,
                                        ReceiverCompanyId = checkUserExistence.CompanyId,
                                        IsMailSent = false,
                                        IsNonMember = true,
                                    };
                                    objDecisionPointEntities.DP_ComapnyVendorMapping.Add(objDP_CompanyVendorMapping);
                                    #endregion
                                }
                            }
                            else
                            {
                                result = 0;
                            }
                            chkExistStatus = true;
                        }
                    }
                    if (!chkExistStatus)
                    {
                        // if user not exists in user table

                        #region to save details of non member

                        DP_User objDP_User = new DP_User()
                        {
                            EmailId = createContractRequestParam.EmailId,
                            Password = createContractRequestParam.GenPassword,
                            IsActive = true,
                            IsDeleted = false,
                            CreatedBy = createContractRequestParam.CreatedBy,
                            CreatedDate = DateTime.Now.Date,
                            IsTemp = true,
                            UserId = genUserId,
                            CompanyId = genCompanyId,
                            IsRegistered = false,
                        };
                        objDecisionPointEntities.DP_User.Add(objDP_User);
                        objDecisionPointEntities.SaveChanges();
                        result = objDP_User.Id;

                        DP_Profile objDP_Profile = new DP_Profile()
                        {
                            Firstname = createContractRequestParam.FName,
                            MiddelName = createContractRequestParam.MName,
                            LastName = createContractRequestParam.LName,
                            BusinessName = createContractRequestParam.BusinessName,
                            StreetNumber = createContractRequestParam.StreetNumber,
                            Direction = createContractRequestParam.Direction,
                            Street = createContractRequestParam.StreetName,
                            CityName = createContractRequestParam.CityName,

                            ZipCode = createContractRequestParam.ZipCode,
                            OfficePhone = createContractRequestParam.OfficePhone,
                            CellNumber = createContractRequestParam.DirectPhone,
                            IsPayment = false,
                            UserId = result,
                            UserType = Shared.Company
                        };
                        if (!createContractRequestParam.StateId.Equals(0))
                            objDP_Profile.StateId = createContractRequestParam.StateId;
                        objDecisionPointEntities.DP_Profile.Add(objDP_Profile);
                        // objDecisionPointEntities.SaveChanges();
                        DP_FlowMapping flow = new DP_FlowMapping()
                        {
                            FlowId = createContractRequestParam.FlowId,
                            UserId = result,
                            CreatedBy = createContractRequestParam.CreatedBy,
                            UserCompanyId = genCompanyId,
                            CreatedCompanyId = createContractRequestParam.CreatorCompanyId

                        };
                        objDecisionPointEntities.DP_FlowMapping.Add(flow);

                        DP_ComapnyVendorMapping objComapnyVendorMapping = new DP_ComapnyVendorMapping()
                        {
                            CompanyId = createContractRequestParam.CreatorCompanyId,
                            VendorId = result,
                            Invitationstatus = false,
                            CreatedBy = createContractRequestParam.CreatedBy,
                            CreatedDate = DateTime.Now.Date,
                            PaymentType = 2,
                            Status = 0,
                            IsDeleted = 0,
                            IsActive = true,
                            StatusChangedate = DateTime.Now.Date,
                            ReceiverCompanyId = genCompanyId,
                            IsMailSent = false,
                            IsNonMember = true,
                        };
                        objDecisionPointEntities.DP_ComapnyVendorMapping.Add(objComapnyVendorMapping);
                        objDecisionPointEntities.SaveChanges();
                        #endregion
                    }


                }
                return result;
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get contract list 
        /// </summary>
        /// <param name="userId">userId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Dec 04 2014</CreatedDate>
        /// <returns>IList</returns>
        public IList<CreateContractResponseParam> GetContractList(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from contractMaster in objDecisionPointEntities.DP_CreateContractMaster
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on contractMaster.ContractWithId equals profile.UserId

                                 join user in objDecisionPointEntities.DP_User
                                 on contractMaster.ContractWithId equals user.Id

                                 join service in objDecisionPointEntities.DP_ServicesMaster
                                 on contractMaster.ServiceId equals service.Id

                                 where contractMaster.CreatedBy == userId
                                 select new CreateContractResponseParam
                                 {
                                     Id = contractMaster.Id,
                                     BusinessName = profile.BusinessName,
                                     StreetName = profile.Street,
                                     StreetNumber = profile.StreetNumber,
                                     Direction = profile.Direction,
                                     CityName = profile.CityName,
                                     StateId = (int)(profile.StateId == null ? 0 : profile.StateId),
                                     ZipCode = profile.ZipCode,
                                     FName = profile.Firstname,
                                     MName = profile.MiddelName,
                                     LName = profile.LastName,
                                     OfficePhone = profile.OfficePhone,
                                     DirectPhone = profile.CellNumber,
                                     EmailId = user.EmailId,
                                     Role = contractMaster.Role,
                                     ExecutedDate = contractMaster.ExecutedDate,
                                     ContractDate = contractMaster.ContractDate,
                                     EventDate = contractMaster.EventDate,
                                     ExpirationDate = contractMaster.ExpirationDate,
                                     ExpirationDateReminder = (int)(contractMaster.ExpirationDateReminder),
                                     EventDateReminder = (int)(contractMaster.EventDateReminder),
                                     Paragraph = contractMaster.Paragraph,
                                     Section = contractMaster.Section,
                                     SubSection = contractMaster.SubSection,
                                     Notes = contractMaster.Notes,
                                     GeneralComments = contractMaster.GeneralComments,
                                     ManagerName = contractMaster.ManagerName,
                                     ServiceName = service.Service,
                                     IsActive = (bool)(contractMaster.IsActive),
                                     Status = contractMaster.Status,
                                     CreatedDate = contractMaster.CreatedDate,
                                 }).ToList();

                    return query;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// delete contrcat 
        /// </summary>
        /// <param name="contractId">contractId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Dec 05 2014</CreatedDate>
        /// <returns>int</returns>
        public int DeleteContract(int contractId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query1 = (from docmaster in objDecisionPointEntities.DP_CreateContractDocMaster
                                  where docmaster.ContractId == contractId
                                  select docmaster).ToList();
                    if (query1 != null)
                    {
                        foreach (var content in query1)
                        {
                            content.IsDeleted = true;
                        }
                    }

                    var query2 = (from master in objDecisionPointEntities.DP_CreateContractMaster
                                  where master.Id == contractId
                                  select master).FirstOrDefault();
                    if (query2 != null)
                    {
                        query2.IsActive = false;
                        query2.IsDeleted = true;
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// ReActive contrcat 
        /// </summary>
        /// <param name="contractId">contractId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Dec 08 2014</CreatedDate>
        /// <returns>int</returns>
        public int ReActiveContract(int contractId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query1 = (from docmaster in objDecisionPointEntities.DP_CreateContractDocMaster
                                  where docmaster.ContractId == contractId
                                  select docmaster).ToList();
                    if (query1 != null)
                    {
                        foreach (var content in query1)
                        {
                            content.IsDeleted = false;
                        }
                    }

                    var query2 = (from master in objDecisionPointEntities.DP_CreateContractMaster
                                  where master.Id == contractId
                                  select master).FirstOrDefault();
                    if (query2 != null)
                    {
                        query2.IsActive = true;
                        query2.IsDeleted = false;
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// get My contract list 
        /// </summary>
        /// <param name="userId">userId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Dec 08 2014</CreatedDate>
        /// <returns>IList</returns>
        public IList<CreateContractResponseParam> GetMyContract(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from contractMaster in objDecisionPointEntities.DP_CreateContractMaster
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on contractMaster.CreatedBy equals profile.UserId

                                 join user in objDecisionPointEntities.DP_User
                                 on contractMaster.ContractWithId equals user.Id

                                 join service in objDecisionPointEntities.DP_ServicesMaster
                                 on contractMaster.ServiceId equals service.Id

                                 where contractMaster.OwnerId == userId
                                 select new CreateContractResponseParam
                                 {
                                     Id = contractMaster.Id,
                                     BusinessName = profile.BusinessName,
                                     StreetName = profile.Street,
                                     StreetNumber = profile.StreetNumber,
                                     Direction = profile.Direction,
                                     CityName = profile.CityName,
                                     StateId = (int)(profile.StateId == null ? 0 : profile.StateId),
                                     ZipCode = profile.ZipCode,
                                     FName = profile.Firstname,
                                     MName = profile.MiddelName,
                                     LName = profile.LastName,
                                     OfficePhone = profile.OfficePhone,
                                     DirectPhone = profile.CellNumber,
                                     EmailId = user.EmailId,
                                     Role = contractMaster.Role,
                                     ExecutedDate = contractMaster.ExecutedDate,
                                     ContractDate = contractMaster.ContractDate,
                                     EventDate = contractMaster.EventDate,
                                     ExpirationDate = contractMaster.ExpirationDate,
                                     ExpirationDateReminder = (int)(contractMaster.ExpirationDateReminder),
                                     EventDateReminder = (int)(contractMaster.EventDateReminder),
                                     Paragraph = contractMaster.Paragraph,
                                     Section = contractMaster.Section,
                                     SubSection = contractMaster.SubSection,
                                     Notes = contractMaster.Notes,
                                     GeneralComments = contractMaster.GeneralComments,
                                     ManagerName = contractMaster.ManagerName,
                                     ServiceName = service.Service,
                                     IsActive = (bool)(contractMaster.IsActive),
                                     Status = contractMaster.Status,
                                     CreatedDate = contractMaster.CreatedDate,
                                 }).ToList();

                    return query;
                }
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// get contract list 
        /// </summary>
        /// <param name="userId">userId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Dec 04 2014</CreatedDate>
        /// <returns>IList</returns>
        public CreateContractResponseParam GetContractListAsPerId(int id)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from contractMaster in objDecisionPointEntities.DP_CreateContractMaster
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on contractMaster.ContractWithId equals profile.UserId

                                 join contractwith in objDecisionPointEntities.DP_User
                                 on contractMaster.ContractWithId equals contractwith.Id

                                 join owner in objDecisionPointEntities.DP_Profile
                                 on contractMaster.OwnerId equals owner.UserId

                                 join executedby in objDecisionPointEntities.DP_Profile
                                 on contractMaster.ExecutedById equals executedby.UserId

                                 join servicemaster in objDecisionPointEntities.DP_ServicesMaster
                                 on contractMaster.ServiceId equals servicemaster.Id

                                 where contractMaster.Id == id
                                 select new CreateContractResponseParam
                                 {
                                     Id = contractMaster.Id,
                                     BusinessName = profile.BusinessName,
                                     StreetName = profile.Street,
                                     StreetNumber = profile.StreetNumber,
                                     Direction = profile.Direction,
                                     CityName = profile.CityName,
                                     StateId = (int)(profile.StateId == null ? 0 : profile.StateId),
                                     ZipCode = profile.ZipCode,
                                     FName = profile.Firstname,
                                     MName = profile.MiddelName,
                                     LName = profile.LastName,
                                     OfficePhone = profile.OfficePhone,
                                     DirectPhone = profile.CellNumber,
                                     EmailId = contractwith.EmailId,
                                     Role = contractMaster.Role,
                                     ExecutedDate = contractMaster.ExecutedDate,
                                     ContractDate = contractMaster.ContractDate,
                                     EventDate = contractMaster.EventDate,
                                     ExpirationDate = contractMaster.ExpirationDate,
                                     ExpirationDateReminder = (int)(contractMaster.ExpirationDateReminder),
                                     EventDateReminder = (int)(contractMaster.EventDateReminder),
                                     Paragraph = contractMaster.Paragraph,
                                     Section = contractMaster.Section,
                                     SubSection = contractMaster.SubSection,
                                     Notes = contractMaster.Notes,
                                     GeneralComments = contractMaster.GeneralComments,
                                     ManagerName = contractMaster.ManagerName,
                                     IsActive = (bool)(contractMaster.IsActive),
                                     Status = contractMaster.Status,
                                     CreatedDate = contractMaster.CreatedDate,
                                     OwnerName = owner.Firstname + Shared.SingleSpace + owner.LastName,
                                     ExecutedByName = executedby.Firstname + Shared.SingleSpace + executedby.LastName,
                                     Title = contractMaster.Title,
                                     ContractWithName = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                     ServiceName = servicemaster.Service,
                                     ServiceId = servicemaster.Id,
                                     OwnerId = owner.UserId,
                                     ContractWithId = (int)contractMaster.ContractWithId,
                                     ContractorCompanyId = contractMaster.ContractorCompanyId,
                                     CreatorCompanyId = contractMaster.CreatorCompanyId,
                                     ExecutedById = executedby.UserId
                                 }).FirstOrDefault();

                    return query;
                }
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// get contract event list 
        /// </summary>
        /// <param name="userId">userId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Dec 04 2014</CreatedDate>
        /// <returns>IList</returns>
        public IList<ContractEvent> GetContractEventsListAsPerId(int id)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = (from contractEvent in objDecisionPointEntities.DP_ContractEvent
                                 where contractEvent.ContractId == id
                                 select new ContractEvent
                                 {
                                     EventDate = contractEvent.EventDate,
                                     EventDateReminder = (int)(contractEvent.EventReminderDay == null ? 0 : contractEvent.EventReminderDay),
                                     EventTitle = contractEvent.EventTitle,
                                     Notes = contractEvent.Notes,
                                     Paragraphs = contractEvent.Paragraph,
                                     Sections = contractEvent.Section,
                                     SubSections = contractEvent.SubSection,
                                     ContractEventId = contractEvent.Id,
                                     AssignedUserIds = contractEvent.AssignedUserIds
                                 }).ToList();

                    return query;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// Used for serach the document/messages/courses in history section of user dashboard
        /// </summary>
        /// <param name="term">string</param>
        /// <param name="userId">int</param>
        /// <param name="type">string</param>
        /// <returns> retrn serach record in history section</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 1 2013</createdDate>
        public IList<CreateContractResponseParam> SerachInContract(string serachTerm)
        {
            IList<CreateContractResponseParam> contractSerachResult = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    contractSerachResult = (from contractMaster in objDecisionPointEntities.DP_CreateContractMaster
                                            join profile in objDecisionPointEntities.DP_Profile
                                            on contractMaster.ContractWithId equals profile.UserId

                                            join profile2 in objDecisionPointEntities.DP_Profile
                                           on contractMaster.CreatedBy equals profile2.UserId

                                            join user in objDecisionPointEntities.DP_User
                                            on contractMaster.ContractWithId equals user.Id
                                            select new CreateContractResponseParam
                                            {
                                                BusinessName = profile.BusinessName,
                                                CreatorCompanyId = contractMaster.CreatorCompanyId,
                                                ContractorCompanyId = contractMaster.ContractorCompanyId,
                                                CompanyName = profile2.BusinessName,
                                            }).Distinct().ToList();


                    return contractSerachResult;


                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get non member details
        /// </summary>
        /// <param name="userId">userId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Dec 17 2014</CreatedDate>
        /// <returns>NonMemberResponseParam </returns>
        public List<NonMemberResponseParam> GetNonMemberDetails(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 join vendormapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                  on user.Id equals vendormapping.VendorId
                                 join flowmapping in objDecisionPointEntities.DP_FlowMapping
                                 on new { a = vendormapping.CreatedBy, b = vendormapping.CompanyId, c = vendormapping.VendorId }
                                 equals new { a = flowmapping.CreatedBy, b = flowmapping.CreatedCompanyId, c = flowmapping.UserId }

                                 join profile2 in objDecisionPointEntities.DP_Profile
                                 on vendormapping.CreatedBy equals profile2.UserId

                                 where user.Id == userId
                                 select new NonMemberResponseParam
                                 {
                                     CompanyName = profile.BusinessName,
                                     fName = profile.Firstname,
                                     lName = profile.LastName,
                                     emailId = user.EmailId,
                                     flowId = (int)flowmapping.FlowId,
                                     UserId = user.Id,
                                     UserCompanyId = user.CompanyId,
                                     CreatedBy = (int)user.CreatedBy,
                                     CreatorCompanyId = vendormapping.CompanyId,
                                     Password = user.Password,
                                     CreatorCompanyName = profile2.BusinessName,
                                 }).ToList();
                    return query;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// invite non member
        /// </summary>
        /// <param name="objResponseParam">objResponseParam</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Dec 18 2014</CreatedDate>
        /// <returns>int</returns>
        public int InviteNonMember(NonMemberResponseParam objResponseParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var checkMapExistence = (from vendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                             where vendorMap.CompanyId == objResponseParam.CreatorCompanyId && vendorMap.VendorId == objResponseParam.UserId
                                             select vendorMap).FirstOrDefault();
                    if (checkMapExistence != null)
                    {
                        checkMapExistence.IsMailSent = true;
                        checkMapExistence.IsNonMember = false;
                    }
                    DP_DocFlowMapping docflow = new DP_DocFlowMapping()
                    {
                        DocFlowId = objResponseParam.DocFlowId,
                        UserId = Convert.ToInt32(objResponseParam.UserId, CultureInfo.InvariantCulture),
                        CreatedBy = objResponseParam.CreatedBy,
                        UserCompanyId = objResponseParam.UserCompanyId,
                        CreatedCompanyId = objResponseParam.CreatorCompanyId
                    };
                    objDecisionPointEntities.DP_DocFlowMapping.Add(docflow);

                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// get contrcat documents
        /// </summary>
        /// <param name="contrcatId">contrcatId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Dec 22 2014</CreatedDate>
        /// <returns>CommContentRequestParam</returns>
        public IList<CommContentRequestParam> GetContrcatDoc(int contrcatId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from docContrcat in objDecisionPointEntities.DP_CreateContractDocMaster
                                 where docContrcat.ContractId == contrcatId
                                 select new CommContentRequestParam
                                 {
                                     files = docContrcat.FileLoc,
                                     filetype = docContrcat.FileTitle,
                                     docId = docContrcat.Id == null ? 0 : docContrcat.Id,
                                 }).ToList();
                    return query;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// mail reminder for contracts mail sending : mail send to owner of that contract
        /// </summary>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 3 2015</createdDate>
        public List<CreateContractResponseParam> ContractsMailSending()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var contractAlerts = (from contractmaster in objDecisionPointEntities.DP_CreateContractMaster
                                          join contractmail in objDecisionPointEntities.DP_ContractMailReminderLog
                                          on contractmaster.Id equals contractmail.ContractId
                                          //owner
                                          join owneruser in objDecisionPointEntities.DP_User
                                          on contractmaster.OwnerId equals owneruser.Id
                                          join ownerprofile in objDecisionPointEntities.DP_Profile
                                          on owneruser.Id equals ownerprofile.UserId

                                          where contractmail.NextMailSendingDate == currentdate
                                          && (contractmaster.Status == Shared.Expired || contractmaster.Status == Shared.Alerts)
                                          && contractmaster.IsCompleted == false
                                          select new CreateContractResponseParam
                                          {
                                              OwnerName = ownerprofile.Firstname + Shared.SingleSpace + ownerprofile.MiddelName + Shared.SingleSpace + ownerprofile.LastName,
                                              EmailId = owneruser.EmailId,
                                              ManagerName = contractmaster.ManagerName,
                                              Id = contractmail.Id,
                                              CreatedBy = (int)(contractmaster.CreatedBy == null ? 0 : contractmaster.CreatedBy)
                                          }).ToList();
                    return contractAlerts;

                }


            }
            catch
            {

                throw;
            }



        }
        /// <summary>
        /// mail reminder for contracts events mail sending : mail send to persons those was assign to particular contract
        /// </summary>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 27 2015</createdDate>
        public List<CreateContractResponseParam> ContractsEventsMailSending()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var contractAlerts = (from contractmaster in objDecisionPointEntities.DP_CreateContractMaster
                                          join contractevent in objDecisionPointEntities.DP_ContractEvent
                                          on contractmaster.Id equals contractevent.ContractId
                                          join contracteventlog in objDecisionPointEntities.DP_ContractEventsMailLog
                                          on contractevent.Id equals contracteventlog.ContractEventId
                                          where contracteventlog.NextMailSendingDate == currentdate
                                          && contractmaster.IsCompleted == false
                                          select new CreateContractResponseParam
                                          {
                                              OwnerName = contractevent.AssignedUserIds,
                                              ManagerName = contractmaster.ManagerName,
                                              Id = contractevent.Id,
                                              CreatedBy = (int)(contractmaster.CreatedBy == null ? 0 : contractmaster.CreatedBy)
                                          }).ToList();
                    return contractAlerts;

                }


            }
            catch
            {

                throw;
            }



        }
        /// <summary>
        /// used for Set the contracts in alert section
        /// </summary>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 3 2015</createdDate>
        public int SetContractEventsAlerts()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var contractEventsAlerts = (from contractmaster in objDecisionPointEntities.DP_CreateContractMaster
                                                join contractevents in objDecisionPointEntities.DP_ContractEvent
                                                on contractmaster.Id equals contractevents.ContractId
                                                where SqlFunctions.DateDiff("DAY", currentdate, contractevents.EventDate) <= contractmaster.EventDateReminder && contractmaster.IsCompleted == false
                                                select new { contractmaster, contractevents }).ToList();
                    foreach (var item in contractEventsAlerts)
                    {
                        var contractMailLogs = (from contractMailLog in objDecisionPointEntities.DP_ContractEventsMailLog
                                                where contractMailLog.ContractEventId == item.contractevents.Id
                                                select contractMailLog).Distinct().ToList();

                        if (contractMailLogs.Count == 0)
                        {
                            DP_ContractEventsMailLog objDPContractEventsMailLog = new DP_ContractEventsMailLog()
                            {
                                ContractEventId = item.contractevents.Id,
                                MailDuration = item.contractevents.EventReminderDay,
                                NextMailSendingDate = currentdate,
                                MailSentTo = item.contractevents.AssignedUserIds
                            };
                            objDecisionPointEntities.DP_ContractEventsMailLog.Add(objDPContractEventsMailLog);
                        }

                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// used for Set the contracts in alert section
        /// </summary>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 3 2015</createdDate>
        public int SetContractInAlerts()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var contractAlerts = (from contractmaster in objDecisionPointEntities.DP_CreateContractMaster
                                          where SqlFunctions.DateDiff("DAY", currentdate, contractmaster.ExpirationDate) <= contractmaster.ExpirationDateReminder && contractmaster.IsCompleted == false
                                          select contractmaster).ToList();
                    foreach (var item in contractAlerts)
                    {
                        if (!item.Status.Equals(Shared.Alerts))
                        {
                            item.Status = Shared.Alerts;
                        }
                        var contractMailLogs = (from contractMailLog in objDecisionPointEntities.DP_ContractMailReminderLog
                                                where contractMailLog.ContractId == item.Id
                                                select contractMailLog).Distinct().ToList();

                        if (contractMailLogs.Count == 0)
                        {
                            DP_ContractMailReminderLog objDPContractMailReminderLog = new DP_ContractMailReminderLog()
                            {
                                ContractId = item.Id,
                                MailDuration = item.ExpirationDateReminder,
                                NextMailSendingDate = currentdate
                            };
                            objDecisionPointEntities.DP_ContractMailReminderLog.Add(objDPContractMailReminderLog);
                        }

                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Update Contract Event Log Invite Date
        /// </summary>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 3 2015</createdDate>
        public void UpdateContractEventLogInviteDate(int tblId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var contractmailAlerts = (from contractmail in objDecisionPointEntities.DP_ContractEventsMailLog
                                              where contractmail.Id == tblId
                                              select contractmail).FirstOrDefault();
                    if (!object.Equals(contractmailAlerts, null))
                    {
                        contractmailAlerts.LastMailSentDate = currentdate;
                        contractmailAlerts.NextMailSendingDate = contractmailAlerts.NextMailSendingDate.Value.AddDays(Convert.ToDouble(contractmailAlerts.MailDuration == null ? 0 : contractmailAlerts.MailDuration));
                        contractmailAlerts.MailSentCount = contractmailAlerts.MailSentCount + 1;
                    }
                    objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Update Contract Log Invite Date
        /// </summary>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 3 2015</createdDate>
        public void UpdateContractLogInviteDate(int tblId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var contractmailAlerts = (from contractmail in objDecisionPointEntities.DP_ContractMailReminderLog
                                              where contractmail.Id == tblId
                                              select contractmail).FirstOrDefault();
                    if (!object.Equals(contractmailAlerts, null))
                    {
                        contractmailAlerts.LastMailSentDate = currentdate;
                        contractmailAlerts.NextMailSendingDate = contractmailAlerts.NextMailSendingDate.Value.AddDays(Convert.ToDouble(contractmailAlerts.MailDuration == null ? 0 : contractmailAlerts.MailDuration));
                        contractmailAlerts.MailSentCount = contractmailAlerts.MailSentCount + 1;
                    }
                    objDecisionPointEntities.SaveChanges();
                }
            }
            catch
            {

                throw;
            }
        }
        #endregion

        #region Permission Table

        /// <summary>
        /// used for get the funtional permission details
        /// </summary>
        /// <returns>List of funtional permissions</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>4 Dec 2014</createddate>
        public IList<PermissionTableResponseParam> GetFuntionalPermission(PermissionTableRequestParam objPermissionTableRequestParam)
        {
            try
            {
                IList<PermissionTableResponseParam> permissionDetails = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //get all funtional permission from permission table 
                    if (objPermissionTableRequestParam.Type.Equals(0))
                    {
                        permissionDetails = (from permission in objDecisionPointEntities.DP_PermissionTableMaster
                                             where permission.IsDeleted == false
                                             select new PermissionTableResponseParam
                                             {
                                                 FuntionalPermission = string.IsNullOrEmpty(permission.FuntionalPermission) ? string.Empty : permission.FuntionalPermission,
                                                 TableId = permission.Id
                                             }).Distinct().OrderBy(x => x.FuntionalPermission).ToList();
                    }
                    //get funtional permission as per title
                    else if (objPermissionTableRequestParam.Type.Equals(1))
                    {
                        permissionDetails = (from permissionmap in objDecisionPointEntities.DP_PermissionTableMapping
                                             join permission in objDecisionPointEntities.DP_PermissionTableMaster
                                             on permissionmap.FuntionalPermissionId equals permission.Id
                                             where permissionmap.TitleId == objPermissionTableRequestParam.TitleId
                                             select new PermissionTableResponseParam
                                             {
                                                 FuntionalPermission = string.IsNullOrEmpty(permission.FuntionalPermission) ? string.Empty : permission.FuntionalPermission,
                                                 TableId = permission.Id
                                             }).Distinct().OrderBy(x => x.FuntionalPermission).ToList();
                    }
                    //get funtional permission as per company
                    else if (objPermissionTableRequestParam.Type.Equals(2))
                    {
                        permissionDetails = (from permissionmap in objDecisionPointEntities.DP_PermissionTableMapping
                                             join permission in objDecisionPointEntities.DP_PermissionTableMaster
                                             on permissionmap.FuntionalPermissionId equals permission.Id
                                             join title in objDecisionPointEntities.DP_TitleMaster
                                             on permissionmap.TitleId equals title.Id
                                             where permissionmap.CreatedCompanyId == objPermissionTableRequestParam.CreatedCompanyId
                                             select new PermissionTableResponseParam
                                             {
                                                 FuntionalPermission = string.IsNullOrEmpty(permission.FuntionalPermission) ? string.Empty : permission.FuntionalPermission,
                                                 TitleId = (int)(permissionmap.TitleId == null ? 0 : permissionmap.TitleId),
                                                 TitleName = string.IsNullOrEmpty(title.Title) ? string.Empty : title.Title,
                                                 FunPerId = (int)(permissionmap.FuntionalPermissionId == null ? 0 : permissionmap.FuntionalPermissionId),
                                             }).Distinct().OrderBy(x => x.FuntionalPermission).ToList();
                    }
                    return permissionDetails;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// Used for save the funtional permission mapping for internal staff's
        /// </summary>
        /// <param name="objPermissionTableResponseParam"></param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>4 Dec 2014</createddate>
        public int SaveFuntionalPermissionTableMapping(PermissionTableRequestParam objPermissionTableRequestParam)
        {
            try
            {
                bool isExist = false;

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var funPermissionDetails = (from funPermission in objDecisionPointEntities.DP_PermissionTableMapping
                                                where funPermission.TitleId == objPermissionTableRequestParam.TitleId &&
                                                funPermission.CreatedCompanyId == objPermissionTableRequestParam.CreatedCompanyId
                                                select funPermission).ToList();
                    //check that permission is already exist in system or not as per title : if exist than remove it
                    if (funPermissionDetails.Count > 0)
                    {
                        isExist = true;
                        foreach (var item in funPermissionDetails)
                        {
                            objPermissionTableRequestParam.CreatedBy = (int)item.CreatedBy;
                            currentdate = (DateTime)item.CreatedDate;
                            objDecisionPointEntities.DP_PermissionTableMapping.Remove(item);
                        }

                    }
                    if (!string.IsNullOrEmpty(objPermissionTableRequestParam.FunPermissionIds))
                    {
                        //split the funtional permissionId's and assign into the list of funtional permissionId's 
                        funPermissionIds = objPermissionTableRequestParam.FunPermissionIds.Split(char.Parse(Shared.Colon)).Select(x => int.Parse(x)).ToList();

                        //save all permission with particular title in permission mapping 
                        foreach (var item in funPermissionIds)
                        {
                            DP_PermissionTableMapping objDPPermissionTableMapping = new DP_PermissionTableMapping()
                            {
                                FuntionalPermissionId = item,
                                CreatedCompanyId = objPermissionTableRequestParam.CreatedCompanyId,
                                TitleId = objPermissionTableRequestParam.TitleId,
                                CreatedDate = currentdate,
                                CreatedBy = objPermissionTableRequestParam.CreatedBy,
                                ModifiedBy = objPermissionTableRequestParam.ModifiedBy,
                                ModifiedDate = System.DateTime.Now.Date
                            };
                            if (isExist)
                            {
                                objDPPermissionTableMapping.ModifiedBy = objPermissionTableRequestParam.ModifiedBy;
                                objDPPermissionTableMapping.ModifiedDate = currentdate;
                            }
                            objDecisionPointEntities.DP_PermissionTableMapping.Add(objDPPermissionTableMapping);
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }

        public int? GetTitleIdAsPerUserId(PermissionTableRequestParam objPermissionTableRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //get title of particular user
                    var titleAsPerUser = (from title in objDecisionPointEntities.DP_TitleMapping
                                          join titlemap in objDecisionPointEntities.DP_TitleMaster
                                          on title.TitleId equals titlemap.Id
                                          where title.UserId == objPermissionTableRequestParam.UserId && title.CreatedCompanyId == objPermissionTableRequestParam.CreatedCompanyId
                                          && titlemap.IsActive == true && titlemap.IsDeleted == false
                                          select title.TitleId == null ? 0 : title.TitleId).FirstOrDefault();
                    return titleAsPerUser;

                }
            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// used for get the funtional permission details as per user and and its title
        /// </summary>
        /// <returns>List of funtional permissions</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>8 Dec 2014</createddate>
        public IList<PermissionTableResponseParam> GetFuntionalPermissionAsPerUserTitle(PermissionTableRequestParam objPermissionTableRequestParam)
        {
            try
            {
                //get title detail of particular user
                TitleId = GetTitleIdAsPerUserId(objPermissionTableRequestParam);
                IList<PermissionTableResponseParam> permissionDetails = null;
                IList<PermissionTableResponseParam> myTabDetails = null;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //get all funtional permission from permission table : tabType 1 for my admin tabs and 0 for my tabs tab
                    permissionDetails = (from permissionmap in objDecisionPointEntities.DP_PermissionTableMapping
                                         join permission in objDecisionPointEntities.DP_PermissionTableMaster
                                          on permissionmap.FuntionalPermissionId equals permission.Id
                                         join tabmaster in objDecisionPointEntities.DP_TabMaster
                                          on permissionmap.FuntionalPermissionId equals tabmaster.FunPerId
                                         select new PermissionTableResponseParam
                                         {
                                             FuntionalPermission = string.IsNullOrEmpty(permission.FuntionalPermission) ? string.Empty : permission.FuntionalPermission,
                                             TableId = permission.Id,
                                             TabName = tabmaster.TabName,
                                             TabId = tabmaster.TabId,
                                             TabUrl = tabmaster.TabUrl,
                                             TitleId = (int)(permissionmap.TitleId == null ? 0 : permissionmap.TitleId),
                                             IsMainTab = (bool)(tabmaster.IsMainTab == null ? true : tabmaster.IsMainTab),
                                             MainTabName = tabmaster.MainTabName,
                                             TabSectionName = tabmaster.TabSectionName,
                                             TabType = tabmaster.TabDashBoard
                                         }).ToList();
                    //get all funtional permission from permission table : tabType 1 for my admin tabs and 0 for my tabs tab
                    myTabDetails = (from tabmaster in objDecisionPointEntities.DP_TabMaster
                                    join permission in objDecisionPointEntities.DP_PermissionTableMaster
                                    on tabmaster.FunPerId equals permission.Id
                                   into per
                                    from finalPer in per.DefaultIfEmpty()
                                    select new PermissionTableResponseParam
                                    {
                                        FuntionalPermission = string.IsNullOrEmpty(tabmaster.TabName) ? string.Empty : tabmaster.TabName,
                                        TableId = (int)(finalPer.Id == null ? 0 : finalPer.Id),
                                        TabName = tabmaster.TabName,
                                        TabId = tabmaster.TabId,
                                        TabUrl = tabmaster.TabUrl,
                                        IsMainTab = (bool)(tabmaster.IsMainTab == null ? true : tabmaster.IsMainTab),
                                        MainTabName = tabmaster.MainTabName,
                                        TabSectionName = tabmaster.TabSectionName,
                                        TabType = tabmaster.TabDashBoard
                                    }).ToList();
                }

                if (objPermissionTableRequestParam.UserType.Equals(Shared.IC))
                {
                    myTabDetails = myTabDetails.Where(x => x.TabType.Contains(Shared.IC)).ToList();
                    //BackGroundCheckMasterRequestParam objBackGroundCheckMasterRequestParam = new BackGroundCheckMasterRequestParam()
                    //{
                    //    CreatorCompanyId = objPermissionTableRequestParam.CreatedCompanyId,
                    //    UserId = objPermissionTableRequestParam.UserId,
                    //    CompanyId = objPermissionTableRequestParam.CreatedCompanyId,
                    //    OperationType = 0
                    //};
                    ////check packages
                    //var pkgDetails = GetBackgroundMapping(objBackGroundCheckMasterRequestParam).Where(x => x.SterlingPkgName == "Premium Package").ToList();
                    //if (pkgDetails.Count() <= 0)
                    //{
                    //    var getAddInviteTab = myTabDetails.Where(x => x.TabName == "Add Invite").FirstOrDefault();
                    //    myTabDetails.Remove(getAddInviteTab);
                    //}
                }
                else if (objPermissionTableRequestParam.UserType.Equals(Shared.Company))
                {
                    myTabDetails = myTabDetails.Where(x => x.TabType.Contains(Shared.Company)).ToList();
                }
                else if (objPermissionTableRequestParam.UserType.Equals(Shared.SuperAdmin))
                {
                    myTabDetails = myTabDetails.Where(x => x.TabType.Contains(Shared.SuperAdmin)).ToList();
                }
                else if (objPermissionTableRequestParam.UserType.Equals(Shared.NonClient))
                {
                    myTabDetails = myTabDetails.Where(x => x.TabType.Contains(Shared.NonClient)).ToList();
                }
                else
                {
                    myTabDetails = myTabDetails.Where(x => (x.TabType.Contains(Shared.Company))).ToList();
                }
                if (TitleId != null)
                {
                    if (!TitleId.Equals(0))
                    {
                        permissionDetails = permissionDetails.Where(x => x.TitleId == TitleId).ToList();
                        myTabDetails = myTabDetails.Where(x => x.IsMainTab == true && x.TableId == 0).ToList();
                        return myTabDetails.Union(permissionDetails).ToList();
                    }
                    else
                    {
                        return myTabDetails;
                    }
                }
                else
                {
                    return myTabDetails;
                }


            }
            catch
            {
                throw;
            }
        }

        #endregion

        #region IC Non Client and Make Payment
        /// <summary>
        /// Used For GetICNonClientDetails
        /// </summary>
        /// <param name="UserId"></param>
        /// <param name="CompanyId"></param>
        /// <param name="locationfilter"></param>
        /// <param name="rolefilter"></param>
        /// <param name="servicefilter"></param>
        /// <param name="titlefilter"></param>
        /// <param name="type"></param>
        /// <returns>retrun the req documemnt of particular user</returns>
        /// <createdBy>bobi</createdBy>
        /// <createdDate>nov 26 2013</createdDate>
        public IEnumerable<VendorClientList> GetICNonClientDetails(string companyId, int type)
        {
            IEnumerable<VendorClientList> finallist = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    bool isactive = true;
                    if (type.Equals(1))
                    {
                        isactive = false;
                    }

                    //entity query for fetch individual reqiured documents record  as per user Id
                    var query = (from staff in objDecisionPointEntities.DP_ICNonClientsMapping
                                 join user in objDecisionPointEntities.DP_User
                                 on staff.InviteeUserId equals user.Id
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 join vendorTypeMap in objDecisionPointEntities.DP_VendorTypeMapping
                                 on user.Id equals vendorTypeMap.UserId
                                 into VTM
                                 from FVTM in VTM.DefaultIfEmpty().Where(x => (bool)(x.IsDefault == null ? false : x.IsDefault))
                                 join vendorTypeMaster in objDecisionPointEntities.DP_VendorType
                                on FVTM.VendorTypeId equals vendorTypeMaster.Id
                                into VTMaster
                                 from FVTMaster in VTMaster.DefaultIfEmpty()
                                 where staff.InvitedCompanyId == companyId
                                 && user.IsActive == true && staff.IsActive == isactive && profile.UserType == Shared.IC
                                 select new VendorClientList
                                 {
                                     Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                     emailId = user.EmailId,
                                     phone = profile.OfficePhone == null ? string.Empty : profile.OfficePhone,
                                     Id = user.Id,
                                     Vendor = profile.BusinessName == null ? string.Empty : profile.BusinessName,
                                     companyId = user.CompanyId,
                                     invitationStatus = (bool)(user.IsRegistered == null ? false : user.IsRegistered),
                                     VendorType = FVTMaster.VendorType
                                 }).ToList();
                    finallist = query;
                }
                return finallist;
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// make payment 
        /// </summary>
        /// <param name="objpayment">pass values for saving</param>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 19 2015</createdDate>
        public int ICNonClientPayment(PaymentAmountResponseParam objpayment)
        {
            try
            {
                int? Ids = objpayment.userId;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //insert into company payement
                    DP_ICNonClientsPaymentLog objDPICNonClientsPaymentLog = new DP_ICNonClientsPaymentLog
                    {
                        CompanyId = objpayment.CompanyCode,
                        UserId = objpayment.userId,
                        ICCompanyId = Convert.ToString(objpayment.InviteeCompanyId),
                        TransactionType = objpayment.TransactionType,
                        TransactionDate = currentdate,
                        TransactionCode = objpayment.TransactionCode,
                        TransactionMessage = objpayment.TransactionMessage,
                        CreatedDate = System.DateTime.Now.Date,
                        CreatedBy = objpayment.userId,
                    };
                    objDecisionPointEntities.DP_ICNonClientsPaymentLog.Add(objDPICNonClientsPaymentLog);
                    // objDecisionPointEntities.SaveChanges();
                    //Get record of that particular messages which we are going to delete
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.Id == objpayment.userId
                                 select profile).FirstOrDefault();
                    query.IsPayment = true;
                    //Finally saved the changes in local database
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// reactive ic non client by their id
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 21 2015</createdDate>
        public int ReactiveICNonClient(int id, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var result = (from map in objDecisionPointEntities.DP_ICNonClientsMapping
                                  join user in objDecisionPointEntities.DP_User
                                  on map.InviteeUserId equals user.Id
                                  where user.Id == id && map.InvitedCompanyId == companyId
                                  select map).FirstOrDefault();
                    if (result != null)
                    {
                        result.IsActive = true;
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }

        }
        /// <summary>
        /// RemoveICNonClient
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        /// <createdBy>Bobi</createdBy>
        /// <createdDate>Jan 21 2015</createdDate>
        public int RemoveICNonClient(int id, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var result = (from map in objDecisionPointEntities.DP_ICNonClientsMapping
                                  where map.InviteeUserId == id
                                  && map.InvitedCompanyId == companyId
                                  select map).FirstOrDefault();
                    if (result != null)
                    {
                        result.IsActive = false;
                        result.StatusChangeDate = currentdate;
                    }
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }

        }

        #endregion

        #region Web Service

        public APIMasterResponseParam InsertAPILog(APILogRequestParam objRequestParam)
        {
            try
            {
                objAPIMasterResponseParam = new APIMasterResponseParam();

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from apiMaster in objDecisionPointEntities.DP_APIMaster
                                 where apiMaster.UserName == objRequestParam.APIUserName && apiMaster.Password == objRequestParam.APIPassword
                                 select apiMaster.Id).FirstOrDefault();

                    if (query != null)
                    {
                        if (!string.IsNullOrEmpty(objRequestParam.RefrenceId))
                        {
                            var check = (from apiLog in objDecisionPointEntities.DP_APILog
                                         where apiLog.RefrenceId == objRequestParam.RefrenceId
                                         select apiLog).FirstOrDefault();
                            if (check != null)
                            {
                                objAPIMasterResponseParam.ResultCode = (int)APIResponseStatusCode.ReferenceIdAlreadyExist;
                                objAPIMasterResponseParam.ResultId = string.Empty;
                            }
                            else
                            {
                                DP_APILog objLog = new DP_APILog()
                                {
                                    CompanyId = query,
                                    RefrenceId = objRequestParam.RefrenceId,
                                    Request = objRequestParam.RequestData,
                                    RequestTime = DateTime.Now.Date,
                                };
                                objDecisionPointEntities.DP_APILog.Add(objLog);
                                int result = objDecisionPointEntities.SaveChanges();
                                if (result > 0)
                                {
                                    objAPIMasterResponseParam.ResultCode = (int)APIResponseStatusCode.Success;
                                    objAPIMasterResponseParam.ResultId = string.Empty;
                                }
                            }
                        }
                        else
                        {
                            objAPIMasterResponseParam.ResultCode = (int)APIResponseStatusCode.RefrenceIdRequired;
                            objAPIMasterResponseParam.ResultId = string.Empty;
                        }
                    }
                    return objAPIMasterResponseParam;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// validate api user using user name and password
        /// </summary>
        /// <param name="userId">user id</param>
        /// <param name="password">password</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>12 march 2015</CreatedDate>
        /// <returns>bool</returns>
        public bool ValidateAPIUser(string userId, string password)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from apimaster in objDecisionPointEntities.DP_APIMaster
                                 where apimaster.UserName == userId && apimaster.Password == password
                                 select apimaster).FirstOrDefault();
                    if (query != null)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            catch
            {

                throw;
            }
        }

        public ServiceResponseParam GetIcDetails(string icId)
        {

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    // entity query for fetch user's records such as User Id, user Type, User Name from database through user's userid and password 
                    var query = from user in objDecisionPointEntities.DP_User
                                join profile in objDecisionPointEntities.DP_Profile
                                on user.Id equals profile.UserId
                                join state in objDecisionPointEntities.DP_State
                                on profile.StateId equals state.Id into ST
                                from FST in ST.DefaultIfEmpty()
                                join titlemap in objDecisionPointEntities.DP_TitleMapping
                                on profile.UserId equals titlemap.UserId into TM
                                from FTitleMap in TM.DefaultIfEmpty()
                                join titlemaster in objDecisionPointEntities.DP_TitleMaster
                                on FTitleMap.TitleId equals titlemaster.Id into Tmaster
                                from FTmaster in Tmaster.DefaultIfEmpty()
                                where user.UserId == icId
                                select new ServiceResponseParam
                                {
                                    fName = string.IsNullOrEmpty(profile.Firstname) ? Shared.SingleSpace : profile.Firstname,
                                    mName = string.IsNullOrEmpty(profile.MiddelName) ? Shared.SingleSpace : profile.MiddelName,
                                    lName = string.IsNullOrEmpty(profile.LastName) ? Shared.SingleSpace : profile.LastName,
                                    emailId = string.IsNullOrEmpty(user.EmailId) ? Shared.SingleSpace : user.EmailId,
                                    officePhone = string.IsNullOrEmpty(profile.OfficePhone) ? Shared.SingleSpace : profile.OfficePhone,
                                    directPhone = string.IsNullOrEmpty(profile.CellNumber) ? Shared.SingleSpace : profile.CellNumber,
                                    companyName = string.IsNullOrEmpty(profile.BusinessName) ? Shared.SingleSpace : profile.BusinessName,
                                    StreetNumber = string.IsNullOrEmpty(profile.StreetNumber) ? Shared.SingleSpace : profile.StreetNumber,
                                    StreetName = string.IsNullOrEmpty(profile.Street) ? Shared.SingleSpace : profile.Street,
                                    Direction = string.IsNullOrEmpty(profile.Direction) ? Shared.SingleSpace : profile.Direction,
                                    CityName = string.IsNullOrEmpty(profile.CityName) ? Shared.SingleSpace : profile.CityName,
                                    StateName = string.IsNullOrEmpty(FST.State) ? Shared.SingleSpace : FST.State,
                                    ZipCode = string.IsNullOrEmpty(profile.ZipCode) ? Shared.SingleSpace : profile.ZipCode,
                                    title = string.IsNullOrEmpty(FTmaster.Title) ? Shared.SingleSpace : FTmaster.Title
                                };
                    return query.FirstOrDefault();
                }
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// get verification details
        /// </summary>
        /// <param name="clientId">Client Company Id</param>
        /// <param name="vendorId">Client's Client Company Id</param>
        /// <param name="icId">IC Company Id</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>Feb 05 2015</CreatedDate>
        /// <returns>VerificationServiceResponseParam</returns>
        public IList<APIMasterResponseParam> GetCandidatesComplianceStatus(APIComplianceStatusRequestParam objAPIComplianceStatusRequestParam)
        {
            try
            {
                IList<APIMasterResponseParam> objComplianceResult = null;
                packageIdsWithStatus = new List<APIJCRInfo>();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (string.IsNullOrEmpty(objAPIComplianceStatusRequestParam.SubClientId))
                    {
                        objAPIComplianceStatusRequestParam.SubClientId = objAPIComplianceStatusRequestParam.ClientId;
                    }
                    objComplianceResult = new List<APIMasterResponseParam>();
                    foreach (var item in objAPIComplianceStatusRequestParam.CandidateIdsCol)
                    {
                        var userDetails = (from user in objDecisionPointEntities.DP_User
                                           where user.CompanyId == item
                                           select user.IsRegistered).FirstOrDefault();
                        if (userDetails)
                        {
                            var insuranceResp = (from insMaster in objDecisionPointEntities.DP_InsuranceMaster
                                                 join insMap in objDecisionPointEntities.DP_InsuranceMapping
                                                  on insMaster.Id equals insMap.InsId
                                                 where insMaster.CreatorCompanyId == objAPIComplianceStatusRequestParam.ClientId
                                                 && insMaster.CompanyId == objAPIComplianceStatusRequestParam.SubClientId
                                                 && insMap.CompanyId == item
                                                 select new
                                                 {
                                                     JCR = insMaster.InsuranceType + Shared.SingleSpace + Shared.Insurance,
                                                     Status = insMap.Status,
                                                     ClientId = objAPIComplianceStatusRequestParam.ClientId,
                                                     SubClientId = objAPIComplianceStatusRequestParam.SubClientId
                                                 }).ToList();
                            var profLicResp = (from profLicMaster in objDecisionPointEntities.DP_ProfessionalLicenseMaster
                                               join profLicMap in objDecisionPointEntities.DP_ProfessionalLicenseMapping
                                                on profLicMaster.Id equals profLicMap.ProfLiceId
                                               where profLicMaster.CreatorCompanyId == objAPIComplianceStatusRequestParam.ClientId
                                               && profLicMaster.CompanyId == objAPIComplianceStatusRequestParam.SubClientId
                                               && profLicMap.CompanyId == item
                                               select new
                                               {
                                                   JCR = profLicMaster.LicenseType + Shared.SingleSpace + Shared.License,
                                                   Status = profLicMap.Status,
                                                   ClientId = objAPIComplianceStatusRequestParam.ClientId,
                                                   SubClientId = objAPIComplianceStatusRequestParam.SubClientId
                                               }).ToList();
                            profLicResp = profLicResp.Union(insuranceResp).ToList();
                            objAPIMasterResponseParam = new APIMasterResponseParam();
                            var licenseRespone = (from bgCheckMaster in objDecisionPointEntities.DP_BGCheckMaster
                                                  join bgCheckMap in objDecisionPointEntities.DP_BGCheckMapping
                                                  on bgCheckMaster.Id equals bgCheckMap.BGCheckId
                                                  join bgCheckPckgMaster in objDecisionPointEntities.DP_BGCheckPackageMaster
                                              on bgCheckMaster.BGCheckPkgId equals bgCheckPckgMaster.Id
                                                  where bgCheckMaster.CreatorCompanyId == objAPIComplianceStatusRequestParam.ClientId
                                                  && bgCheckMaster.CompanyId == objAPIComplianceStatusRequestParam.SubClientId && bgCheckMap.CompanyId == item
                                                  //&& bgCheckMaster.BGCheckPkgId == objAPIComplianceStatusRequestParam.PackageId
                                                  select new
                                                  {
                                                      JCR = bgCheckPckgMaster.BGCheckPackage,
                                                      Status = bgCheckMap.Status,
                                                      ClientId = objAPIComplianceStatusRequestParam.ClientId,
                                                      SubClientId = objAPIComplianceStatusRequestParam.SubClientId
                                                  }).ToList();
                            licenseRespone = licenseRespone.Union(profLicResp).ToList();
                            objAPIMasterResponseParam.ResultId = item;

                            if (licenseRespone.Count > 0)
                            {
                                foreach (var pkgItem in licenseRespone)
                                {
                                    APIJCRInfo _ApiPackageInfo;

                                    if (pkgItem.Status.Equals(Shared.Pass))
                                    {
                                        _ApiPackageInfo = new APIJCRInfo() { JCR = pkgItem.JCR, JCRStatus = (int)APIResponseStatusCode.Approved };
                                        packageIdsWithStatus.Add(_ApiPackageInfo);
                                    }
                                    if (pkgItem.Status.Equals("InProgress"))
                                    {
                                        if (IsClientVisibleToIC(pkgItem.ClientId, objAPIComplianceStatusRequestParam.UserId))
                                        { _ApiPackageInfo = new APIJCRInfo() { JCR = pkgItem.JCR, JCRStatus = (int)APIResponseStatusCode.Unreviewed }; }
                                        else
                                        {
                                            _ApiPackageInfo = new APIJCRInfo() { JCR = pkgItem.JCR, JCRStatus = (int)APIResponseStatusCode.Unreleased };
                                        }

                                        packageIdsWithStatus.Add(_ApiPackageInfo);
                                    }
                                    if (pkgItem.Status.Equals(Shared.Consider))
                                    {
                                        _ApiPackageInfo = new APIJCRInfo() { JCR = pkgItem.JCR, JCRStatus = (int)APIResponseStatusCode.DoNotUse };
                                        packageIdsWithStatus.Add(_ApiPackageInfo);
                                    }
                                    if (pkgItem.Status.Equals(Shared.Pending))
                                    {
                                        _ApiPackageInfo = new APIJCRInfo() { JCR = pkgItem.JCR, JCRStatus = (int)APIResponseStatusCode.MissingRequirements };
                                        packageIdsWithStatus.Add(_ApiPackageInfo);
                                    }
                                    if (pkgItem.Status.Equals(Shared.Fail))
                                    {
                                        _ApiPackageInfo = new APIJCRInfo() { JCR = pkgItem.JCR, JCRStatus = (int)APIResponseStatusCode.DoNotUse };
                                        packageIdsWithStatus.Add(_ApiPackageInfo);
                                    }
                                }

                            }
                            else
                            {
                                objAPIMasterResponseParam.ResultCode = (int)APIResponseStatusCode.NOJCR;
                            }
                            objAPIMasterResponseParam.PackageInfoDetails = packageIdsWithStatus.ToList();
                        }
                        else
                        {
                            objAPIMasterResponseParam.ResultId = item;
                            objAPIMasterResponseParam.ResultCode = (int)APIResponseStatusCode.Unregistered;
                        }

                        objComplianceResult.Add(objAPIMasterResponseParam);
                    }
                }
                return objComplianceResult;
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// get verification details
        /// </summary>
        /// <param name="clientId">Client Company Id</param>
        /// <param name="vendorId">Client's Client Company Id</param>
        /// <param name="icId">IC Company Id</param>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>10 mar 2015</CreatedDate>
        /// <returns>VerificationServiceResponseParam</returns>
        public IList<APIMasterResponseParam> GetComplianceStatusChanges(DateTime StatusDate)
        {
            try
            {
                IList<APIMasterResponseParam> objComplianceResult = null;
                objAPIMasterResponseParam = new APIMasterResponseParam();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var pkgResponeDetails = (from bgCheckMaster in objDecisionPointEntities.DP_BGCheckMaster
                                             join bgCheckMap in objDecisionPointEntities.DP_BGCheckMapping
                                             on bgCheckMaster.Id equals bgCheckMap.BGCheckId
                                             where bgCheckMap.StatusChangeDate == StatusDate
                                             select new { bgCheckMap, bgCheckMaster }).GroupBy(x => x.bgCheckMap.CompanyId).ToList();



                    //foreach (var item in objAPIComplianceStatusRequestParam.CandidateIdsCol)
                    //{
                    //    objComplianceResult = new List<APIMasterResponseParam>();
                    //    var pkgResponeDetails = (from bgCheckMaster in objDecisionPointEntities.DP_BGCheckMaster
                    //                          join bgCheckMap in objDecisionPointEntities.DP_BGCheckMapping
                    //                          on bgCheckMaster.Id equals bgCheckMap.BGCheckId
                    //                          where bgCheckMaster.CreatorCompanyId == objAPIComplianceStatusRequestParam.ClientId
                    //                          && bgCheckMaster.CompanyId == objAPIComplianceStatusRequestParam.SubClientId && bgCheckMap.CompanyId == item
                    //                          && bgCheckMaster.BGCheckPkgId == objAPIComplianceStatusRequestParam.PackageId
                    //                          select bgCheckMap.Status).FirstOrDefault();

                    //    objAPIMasterResponseParam.ResultId = item;
                    //    if (!object.Equals(objComplianceResult, null))
                    //    {
                    //        if (pkgResponeDetails.Equals(Shared.Completed))
                    //            objAPIMasterResponseParam.ResultCode = (int)ResponseStatusCode.Approved;
                    //        if (pkgResponeDetails.Equals("InProgress"))
                    //            objAPIMasterResponseParam.ResultCode = (int)ResponseStatusCode.Unreviewed;
                    //        if (pkgResponeDetails.Equals("Fail"))
                    //            objAPIMasterResponseParam.ResultCode = (int)ResponseStatusCode.MissingRequirements;
                    //        if (pkgResponeDetails.Equals(Shared.Pending))
                    //            objAPIMasterResponseParam.ResultCode = (int)ResponseStatusCode.Unreleased;
                    //    }
                    //    else
                    //    {
                    //        objAPIMasterResponseParam.ResultCode = (int)ResponseStatusCode.DoNotUse;
                    //    }
                    //    objComplianceResult.Add(objAPIMasterResponseParam);
                    //}
                }
                return objComplianceResult;
            }
            catch
            {

                throw;
            }
        }


        public APIMasterResponseParam VerifyAssignment(APIComplianceStatusRequestParam objAPIComplianceStatusRequestParam)
        {
            try
            {
                objAPIMasterResponseParam = new APIMasterResponseParam();
                packageIdsWithStatus = new List<APIJCRInfo>();
                if (string.IsNullOrEmpty(objAPIComplianceStatusRequestParam.SubClientId))
                {
                    objAPIComplianceStatusRequestParam.SubClientId = objAPIComplianceStatusRequestParam.ClientId;
                }

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var userDetails = (from user in objDecisionPointEntities.DP_User
                                       where user.CompanyId == objAPIComplianceStatusRequestParam.UserId
                                       select user.IsRegistered).FirstOrDefault();
                    if (userDetails)
                    {
                        var insuranceResp = (from insMaster in objDecisionPointEntities.DP_InsuranceMaster
                                             join insMap in objDecisionPointEntities.DP_InsuranceMapping
                                              on insMaster.Id equals insMap.InsId
                                             where insMaster.CreatorCompanyId == objAPIComplianceStatusRequestParam.ClientId
                                             && insMaster.CompanyId == objAPIComplianceStatusRequestParam.SubClientId
                                             && insMap.CompanyId == objAPIComplianceStatusRequestParam.UserId
                                             select new
                                             {
                                                 JCRequirement = insMaster.InsuranceType + Shared.SingleSpace + Shared.Insurance,
                                                 Status = insMap.Status,
                                                 ClientId = objAPIComplianceStatusRequestParam.ClientId,
                                                 SubClientId = objAPIComplianceStatusRequestParam.SubClientId
                                             }).ToList();

                        var profLicResp = (from profLicMaster in objDecisionPointEntities.DP_ProfessionalLicenseMaster
                                           join profLicMap in objDecisionPointEntities.DP_ProfessionalLicenseMapping
                                            on profLicMaster.Id equals profLicMap.ProfLiceId
                                           where profLicMaster.CreatorCompanyId == objAPIComplianceStatusRequestParam.ClientId
                                           && profLicMaster.CompanyId == objAPIComplianceStatusRequestParam.SubClientId
                                           && profLicMap.CompanyId == objAPIComplianceStatusRequestParam.UserId
                                           select new
                                           {
                                               JCRequirement = profLicMaster.LicenseType + Shared.SingleSpace + Shared.License,
                                               Status = profLicMap.Status,
                                               ClientId = objAPIComplianceStatusRequestParam.ClientId,
                                               SubClientId = objAPIComplianceStatusRequestParam.SubClientId
                                           }).ToList();

                        profLicResp = profLicResp.Union(insuranceResp).ToList();
                        var licenseRespone = (from bgCheckMaster in objDecisionPointEntities.DP_BGCheckMaster
                                              join bgCheckMap in objDecisionPointEntities.DP_BGCheckMapping
                                              on bgCheckMaster.Id equals bgCheckMap.BGCheckId
                                              join bgCheckPckgMaster in objDecisionPointEntities.DP_BGCheckPackageMaster
                                              on bgCheckMaster.BGCheckPkgId equals bgCheckPckgMaster.Id
                                              where bgCheckMaster.CreatorCompanyId == objAPIComplianceStatusRequestParam.ClientId
                                              && bgCheckMaster.CompanyId == objAPIComplianceStatusRequestParam.SubClientId &&
                                              bgCheckMap.CompanyId == objAPIComplianceStatusRequestParam.UserId
                                              //&& bgCheckMaster.BGCheckPkgId == objAPIComplianceStatusRequestParam.PackageId
                                              select new
                                              {
                                                  JCRequirement = bgCheckPckgMaster.BGCheckPackage,
                                                  Status = bgCheckMap.Status,
                                                  ClientId = objAPIComplianceStatusRequestParam.ClientId,
                                                  SubClientId = objAPIComplianceStatusRequestParam.SubClientId
                                              }).ToList();
                        licenseRespone = licenseRespone.Union(profLicResp).ToList();

                        //set User Id
                        //objAPIMasterResponseParam = licenseRespone.Select(y => new APIPackageInfo { PackageId = y.Id, PackageStatus = Convert.ToInt32(y.Status) }).ToList<APIPackageInfo>();
                        objAPIMasterResponseParam.ResultId = objAPIComplianceStatusRequestParam.UserId;

                        if (licenseRespone.Count > 0)
                        {
                            foreach (var item in licenseRespone)
                            {
                                APIJCRInfo _ApiPackageInfo;

                                if (item.Status.Equals(Shared.Pass))
                                {
                                    _ApiPackageInfo = new APIJCRInfo() { JCR = item.JCRequirement, JCRStatus = (int)APIResponseStatusCode.Approved };
                                    packageIdsWithStatus.Add(_ApiPackageInfo);
                                }
                                if (item.Status.Equals("InProgress"))
                                {
                                    if (IsClientVisibleToIC(item.ClientId, objAPIComplianceStatusRequestParam.UserId))
                                    { _ApiPackageInfo = new APIJCRInfo() { JCR = item.JCRequirement, JCRStatus = (int)APIResponseStatusCode.Unreviewed }; }
                                    else
                                    {
                                        _ApiPackageInfo = new APIJCRInfo() { JCR = item.JCRequirement, JCRStatus = (int)APIResponseStatusCode.Unreleased };
                                    }
                                    //_ApiPackageInfo = new APIJCRInfo() { JCR = item.JCRequirement, JCRStatus = (int)APIResponseStatusCode.Unreviewed };
                                    packageIdsWithStatus.Add(_ApiPackageInfo);
                                }
                                if (item.Status.Equals(Shared.Consider))
                                {
                                    _ApiPackageInfo = new APIJCRInfo() { JCR = item.JCRequirement, JCRStatus = (int)APIResponseStatusCode.DoNotUse };
                                    packageIdsWithStatus.Add(_ApiPackageInfo);
                                }
                                if (item.Status.Equals(Shared.Pending))
                                {
                                    _ApiPackageInfo = new APIJCRInfo() { JCR = item.JCRequirement, JCRStatus = (int)APIResponseStatusCode.MissingRequirements };
                                    packageIdsWithStatus.Add(_ApiPackageInfo);
                                }
                                if (item.Status.Equals(Shared.Fail))
                                {
                                    _ApiPackageInfo = new APIJCRInfo() { JCR = item.JCRequirement, JCRStatus = (int)APIResponseStatusCode.DoNotUse };
                                    packageIdsWithStatus.Add(_ApiPackageInfo);
                                }
                            }

                        }
                        else
                        {
                            objAPIMasterResponseParam.ResultCode = (int)APIResponseStatusCode.NOJCR;
                        }
                        objAPIMasterResponseParam.PackageInfoDetails = packageIdsWithStatus.ToList();

                    }
                    else
                    {
                        objAPIMasterResponseParam.ResultId = objAPIComplianceStatusRequestParam.UserId;
                        objAPIMasterResponseParam.ResultCode = (int)APIResponseStatusCode.Unregistered;
                    }
                }
                return objAPIMasterResponseParam;
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Check visibility for client
        /// </summary>
        /// <param name="clientId"></param>
        /// <returns></returns>
        private bool IsClientVisibleToIC(string clientId, string icCompanyId)
        {
            bool res = false;
            List<string> clientIds = new List<string>();
            using (var enti = new DecisionPointEntities())
            {
                var t = (from clientpermissmst in enti.DP_ICClientsPermissionMaster
                         where clientpermissmst.CreatorCompanyId == icCompanyId
                         select new { clientpermissmst.VisibleTo }).FirstOrDefault();
                if (t != null)
                {
                    clientIds.AddRange(t.VisibleTo.ToString().Split(','));
                    if (clientIds.Contains(clientId)) res = true;
                }
            }

            return res;
        }

        public APIMasterResponseParam SendInvitationByDST(DSTInviteRequestParam objRequestParam)
        {
            DP_User user = null;
            DP_Profile profile = null;
            DP_FlowMapping flow = null;
            DP_DocFlowMapping docflow = null;
            DP_CompanyStaffMapping dP_CompanyStaffMapping = null;
            int UserId = 0;
            string ID = string.Empty;
            DP_ComapnyVendorMapping dP_ComapnyVendorMapping = null;
            DP_APIMapping dP_APIMapping = null;
            string genUserId = GenrateUserId();
            string genCompId = GenrateCompanyId();
            bool paymentStatus;
            int icUserId = 0;
            string icCompanyId = string.Empty;
            try
            {
                objAPIMasterResponseParam = new APIMasterResponseParam();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (objRequestParam.RoleType.ToLower().Equals(Shared.Staff.ToLower()))
                    {
                        #region Staff
                        bool staffexist = false;
                        var existingstaff = (from profiledata in objDecisionPointEntities.DP_Profile
                                             join cus in objDecisionPointEntities.DP_User
                                             on profiledata.UserId equals cus.Id
                                             join mapping in objDecisionPointEntities.DP_CompanyStaffMapping
                                             on cus.Id equals mapping.StaffId
                                             where (cus.EmailId == objRequestParam.EmailId && mapping.CompanyId == objRequestParam.ClientId) && cus.EmailId != string.Empty
                                             select new { profiledata, cus, mapping }
                              ).FirstOrDefault();
                        if (existingstaff != null)
                        {
                            if (!existingstaff.mapping.IsActive)
                            {
                                existingstaff.mapping.IsActive = true;
                                existingstaff.cus.IsActive = true;
                            }
                            staffexist = true;
                            ID = existingstaff.cus.UserId + Shared.Comma + existingstaff.cus.Id + Shared.Comma + existingstaff.cus.Password + Shared.Comma + (int)APIResponseStatusCode.Resent;
                        }
                        if (!staffexist) //if staff not exists then insert in table
                        {
                            // check existense of email id
                            var staffuser = (from profiledata in objDecisionPointEntities.DP_Profile
                                             join cus in objDecisionPointEntities.DP_User
                                             on profiledata.UserId equals cus.Id
                                             where cus.EmailId == objRequestParam.EmailId
                                             select new { profiledata, cus }
                                 ).FirstOrDefault();
                            if (staffuser == null)
                            {
                                #region Insert In table

                                user = new DP_User()
                                {
                                    // Add user profile
                                    EmailId = objRequestParam.EmailId,
                                    Password = objRequestParam.Password,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objRequestParam.UserId,
                                    ModifyBy = objRequestParam.UserId,
                                    IsTemp = true,
                                    UserId = genUserId,
                                    CompanyId = objRequestParam.ClientId,
                                    IsActive = true,
                                    IsDeleted = false,
                                    IsRegistered = false,

                                };
                                objDecisionPointEntities.DP_User.Add(user);
                                objDecisionPointEntities.SaveChanges();
                                UserId = user.Id;
                                //Add profile details
                                profile = new DP_Profile()
                                {
                                    UserId = Convert.ToInt32(UserId, CultureInfo.InvariantCulture),
                                    Firstname = objRequestParam.FirstName,
                                    LastName = objRequestParam.LastName,
                                    IsPayment = true,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objRequestParam.UserId,
                                    ModifyBy = objRequestParam.UserId,
                                    UserType = Shared.Individual,
                                    BusinessName = objRequestParam.BusinessName

                                };
                                objDecisionPointEntities.DP_Profile.Add(profile);
                                // add data in staff mapping
                                dP_CompanyStaffMapping = new DP_CompanyStaffMapping()
                                {
                                    CompanyId = objRequestParam.ClientId,
                                    StaffId = Convert.ToInt32(UserId, CultureInfo.InvariantCulture),
                                    CreatedBy = objRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date,
                                    Invitationstatus = false,
                                    Status = 0,
                                    IsActive = true,
                                    StatusChangedate = DateTime.Now.Date,
                                    IsMailSent = objRequestParam.IsMailSent,
                                    LastInvitationDate = currentdate
                                };
                                objDecisionPointEntities.DP_CompanyStaffMapping.Add(dP_CompanyStaffMapping);

                                ////Add Data in Title Mapping
                                //if (objRequestParam.TitleId > 0)
                                //{
                                //    title = new DP_TitleMapping()
                                //    {
                                //        TitleId = objRequestParam.TitleId,
                                //        UserId = UserId,
                                //        CreatedCompanyId = objRequestParam.ClientId,
                                //        CreatedBy = objRequestParam.UserId,
                                //        CreatedDate = DateTime.Now.Date,
                                //    };
                                //    objDecisionPointEntities.DP_TitleMapping.Add(title);
                                //}
                                // insert in api mapping table

                                dP_APIMapping = new DP_APIMapping()
                                {
                                    ApiId = 1,// for testing purpose of DST it's static later change it
                                    InvitedUserId = UserId,
                                    InvitedCompanyId = objRequestParam.ClientId,
                                    InviteeCompanyId = objRequestParam.ClientId,
                                    Status = true,
                                };
                                objDecisionPointEntities.DP_APIMapping.Add(dP_APIMapping);
                                //append company id with user id for set the last invitation date if user not exist
                                ID = user.UserId + Shared.Comma + UserId + Shared.Comma + user.Password + Shared.Comma + (int)APIResponseStatusCode.Sent;
                                #endregion
                            }
                            else
                            {
                                ID = staffuser.cus.UserId + Shared.Comma + staffuser.cus.Id + Shared.Comma + staffuser.cus.Password + Shared.Comma + (int)APIResponseStatusCode.EmailIdExist;
                            }

                        }
                        #endregion
                    }
                    else if (objRequestParam.RoleType.ToLower().Equals(Shared.Vendor.ToLower()) || objRequestParam.RoleType.ToLower().Equals(Shared.Client.ToLower()))
                    {
                        #region Vendor & Client
                        if (objRequestParam.RoleType.Equals(Shared.Client))
                        {
                            objRequestParam.RoleTypeId = 1;
                            objRequestParam.DocFlowId = 2;
                        }
                        else if (objRequestParam.RoleType.Equals(Shared.Vendor))
                        {
                            objRequestParam.RoleTypeId = 2;
                            objRequestParam.DocFlowId = 1;
                        }

                        bool vendorexist = false;
                        var existingvendor = (from profiledata in objDecisionPointEntities.DP_Profile
                                              join cus in objDecisionPointEntities.DP_User
                                              on profiledata.UserId equals cus.Id
                                              join mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                              on cus.Id equals mapping.VendorId
                                              where (cus.EmailId == objRequestParam.EmailId) && mapping.CompanyId == objRequestParam.ClientId && cus.EmailId != string.Empty
                                              select new { profiledata.UserType, cus.UserId, cus.CompanyId, cus.Password, cus.Id }
                                ).FirstOrDefault();
                        if (existingvendor != null)
                        {
                            ID = existingvendor.CompanyId + Shared.Comma + existingvendor.Id + Shared.Comma + existingvendor.Password + Shared.Comma + (int)APIResponseStatusCode.Resent;
                            vendorexist = true;
                        }
                        if (!vendorexist)
                        {
                            var vendoruser = (from profiledata in objDecisionPointEntities.DP_Profile
                                              join cus in objDecisionPointEntities.DP_User
                                              on profiledata.UserId equals cus.Id
                                              where (cus.EmailId == objRequestParam.EmailId) && cus.EmailId != string.Empty
                                              select new { cus.Id, cus.UserId, cus.EmailId, cus.Password, cus.CompanyId }
                                ).FirstOrDefault();

                            if (vendoruser == null)
                            {
                                #region Insert new record
                                user = new DP_User()
                                {
                                    // Add user profile
                                    EmailId = objRequestParam.EmailId,
                                    Password = objRequestParam.Password,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objRequestParam.UserId,
                                    ModifyBy = objRequestParam.UserId,
                                    IsTemp = true,
                                    UserId = genUserId,
                                    CompanyId = genCompId,
                                    IsActive = true,
                                    IsDeleted = false,
                                    IsRegistered = false,
                                };
                                objDecisionPointEntities.DP_User.Add(user);
                                objDecisionPointEntities.SaveChanges();
                                UserId = user.Id;
                                //Add profile details
                                profile = new DP_Profile()
                                {
                                    UserId = Convert.ToInt32(UserId, CultureInfo.InvariantCulture),
                                    Firstname = objRequestParam.FirstName,
                                    LastName = objRequestParam.LastName,
                                    IsPayment = false,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objRequestParam.UserId,
                                    ModifyBy = objRequestParam.UserId,
                                    UserType = Shared.Company,
                                    BusinessName = objRequestParam.BusinessName
                                };
                                objDecisionPointEntities.DP_Profile.Add(profile);
                                if (objRequestParam.RoleTypeId > 0)
                                {
                                    //Added Flow
                                    flow = new DP_FlowMapping()
                                    {
                                        FlowId = objRequestParam.RoleTypeId,
                                        UserId = UserId,
                                        CreatedBy = objRequestParam.UserId,
                                        UserCompanyId = genCompId,
                                        CreatedCompanyId = objRequestParam.ClientId

                                    };
                                    objDecisionPointEntities.DP_FlowMapping.Add(flow);
                                }

                                if (objRequestParam.DocFlowId > 0)
                                {
                                    docflow = new DP_DocFlowMapping()
                                    {
                                        DocFlowId = objRequestParam.DocFlowId,
                                        UserId = Convert.ToInt32(user.Id, CultureInfo.InvariantCulture),
                                        CreatedBy = objRequestParam.UserId,
                                        UserCompanyId = genCompId,
                                        CreatedCompanyId = objRequestParam.ClientId
                                    };
                                    objDecisionPointEntities.DP_DocFlowMapping.Add(docflow);
                                }

                                dP_ComapnyVendorMapping = new DP_ComapnyVendorMapping()
                                {
                                    VendorId = Convert.ToInt32(UserId, CultureInfo.InvariantCulture),
                                    CompanyId = objRequestParam.ClientId,
                                    CreatedBy = objRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date,
                                    Invitationstatus = false,
                                    PaymentType = 2,
                                    Status = 0,
                                    IsDeleted = 0,
                                    IsActive = true,
                                    StatusChangedate = DateTime.Now.Date,
                                    ReceiverCompanyId = genCompId,
                                    IsMailSent = objRequestParam.IsMailSent,
                                    LastInvitationDate = currentdate
                                };
                                objDecisionPointEntities.DP_ComapnyVendorMapping.Add(dP_ComapnyVendorMapping);

                                // insert in api mapping
                                dP_APIMapping = new DP_APIMapping()
                                {
                                    ApiId = 1,// for testing purpose of DST it's static later change it
                                    InvitedUserId = UserId,
                                    InvitedCompanyId = genCompId,
                                    InviteeCompanyId = objRequestParam.ClientId,
                                    Status = true,
                                };
                                objDecisionPointEntities.DP_APIMapping.Add(dP_APIMapping);

                                ID = user.CompanyId + Shared.Comma + UserId + Shared.Comma + user.Password + Shared.Comma + (int)APIResponseStatusCode.Sent;
                                #endregion
                            }
                            else
                            {
                                #region update and insret record in mapping
                                //check flow existence
                                var existvendorflow = (from flowmap in objDecisionPointEntities.DP_FlowMapping
                                                       where flowmap.UserId == vendoruser.Id && flowmap.FlowId == objRequestParam.RoleTypeId
                                                       && flowmap.CreatedCompanyId == objRequestParam.ClientId &&
                                                        flowmap.CreatedBy == objRequestParam.UserId &&
                                                        flowmap.UserCompanyId == vendoruser.CompanyId
                                                       select new { flowmap.FlowId }).FirstOrDefault();
                                if (existvendorflow == null)
                                {
                                    flow = new DP_FlowMapping()
                                    {
                                        FlowId = objRequestParam.RoleTypeId,
                                        UserId = vendoruser.Id,
                                        CreatedBy = objRequestParam.UserId,
                                        UserCompanyId = vendoruser.CompanyId,
                                        CreatedCompanyId = objRequestParam.ClientId
                                    };

                                    objDecisionPointEntities.DP_FlowMapping.Add(flow);
                                }
                                else { objRequestParam.RoleTypeId = Convert.ToInt32(existvendorflow.FlowId); }

                                //check doc flow
                                var existdocflow = (from flowmap in objDecisionPointEntities.DP_DocFlowMapping
                                                    where flowmap.UserId == vendoruser.Id && flowmap.DocFlowId == objRequestParam.DocFlowId &&
                                                    flowmap.CreatedCompanyId == objRequestParam.ClientId &&
                                                    flowmap.CreatedBy == objRequestParam.UserId &&
                                                    flowmap.UserCompanyId == vendoruser.CompanyId
                                                    select new { flowmap.Id }).FirstOrDefault();
                                if (existdocflow == null)
                                {
                                    if (objRequestParam.DocFlowId > 0)
                                    {
                                        docflow = new DP_DocFlowMapping()
                                        {
                                            DocFlowId = objRequestParam.DocFlowId,
                                            UserId = vendoruser.Id,
                                            CreatedBy = objRequestParam.UserId,
                                            UserCompanyId = vendoruser.CompanyId,
                                            CreatedCompanyId = objRequestParam.ClientId
                                        };
                                        objDecisionPointEntities.DP_DocFlowMapping.Add(docflow);
                                    }
                                }

                                UserId = vendoruser.Id;
                                dP_ComapnyVendorMapping = new DP_ComapnyVendorMapping()
                                {
                                    VendorId = Convert.ToInt32(vendoruser.Id, CultureInfo.InvariantCulture),
                                    CompanyId = objRequestParam.ClientId,
                                    CreatedBy = objRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date,
                                    Invitationstatus = false,
                                    PaymentType = 2,
                                    Status = 0,
                                    IsDeleted = 0,
                                    IsActive = true,
                                    StatusChangedate = DateTime.Now.Date,
                                    ReceiverCompanyId = vendoruser.CompanyId,
                                    IsMailSent = objRequestParam.IsMailSent,
                                    LastInvitationDate = currentdate
                                };
                                objDecisionPointEntities.DP_ComapnyVendorMapping.Add(dP_ComapnyVendorMapping);
                                ID = vendoruser.CompanyId + Shared.Comma + vendoruser.Id + Shared.Comma + vendoruser.Password + Shared.Comma + (int)APIResponseStatusCode.Sent;
                                #endregion
                            }



                        }
                        #endregion
                    }
                    else if (objRequestParam.RoleType.ToLower().Equals(Shared.IC.ToLower()))
                    {
                        #region IC With Id & without ID
                        objRequestParam.DocFlowId = 2;
                        objRequestParam.RoleTypeId = 2;
                        bool checkexist = false;
                        if (objRequestParam.PaymentTypeId == 1)
                        {
                            paymentStatus = true;
                        }
                        else
                        {
                            paymentStatus = false;
                        }

                        var existinguser = (from profiledata in objDecisionPointEntities.DP_Profile
                                            join cus in objDecisionPointEntities.DP_User
                                            on profiledata.UserId equals cus.Id
                                            join mapping in objDecisionPointEntities.DP_ComapnyVendorMapping
                                            on cus.Id equals mapping.VendorId
                                            where (cus.EmailId == objRequestParam.EmailId) && mapping.CompanyId == objRequestParam.ClientId && cus.EmailId != string.Empty
                                            select new { profiledata.UserType, cus.UserId, cus.CompanyId, cus.Password, cus.Id }
                                 ).FirstOrDefault();
                        if (existinguser != null)
                        {
                            ID = existinguser.CompanyId + Shared.Comma + existinguser.Id + Shared.Comma + existinguser.Password + Shared.Comma + (int)APIResponseStatusCode.Resent;
                            icUserId = existinguser.Id;
                            icCompanyId = existinguser.CompanyId;
                            checkexist = true;
                        }
                        if (!checkexist)
                        {

                            var icuser = (from cus in objDecisionPointEntities.DP_User
                                          where (cus.EmailId == objRequestParam.EmailId && cus.EmailId != string.Empty)
                                          select cus).FirstOrDefault();
                            if (icuser == null)
                            {
                                user = new DP_User()
                                {
                                    // Add user profile
                                    EmailId = objRequestParam.EmailId,
                                    Password = objRequestParam.Password,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objRequestParam.UserId,
                                    ModifyBy = objRequestParam.UserId,
                                    IsTemp = true,
                                    UserId = genUserId,
                                    CompanyId = genCompId,
                                    IsActive = true,
                                    IsDeleted = false,
                                    IsRegistered = false,

                                };
                                objDecisionPointEntities.DP_User.Add(user);
                                objDecisionPointEntities.SaveChanges();
                                UserId = user.Id;
                                //Add profile details
                                profile = new DP_Profile()
                                {
                                    UserId = Convert.ToInt32(UserId, CultureInfo.InvariantCulture),
                                    Firstname = objRequestParam.FirstName,
                                    LastName = objRequestParam.LastName,
                                    IsPayment = paymentStatus,
                                    CreatedDate = DateTime.Now,
                                    ModifyDate = DateTime.Now,
                                    CreatedBy = objRequestParam.UserId,
                                    ModifyBy = objRequestParam.UserId,
                                    UserType = Shared.IC,
                                    BusinessName = objRequestParam.BusinessName
                                };
                                objDecisionPointEntities.DP_Profile.Add(profile);

                                //Add Data in Flow Mapping
                                flow = new DP_FlowMapping()
                                {
                                    FlowId = objRequestParam.RoleTypeId,
                                    UserId = UserId,
                                    CreatedBy = objRequestParam.UserId,
                                    UserCompanyId = genCompId,
                                    CreatedCompanyId = objRequestParam.ClientId
                                };
                                objDecisionPointEntities.DP_FlowMapping.Add(flow);

                                if (objRequestParam.RoleTypeId > 0)
                                {
                                    //Added Doc Flow
                                    docflow = new DP_DocFlowMapping()
                                    {
                                        DocFlowId = objRequestParam.DocFlowId,
                                        UserId = Convert.ToInt32(UserId, CultureInfo.InvariantCulture),
                                        CreatedBy = objRequestParam.UserId,
                                        UserCompanyId = genCompId,
                                        CreatedCompanyId = objRequestParam.ClientId
                                    };
                                    objDecisionPointEntities.DP_DocFlowMapping.Add(docflow);
                                }


                                //vendor type
                                if (objRequestParam.ICTypeId > 0)
                                {
                                    //Add Data in Permission Mapping
                                    DP_VendorTypeMapping objDP_VendorTypeMapping = new DP_VendorTypeMapping()
                                    {
                                        VendorTypeId = objRequestParam.ICTypeId,
                                        UserId = UserId,
                                        UserCompanyId = genCompId,
                                        CreatedBy = objRequestParam.UserId,
                                        CreatedDate = DateTime.Now.Date,
                                        IsActive = true,
                                        CreaterCompanyId = objRequestParam.ClientId,
                                        Type = Shared.IC,
                                        IsDefault = true,

                                    };
                                    objDecisionPointEntities.DP_VendorTypeMapping.Add(objDP_VendorTypeMapping);
                                }


                                dP_ComapnyVendorMapping = new DP_ComapnyVendorMapping()
                                {
                                    VendorId = Convert.ToInt32(UserId, CultureInfo.InvariantCulture),
                                    CompanyId = objRequestParam.ClientId,
                                    CreatedBy = objRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date,
                                    Invitationstatus = false,
                                    PaymentType = Convert.ToInt32(objRequestParam.PaymentTypeId),
                                    Status = 0,
                                    IsDeleted = 0,
                                    IsActive = true,
                                    StatusChangedate = DateTime.Now.Date,
                                    ReceiverCompanyId = genCompId,
                                    IsMailSent = objRequestParam.IsMailSent,
                                    LastInvitationDate = currentdate,
                                    IsBgCheckReqiured = true,//objRequestParam.IsBackgroundCheck
                                };
                                objDecisionPointEntities.DP_ComapnyVendorMapping.Add(dP_ComapnyVendorMapping);

                                //insert in API mapping.
                                dP_APIMapping = new DP_APIMapping()
                                {
                                    ApiId = 1,// for testing purpose of DST it's static later change it
                                    InvitedUserId = UserId,
                                    InvitedCompanyId = genCompId,
                                    InviteeCompanyId = objRequestParam.ClientId,
                                    Status = true,
                                };
                                objDecisionPointEntities.DP_APIMapping.Add(dP_APIMapping);
                                ID = user.CompanyId + Shared.Comma + UserId + Shared.Comma + user.Password + Shared.Comma + (int)APIResponseStatusCode.Sent;
                                icUserId = user.Id;
                                icCompanyId = user.CompanyId;

                            }
                            else
                            {
                                //if (type.Equals("icwithoutid"))
                                //{
                                //check doc flow
                                var existdocflow = (from flowmap in objDecisionPointEntities.DP_DocFlowMapping
                                                    where flowmap.UserId == icuser.Id && flowmap.DocFlowId == objRequestParam.DocFlowId
                                                    && flowmap.CreatedCompanyId == objRequestParam.ClientId
                                                    && flowmap.UserCompanyId == icuser.CompanyId &&
                                                    flowmap.CreatedBy == objRequestParam.UserId
                                                    select new { flowmap.Id }).FirstOrDefault();
                                if (existdocflow == null)
                                {
                                    docflow = new DP_DocFlowMapping()
                                    {
                                        DocFlowId = objRequestParam.DocFlowId,
                                        UserId = icuser.Id,
                                        CreatedBy = objRequestParam.UserId,
                                        UserCompanyId = icuser.CompanyId,
                                        CreatedCompanyId = objRequestParam.ClientId
                                    };
                                    objDecisionPointEntities.DP_DocFlowMapping.Add(docflow);
                                }
                                //check flow existence
                                var existvendorflow = (from flowmap in objDecisionPointEntities.DP_FlowMapping
                                                       where flowmap.UserId == icuser.Id && flowmap.FlowId == objRequestParam.RoleTypeId
                                                       && flowmap.CreatedCompanyId == objRequestParam.ClientId &&
                                                        flowmap.CreatedBy == objRequestParam.UserId &&
                                                        flowmap.UserCompanyId == icuser.CompanyId
                                                       select new { flowmap.FlowId }).FirstOrDefault();
                                if (existvendorflow == null)
                                {
                                    flow = new DP_FlowMapping()
                                    {
                                        FlowId = objRequestParam.RoleTypeId,
                                        UserId = icuser.Id,
                                        CreatedBy = objRequestParam.UserId,
                                        UserCompanyId = icuser.CompanyId,
                                        CreatedCompanyId = objRequestParam.ClientId
                                    };

                                    objDecisionPointEntities.DP_FlowMapping.Add(flow);
                                }


                                //check vendor type
                                var existVT = (from flowmap in objDecisionPointEntities.DP_VendorTypeMapping
                                               where flowmap.UserId == icuser.Id && flowmap.VendorTypeId == objRequestParam.ICTypeId
                                               && flowmap.CreaterCompanyId == objRequestParam.ClientId && flowmap.UserCompanyId == icuser.CompanyId
                                               select new { flowmap.Id }).FirstOrDefault();
                                if (existVT == null)
                                {
                                    DP_VendorTypeMapping objDP_VendorTypeMapping = new DP_VendorTypeMapping()
                                    {
                                        VendorTypeId = objRequestParam.ICTypeId,
                                        UserId = icuser.Id,
                                        UserCompanyId = icuser.CompanyId,
                                        CreatedBy = objRequestParam.UserId,
                                        CreatedDate = DateTime.Now.Date,
                                        IsActive = true,
                                        CreaterCompanyId = objRequestParam.ClientId,
                                        IsDefault = true,
                                        Type = Shared.IC
                                    };
                                    objDecisionPointEntities.DP_VendorTypeMapping.Add(objDP_VendorTypeMapping);
                                }

                                UserId = icuser.Id;


                                dP_ComapnyVendorMapping = new DP_ComapnyVendorMapping()
                                {
                                    VendorId = Convert.ToInt32(icuser.Id, CultureInfo.InvariantCulture),
                                    CompanyId = objRequestParam.ClientId,
                                    CreatedBy = objRequestParam.UserId,
                                    CreatedDate = DateTime.Now.Date,
                                    Invitationstatus = false,
                                    PaymentType = Convert.ToInt32(objRequestParam.PaymentTypeId),
                                    Status = 0,
                                    IsDeleted = 0,
                                    IsActive = true,
                                    StatusChangedate = DateTime.Now.Date,
                                    ReceiverCompanyId = icuser.CompanyId,
                                    IsMailSent = objRequestParam.IsMailSent,
                                    LastInvitationDate = currentdate,
                                    IsBgCheckReqiured = true,
                                };
                                objDecisionPointEntities.DP_ComapnyVendorMapping.Add(dP_ComapnyVendorMapping);

                                ID = icuser.CompanyId + Shared.Comma + icuser.Id + Shared.Comma + icuser.Password + Shared.Comma + (int)APIResponseStatusCode.Sent;
                                icUserId = icuser.Id;
                                icCompanyId = icuser.CompanyId;
                            }

                        }
                        #endregion

                    }

                    objDecisionPointEntities.SaveChanges();
                    objAPIMasterResponseParam.ResultId = ID;
                }
                if (objRequestParam.RoleType.Equals(Shared.IC))
                {
                    if (!objRequestParam.PackageId.Equals(0))
                    {
                        InsertCompliancesInDP(objRequestParam, icUserId, icCompanyId);
                    }
                }
                return objAPIMasterResponseParam;
            }
            catch
            {
                throw;
            }

        }

        /// <summary>
        /// get user id from company Id
        /// </summary>
        /// <param name="companyId">companyId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>24 feb 2015</CreatedDate>
        /// <returns>int (user Id)</returns>
        public int GetUserIdFromCompanyId(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId
                                 where user.CompanyId == companyId && (profile.UserType == Shared.Company || profile.UserType == Shared.SuperAdmin)
                                 select user.Id).FirstOrDefault();
                    return query;
                }
            }
            catch
            {

                throw;
            }
        }


        /// <summary>
        /// get list of roles
        /// </summary>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>25 feb 2015</CreatedDate>
        /// <returns>APIMasterResponseParam</returns>
        public IList<APIMasterResponseParam> GetRoleType()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from roleTypeMaster in objDecisionPointEntities.DP_APIRoleTypeMaster
                                 where roleTypeMaster.IsDeleted == false
                                 select new APIMasterResponseParam
                                 {
                                     Name = roleTypeMaster.RoleTypeName,
                                     Id = roleTypeMaster.Id
                                 }).ToList();
                    return query;

                }
            }
            catch
            {

                throw;
            }
        }

        private int InsertCompliancesInDP(DSTInviteRequestParam objRequestParam, int receiverUserId, string receiverCompanyId)
        {
            try
            {
                int bgCheckMasterId = 0;
                int bgCheckMappingId = 0;
                string pkgSourceName = string.Empty;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var getPackageSource = (from pkgSource in objDecisionPointEntities.DP_BGCheckPackageMaster
                                            where pkgSource.Id == objRequestParam.PackageId
                                            select pkgSource.Source).FirstOrDefault();
                    if (!string.IsNullOrEmpty(getPackageSource))
                    {
                        pkgSourceName = getPackageSource;
                    }
                    else { pkgSourceName = Shared.Sterling; }
                    var checkBGCheckDetails = (from bGCheckDetails in objDecisionPointEntities.DP_BGCheckMaster
                                               where bGCheckDetails.ICTypeId == objRequestParam.ICTypeId && bGCheckDetails.CompanyId == objRequestParam.ClientId
                                               && bGCheckDetails.BGCheckPkgId == objRequestParam.PackageId
                                               select bGCheckDetails).FirstOrDefault();
                    if (object.Equals(checkBGCheckDetails, null))
                    {
                        DP_BGCheckMaster objDPBGCheckMaster = new DP_BGCheckMaster()
                        {
                            ICTypeId = Convert.ToInt32(objRequestParam.ICTypeId, CultureInfo.InvariantCulture),
                            UserId = Convert.ToInt32(objRequestParam.UserId, CultureInfo.InvariantCulture),
                            CompanyId = objRequestParam.ClientId,
                            BGCheckPkgId = objRequestParam.PackageId,
                            IsActive = true,
                            CreatedBy = Convert.ToInt32(objRequestParam.UserId, CultureInfo.InvariantCulture),
                            CreatedDate = currentdate,
                            IsDeleted = false,
                            CreatorCompanyId = objRequestParam.ClientId,
                            Source = pkgSourceName,
                        };
                        objDecisionPointEntities.DP_BGCheckMaster.Add(objDPBGCheckMaster);
                        objDecisionPointEntities.SaveChanges();
                        bgCheckMasterId = objDPBGCheckMaster.Id;
                    }
                    else
                    {
                        bgCheckMasterId = checkBGCheckDetails.Id;
                    }
                    var checkBGCheckMapDetails = (from bGCheckMapDetails in objDecisionPointEntities.DP_BGCheckMapping
                                                  where bGCheckMapDetails.BGCheckId == bgCheckMasterId && bGCheckMapDetails.CompanyId == receiverCompanyId
                                                  && bGCheckMapDetails.UserId == receiverUserId
                                                  select bGCheckMapDetails).FirstOrDefault();
                    if (object.Equals(checkBGCheckMapDetails, null))
                    {
                        //save background check mapping details
                        DP_BGCheckMapping objDPBGCheckMapping = new DP_BGCheckMapping()
                        {
                            BGCheckId = bgCheckMasterId,
                            CompanyId = receiverCompanyId,
                            UserId = receiverUserId,
                            ReceivedDate = currentdate,
                            Source = pkgSourceName,
                            Status = Shared.Pending,
                            StatusChangeDate = currentdate,
                            RequirmentType = 0
                        };
                        objDecisionPointEntities.DP_BGCheckMapping.Add(objDPBGCheckMapping);
                        objDecisionPointEntities.SaveChanges();
                        bgCheckMappingId = objDPBGCheckMapping.Id;
                    }
                    else
                    {
                        bgCheckMappingId = checkBGCheckMapDetails.Id;
                    }
                    //save background check details mapping
                    var packageDetail = (from pkgmaster in objDecisionPointEntities.DP_BGCheckPackageMaster
                                         join pkgDetail in objDecisionPointEntities.DP_BGCheckPackageDetailMaster
                                         on pkgmaster.Id equals pkgDetail.PackageId
                                         where pkgmaster.Id == objRequestParam.PackageId && pkgmaster.IsDeleted == false
                                         select pkgDetail).ToList();
                    foreach (var item in packageDetail)
                    {
                        var pkgMappingDetail = (from pkgDetailMapping in objDecisionPointEntities.DP_BGCheckDetailMapping
                                                where pkgDetailMapping.BGCheckMappingId == bgCheckMappingId && pkgDetailMapping.BGCheckPkgDetailId == item.Id
                                                select pkgDetailMapping).ToList();
                        if (pkgMappingDetail.Count <= 0)
                        {
                            DP_BGCheckDetailMapping objDPBGCheckDetailMapping = new DP_BGCheckDetailMapping()
                            {
                                BGCheckMappingId = bgCheckMappingId,
                                Status = Shared.Pending,
                                BGCheckPkgDetailId = item.Id,
                                StatusChangeDate = currentdate
                            };
                            objDecisionPointEntities.DP_BGCheckDetailMapping.Add(objDPBGCheckDetailMapping);
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch (Exception)
            {

                throw;
            }
        }

        /// <summary>
        /// get list of PaymentType
        /// </summary>       
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>25 feb 2015</CreatedDate>
        /// <returns>APIMasterResponseParam</returns>
        public IList<APIMasterResponseParam> GetPaymentType()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from flowMaster in objDecisionPointEntities.DP_PaymentFlowMaster
                                 where flowMaster.Isdeleted == false
                                 select new APIMasterResponseParam
                                 {
                                     Name = flowMaster.PaymentType,
                                     Id = flowMaster.Id
                                 }).ToList();
                    return query;

                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// get list of VendorType
        /// </summary>
        /// <param name="companyId">company id</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>25 feb 2015</CreatedDate>
        /// <returns>APIMasterResponseParam</returns>
        public IList<APIMasterResponseParam> GetVendorTypeList(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from VTM in objDecisionPointEntities.DP_VendorTypeMapping
                                 join VT in objDecisionPointEntities.DP_VendorType
                                 on VTM.VendorTypeId equals VT.Id
                                 where VTM.IsActive == true && VTM.UserCompanyId == companyId && VT.IsDeleted == false && VTM.Type == Shared.IC && VTM.IsDefault == false
                                 && VT.IsActive == true
                                 select new APIMasterResponseParam
                                 {
                                     Name = VT.VendorType == null ? string.Empty : VT.VendorType,
                                     Id = VT.Id == null ? 0 : VT.Id,
                                 }).ToList();
                    return query;

                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// Add Update User
        /// </summary>
        /// <param name="objDSTInviteRequestParam"></param>
        /// <returns></returns>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>25 feb 2015</CreatedDate>
        public APIMasterResponseParam AddUpdateUser(DSTInviteRequestParam objDSTInviteRequestParam)
        {
            try
            {
                objAPIMasterResponseParam = new APIMasterResponseParam();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (string.IsNullOrEmpty(objDSTInviteRequestParam.StaffId))
                    {
                        objDSTInviteRequestParam.ClientId = objDSTInviteRequestParam.EntityId;
                        objAPIMasterResponseParam = SendInvitationByDST(objDSTInviteRequestParam);
                    }
                    else
                    {
                        var checkEmailExist = (from user in objDecisionPointEntities.DP_User
                                               where user.EmailId == objDSTInviteRequestParam.EmailId && user.UserId != objDSTInviteRequestParam.StaffId
                                               select user).FirstOrDefault();
                        if (object.Equals(checkEmailExist, null))
                        {
                            var staffDetail = (from user in objDecisionPointEntities.DP_User
                                               join profile in objDecisionPointEntities.DP_Profile
                                                   on user.Id equals profile.UserId
                                               where user.UserId == objDSTInviteRequestParam.StaffId
                                               select new { user, profile }).FirstOrDefault();
                            if (!object.Equals(staffDetail, null))
                            {
                                staffDetail.profile.Firstname = objDSTInviteRequestParam.FirstName;
                                staffDetail.profile.LastName = objDSTInviteRequestParam.LastName;
                                staffDetail.user.EmailId = objDSTInviteRequestParam.EmailId;
                            }
                            objAPIMasterResponseParam.ResultId = objDSTInviteRequestParam.StaffId;
                            objAPIMasterResponseParam.ResultCode = (int)APIResponseStatusCode.Success;
                        }
                        else
                        {
                            objAPIMasterResponseParam.ResultId = Shared.Zero;
                            objAPIMasterResponseParam.ResultCode = (int)APIResponseStatusCode.EmailIdExist;
                        }
                    }
                }
                return objAPIMasterResponseParam;

            }
            catch (Exception)
            {

                throw;
            }
        }

        //#region Commented Future Used
        ///// <summary>
        ///// used for add and update product using API
        ///// </summary>
        ///// <param name="objAPIProductRequestParam"></param>
        ///// <returns></returns>
        //public APIMasterResponseParam AddUpdateProducts(APIProductRequestParam objAPIProductRequestParam)
        //{
        //    try
        //    {
        //        objAPIMasterResponseParam = new APIMasterResponseParam();
        //        //get user id for client
        //        userId = GetUserIdFromCompanyId(objAPIProductRequestParam.ClientId);
        //        //check subclient passed or not if passed than get subclient user type and user id
        //        if (!string.IsNullOrEmpty(objAPIProductRequestParam.SubClientId))
        //        {
        //            subClientUserId = GetUserIdFromCompanyId(objAPIProductRequestParam.SubClientId);
        //            subClientUserType = GetParentUserType(subClientUserId);
        //        }
        //        //check subclient exist or not
        //        if (!string.Equals(userId, 0))
        //        {
        //            using (objDecisionPointEntities = new DecisionPointEntities())
        //            {
        //                //check if product id is passed than check product exist in client or not 
        //                var checkProduct = (from serviceMaster in objDecisionPointEntities.DP_ServicesMaster
        //                                    where serviceMaster.Id == objAPIProductRequestParam.ProductId && serviceMaster.IsDeleted == true
        //                                    && serviceMaster.CompanyId == objAPIProductRequestParam.ClientId
        //                                    && serviceMaster.IsActive == true
        //                                    select serviceMaster).FirstOrDefault();
        //                //if product exist than update the product name 
        //                if (!object.Equals(checkProduct, null))
        //                {
        //                    checkProduct.Service = objAPIProductRequestParam.ProductName;
        //                    objAPIMasterResponseParam.ResultId = Convert.ToString(checkProduct.Id, CultureInfo.InvariantCulture);
        //                    objAPIMasterResponseParam.ResultCode = (int)(ResponseStatusCode.Success);
        //                    objDecisionPointEntities.SaveChanges();
        //                }
        //                //if product id not passed
        //                else
        //                {
        //                    //if subclient not passed and product id not passed than save product with new client id
        //                    if (string.IsNullOrEmpty(objAPIProductRequestParam.SubClientId) && string.Equals(objAPIProductRequestParam.ProductId, 0))
        //                    {
        //                        DP_ServicesMaster objDPServicesMaster = new DP_ServicesMaster()
        //                        {
        //                            Service = objAPIProductRequestParam.ProductName,
        //                            IsDeleted = false,
        //                            IsActive = true,
        //                            CompanyId = objAPIProductRequestParam.ClientId,
        //                            CreatedBy = userId,
        //                            CreatedDate = currentdate
        //                        };
        //                        objDecisionPointEntities.DP_ServicesMaster.Add(objDPServicesMaster);
        //                        objDecisionPointEntities.SaveChanges();
        //                        objAPIMasterResponseParam.ResultId = Convert.ToString(objDPServicesMaster.Id, CultureInfo.InvariantCulture);
        //                        objAPIMasterResponseParam.ResultCode = (int)(ResponseStatusCode.Success);
        //                    }
        //                    //if subclient passed
        //                    else
        //                    {
        //                        if (!string.IsNullOrEmpty(objAPIProductRequestParam.SubClientId))
        //                        {
        //                            if (!string.Equals(subClientUserId, 0))
        //                            {
        //                                //check user type of subclient 
        //                                if (!string.IsNullOrEmpty(subClientUserType))
        //                                {
        //                                    //if user type is company than product added in product master
        //                                    if (string.Equals(subClientUserType, Shared.Company))
        //                                    {
        //                                        DP_ServicesMaster objDPServicesMaster = new DP_ServicesMaster()
        //                                        {
        //                                            Service = objAPIProductRequestParam.ProductName,
        //                                            IsDeleted = false,
        //                                            IsActive = true,
        //                                            CompanyId = objAPIProductRequestParam.ClientId,
        //                                            CreatedBy = userId,
        //                                            CreatedDate = currentdate
        //                                        };
        //                                        objDecisionPointEntities.DP_ServicesMaster.Add(objDPServicesMaster);
        //                                        objDecisionPointEntities.SaveChanges();
        //                                        objAPIMasterResponseParam.ResultId = Convert.ToString(objDPServicesMaster.Id, CultureInfo.InvariantCulture);
        //                                        objAPIMasterResponseParam.ResultCode = (int)(ResponseStatusCode.Success);
        //                                    }
        //                                    //if user type is not company than product added in product mapping
        //                                    else
        //                                    {
        //                                        //get product id of particular product in particular client
        //                                        var serviceId = (from servicename in objDecisionPointEntities.DP_ServicesMaster
        //                                                         where servicename.Service == objAPIProductRequestParam.ProductName
        //                                                         && servicename.CompanyId == objAPIProductRequestParam.ClientId
        //                                                         select servicename.Id).FirstOrDefault();
        //                                        //if product exist or not
        //                                        if (!string.Equals(serviceId, 0))
        //                                        {
        //                                            DP_ServiceMapping objDPServiceMapping = new DP_ServiceMapping()
        //                                            {
        //                                                ServiceId = Convert.ToInt32(serviceId, CultureInfo.InvariantCulture),
        //                                                UserId = subClientUserId,
        //                                                ParentCompanyId = objAPIProductRequestParam.ClientId,
        //                                                UserCompanyId = objAPIProductRequestParam.SubClientId,
        //                                                IsActive = true
        //                                            };
        //                                            objDecisionPointEntities.DP_ServiceMapping.Add(objDPServiceMapping);
        //                                            objDecisionPointEntities.SaveChanges();
        //                                            objAPIMasterResponseParam.ResultId = Convert.ToString(serviceId, CultureInfo.InvariantCulture);
        //                                            objAPIMasterResponseParam.ResultCode = (int)(ResponseStatusCode.Success);
        //                                        }
        //                                        //if product not exist
        //                                        else { objAPIMasterResponseParam.ResultId = Shared.Zero; objAPIMasterResponseParam.ResultCode = (int)(ResponseStatusCode.Productnotfoundforclient); }
        //                                    }

        //                                }
        //                            }
        //                            //if subclient not exist
        //                            else { objAPIMasterResponseParam.ResultId = Shared.Zero; objAPIMasterResponseParam.ResultCode = (int)(ResponseStatusCode.Subclientnotfound); }
        //                        }
        //                    }
        //                }


        //            }
        //        }
        //        //if client not exist
        //        else { objAPIMasterResponseParam.ResultId = Shared.Zero; objAPIMasterResponseParam.ResultCode = (int)(ResponseStatusCode.Clientnotfound); }
        //        return objAPIMasterResponseParam;
        //    }
        //    catch (NullReferenceException nex)
        //    {
        //        objAPIMasterResponseParam.ResultId = Shared.Zero; objAPIMasterResponseParam.ResultCode = nex.HResult;
        //        throw;
        //    }
        //    catch (Exception ex)
        //    {
        //        objAPIMasterResponseParam.ResultId = Shared.Zero; objAPIMasterResponseParam.ResultCode = ex.HResult;
        //        throw;
        //    }
        //}

        //#endregion

        public APIMasterResponseParam AddUpdateSubClient(DSTInviteRequestParam objDSTInviteRequestParam)
        {
            try
            {
                objAPIMasterResponseParam = new APIMasterResponseParam();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (!string.IsNullOrEmpty(objDSTInviteRequestParam.SubClientId))
                    {
                        var getUserDetails = (from user in objDecisionPointEntities.DP_User
                                              join profile in objDecisionPointEntities.DP_Profile
                                              on user.Id equals profile.UserId
                                              where user.CompanyId == objDSTInviteRequestParam.SubClientId && profile.UserType == Shared.Company
                                              select new { user, profile }).FirstOrDefault();
                        if (!object.Equals(getUserDetails, null))
                        {
                            getUserDetails.profile.BusinessName = objDSTInviteRequestParam.BusinessName;
                        }
                        objDecisionPointEntities.SaveChanges();
                        objAPIMasterResponseParam.ResultCode = (int)APIResponseStatusCode.Success;
                        objAPIMasterResponseParam.ResultId = objDSTInviteRequestParam.SubClientId;
                    }
                    else
                    {
                        //call method for add sub client under particular client
                        objAPIMasterResponseParam.ResultId = AddSubClients(objDSTInviteRequestParam);
                        objAPIMasterResponseParam.ResultCode = (int)APIResponseStatusCode.Success;
                    }
                    return objAPIMasterResponseParam;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Used for add sub clients
        /// </summary>
        /// <param name="objDSTInviteRequestParam"></param>
        /// <returns>int</returns>
        public string AddSubClients(DSTInviteRequestParam objDSTInviteRequestParam)
        {
            try
            {
                int result = 0;
                string SubClientId = string.Empty;
                string genCompanyId = GenrateCompanyId();
                string genUserId = GenrateUserId();
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    #region to save details of non member

                    DP_User objDP_User = new DP_User()
                    {
                        EmailId = objDSTInviteRequestParam.EmailId,
                        Password = objDSTInviteRequestParam.Password,
                        IsActive = true,
                        IsDeleted = false,
                        CreatedBy = objDSTInviteRequestParam.UserId,
                        CreatedDate = DateTime.Now.Date,
                        IsTemp = true,
                        UserId = genUserId,
                        CompanyId = genCompanyId,
                        IsRegistered = false,
                    };
                    objDecisionPointEntities.DP_User.Add(objDP_User);
                    objDecisionPointEntities.SaveChanges();
                    result = objDP_User.Id;
                    SubClientId = objDP_User.CompanyId;
                    DP_Profile objDP_Profile = new DP_Profile()
                    {
                        Firstname = objDSTInviteRequestParam.FirstName,
                        LastName = objDSTInviteRequestParam.LastName,
                        BusinessName = objDSTInviteRequestParam.BusinessName,
                        IsPayment = false,
                        UserId = result,
                        UserType = Shared.Company
                    };
                    objDecisionPointEntities.DP_Profile.Add(objDP_Profile);
                    // objDecisionPointEntities.SaveChanges();
                    DP_FlowMapping flow = new DP_FlowMapping()
                    {
                        FlowId = 1,//1 id used for client on flow master table
                        UserId = result,
                        CreatedBy = objDSTInviteRequestParam.UserId,
                        UserCompanyId = genCompanyId,
                        CreatedCompanyId = objDSTInviteRequestParam.ClientId

                    };
                    objDecisionPointEntities.DP_FlowMapping.Add(flow);

                    DP_ComapnyVendorMapping objComapnyVendorMapping = new DP_ComapnyVendorMapping()
                    {
                        CompanyId = objDSTInviteRequestParam.ClientId,
                        VendorId = result,
                        Invitationstatus = false,
                        CreatedBy = objDSTInviteRequestParam.UserId,
                        CreatedDate = DateTime.Now.Date,
                        PaymentType = 2,
                        Status = 0,
                        IsDeleted = 0,
                        IsActive = true,
                        StatusChangedate = DateTime.Now.Date,
                        ReceiverCompanyId = genCompanyId,
                        IsMailSent = false,
                        IsNonMember = true,
                    };
                    objDecisionPointEntities.DP_ComapnyVendorMapping.Add(objComapnyVendorMapping);
                    //insert in API mapping.
                    DP_APIMapping dP_APIMapping = new DP_APIMapping()
                    {
                        ApiId = 1,// for testing purpose of DST it's static later change it
                        InvitedUserId = result,
                        InvitedCompanyId = SubClientId,
                        InviteeCompanyId = objDSTInviteRequestParam.ClientId,
                        Status = true,
                    };
                    objDecisionPointEntities.DP_APIMapping.Add(dP_APIMapping);
                    objDecisionPointEntities.SaveChanges();
                    #endregion


                }
                return SubClientId;
            }
            catch (Exception)
            {

                throw;
            }
        }
        #endregion

        /// <summary>
        /// Validate Ic with email id and Ic type
        /// </summary>
        /// <param name="email">email</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>19 Jan 2015</CreatedDate>
        /// <returns>int</returns>
        public int ValidateIcWithIcType(string email)
        {
            try
            {
                int result = 0;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from user in objDecisionPointEntities.DP_User
                                 join vendorType in objDecisionPointEntities.DP_VendorTypeMapping
                                 on user.Id equals vendorType.UserId
                                 where user.EmailId == email && vendorType.IsDefault == true
                                 select vendorType.VendorTypeId).FirstOrDefault();
                    result = Convert.ToInt32(query == null ? 0 : query);
                }
                return result;
            }
            catch
            {

                throw;
            }
        }

        #region Professional Lic & Insurance & Additional Req Mappings
        /// <summary>
        /// Get Professional License
        /// </summary>
        /// <param name="userId">ic user id</param>
        /// <param name="companyId">ic company id</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>03 feb 2015</CreatedDate>
        /// <returns>UserDashBoardResponseParam</returns>
        public IEnumerable<LicenseInsuranceResponseParam> GetProfessionalLicense(int userId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from licMaster in objDecisionPointEntities.DP_ProfessionalLicenseMaster
                                 join licMap in objDecisionPointEntities.DP_ProfessionalLicenseMapping
                                 on licMaster.Id equals licMap.ProfLiceId

                                 join user in objDecisionPointEntities.DP_User
                                 on licMaster.UserId equals user.Id

                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId

                                 join state in objDecisionPointEntities.DP_State
                                 on licMap.StateId equals state.Id into states
                                 from stat in states.DefaultIfEmpty()

                                 where licMap.UserId == userId && licMap.CompanyId == companyId
                                 //&& licMaster.CreatorCompanyId == objLicenseCheckRequestParam.CreatorCompanyId && profile.UserType==Shared.Company
                                 select new LicenseInsuranceResponseParam
                                 {
                                     RequiredByUserId = (int)(licMaster.UserId == null ? 0 : licMaster.UserId),
                                     ReqCompanyName = profile.BusinessName,
                                     RequiredByCompanyId = licMaster.CompanyId,
                                     LicenseType = licMaster.LicenseType,
                                     LicenseNumber = licMap.LicenseNumber,
                                     StateName = stat.StateAbbre,
                                     ExpirationDate = licMap.ExpirationDate,
                                     Status = licMap.Status,
                                     LicInsMapId = licMap.Id,
                                     Source = licMap.Source,
                                     StateId = (stat.Id == null ? 0 : stat.Id),
                                     LicInsId = licMaster.Id,
                                     CompanyId = licMaster.CreatorCompanyId,
                                     VendorTypeId = licMaster.ICTypeId,
                                     IsDocUpload = licMap.DocAndDataStatus
                                 }).ToList();
                    return query;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// Get Professional Insurance
        /// </summary>
        /// <param name="userId">ic user id</param>
        /// <param name="companyId">ic company id</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>03 feb 2015</CreatedDate>
        /// <returns>UserDashBoardResponseParam</returns>
        public IEnumerable<LicenseInsuranceResponseParam> GetProfessionalInsurance(int userId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from insMaster in objDecisionPointEntities.DP_InsuranceMaster
                                 join insMap in objDecisionPointEntities.DP_InsuranceMapping
                                 on insMaster.Id equals insMap.InsId

                                 join user in objDecisionPointEntities.DP_User
                                 on insMaster.UserId equals user.Id

                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId

                                 where insMap.UserId == userId && insMap.CompanyId == companyId
                                 select new LicenseInsuranceResponseParam
                                 {
                                     RequiredByUserId = (int)(insMaster.UserId == null ? 0 : insMaster.UserId),
                                     ReqCompanyName = profile.BusinessName,
                                     RequiredByCompanyId = insMaster.CompanyId,
                                     InsuranceType = insMaster.InsuranceType,
                                     PolicyNumber = insMap.PolicyNumber,
                                     ExpirationDate = insMap.ExpirationDate,
                                     Status = insMap.Status,
                                     LicInsMapId = insMap.Id,
                                     LicInsId = insMaster.Id,
                                     CompanyName = insMap.CompanyName,
                                     SingleOccurance = (double)(insMap.SingleOccurance == null ? 0 : insMap.SingleOccurance),
                                     Aggregate = (double)(insMap.Aggregate == null ? 0 : insMap.Aggregate),
                                     VendorTypeId = insMaster.ICTypeId,
                                     CompanyId = insMaster.CreatorCompanyId,
                                     IsDocUpload = insMap.DocAndDataStatus,
                                     InsuranceVerType = insMaster.InsuranceVerType
                                 }).ToList();
                    return query;
                }
            }
            catch
            {

                throw;
            }
        }

        /// <summary>
        /// get additional requirements
        /// </summary>
        /// <param name="userId">user id</param>
        /// <param name="companyId">companyId</param>
        /// <returns>UserDashBoardResponseParam</returns>
        public IEnumerable<LicenseInsuranceResponseParam> GetAdditionalRequirement(int userId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var query = (from addMaster in objDecisionPointEntities.DP_AdditionalReqMaster
                                 join addMap in objDecisionPointEntities.DP_AdditionalReqMapping
                                 on addMaster.Id equals addMap.AddReqId

                                 join user in objDecisionPointEntities.DP_User
                                 on addMaster.UserId equals user.Id

                                 join profile in objDecisionPointEntities.DP_Profile
                                 on user.Id equals profile.UserId

                                 where addMap.UserId == userId && addMap.CompanyId == companyId
                                 select new LicenseInsuranceResponseParam
                                 {
                                     RequiredByUserId = (int)(addMaster.UserId == null ? 0 : addMaster.UserId),
                                     ReqCompanyName = profile.BusinessName,
                                     RequiredByCompanyId = addMaster.CompanyId,
                                     title = addMaster.Title,
                                     CompletedDate = addMap.CompletionDate,
                                     Status = addMap.Status,
                                     LicInsMapId = addMap.Id,
                                     LicInsId = addMaster.Id,
                                     UploadedDoc = addMaster.UploadedBy,
                                     VendorTypeId = addMaster.ICTypeId,
                                     CompanyId = addMaster.CreatorCompanyId,
                                     IsDocUpload = addMap.DocAndDataStatus
                                 }).ToList();
                    return query;
                }
            }
            catch
            {

                throw;
            }
        }
        /// <summary>
        /// Used for EditProfessionalLic
        /// </summary>
        /// <param name="objLicInsRequestParam"></param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Mar 2015</createddate>
        public int EditProfessionalLic(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var profLicMapDetails = (from profLicMap in objDecisionPointEntities.DP_ProfessionalLicenseMapping
                                             where profLicMap.Id == objLicInsRequestParam.LicInsMapId
                                             select profLicMap).FirstOrDefault();
                    if (!object.Equals(profLicMapDetails, null))
                    {
                        profLicMapDetails.LicenseNumber = objLicInsRequestParam.LicenseNumber;
                        profLicMapDetails.StateId = objLicInsRequestParam.StateId;
                        profLicMapDetails.ExpirationDate = objLicInsRequestParam.ExpirationDate;
                        profLicMapDetails.ModifiedDate = currentdate;
                        profLicMapDetails.ModifiedBy = objLicInsRequestParam.ModifiedById;
                        profLicMapDetails.Status = objLicInsRequestParam.Status;

                    }
                    #region DocUpload and Remove

                    List<string> DocLoclist = new List<string>();
                    if (!string.IsNullOrEmpty(objLicInsRequestParam.UploadedDoc))
                    {
                        DocLoclist = objLicInsRequestParam.UploadedDoc.Split(';').ToList();
                    }
                    //remove uploaded documents by child user[Who received the JCR]
                    var profLicUploadDocs = (from profLicUploadDoc in objDecisionPointEntities.DP_ProfessionalLicenseUploadDocs
                                             where profLicUploadDoc.ProfLicMapId == objLicInsRequestParam.LicInsMapId
                                             select profLicUploadDoc).ToList();
                    if (!object.Equals(profLicUploadDocs, null))
                    {
                        foreach (var item in profLicUploadDocs)
                        {
                            objDecisionPointEntities.DP_ProfessionalLicenseUploadDocs.Remove(item);
                        }
                    }
                    foreach (var item in DocLoclist)
                    {
                        if (!string.IsNullOrEmpty(item))
                        {
                            string[] str = item.Split(char.Parse(Shared.Hash));
                            var DocLocation = str[0];
                            int docSequence = Convert.ToInt32(str[1]);
                            DP_ProfessionalLicenseUploadDocs objDP_ProfessionalLicenseUploadDocs = new DP_ProfessionalLicenseUploadDocs()
                            {
                                ProfLicMapId = objLicInsRequestParam.LicInsMapId,
                                DocLoc = DocLocation,
                                DocSeqNo = docSequence,
                                UserId = objLicInsRequestParam.UserId,
                                CompanyId = objLicInsRequestParam.CompanyId,
                                ProfLicId = objLicInsRequestParam.LicInsMasterId,
                                DocUploadedDate = currentdate
                            };
                            objDecisionPointEntities.DP_ProfessionalLicenseUploadDocs.Add(objDP_ProfessionalLicenseUploadDocs);
                            profLicMapDetails.DocAndDataStatus = true;
                            profLicMapDetails.DocUploadedDate = currentdate;
                        }

                    }
                    #endregion
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Used for EditInsurance
        /// </summary>
        /// <param name="objLicInsRequestParam"></param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Mar 2015</createddate>
        public int EditInsurance(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var profLicMapDetails = (from profLicMap in objDecisionPointEntities.DP_InsuranceMapping
                                             where profLicMap.Id == objLicInsRequestParam.LicInsMapId
                                             select profLicMap).FirstOrDefault();
                    if (!object.Equals(profLicMapDetails, null))
                    {
                        profLicMapDetails.PolicyNumber = objLicInsRequestParam.PolicyNumber;
                        profLicMapDetails.CompanyName = objLicInsRequestParam.CompanyName;
                        profLicMapDetails.ExpirationDate = objLicInsRequestParam.ExpirationDate;
                        profLicMapDetails.ModifiedDate = currentdate;
                        profLicMapDetails.ModifiedBy = objLicInsRequestParam.ModifiedById;
                        profLicMapDetails.SingleOccurance = objLicInsRequestParam.SingleOccurance;
                        profLicMapDetails.Aggregate = objLicInsRequestParam.Aggregate;
                        profLicMapDetails.Status = objLicInsRequestParam.Status;
                    }
                    #region DocUpload and Remove

                    List<string> DocLoclist = new List<string>();
                    if (!string.IsNullOrEmpty(objLicInsRequestParam.UploadedDoc))
                    {
                        DocLoclist = objLicInsRequestParam.UploadedDoc.Split(';').ToList();
                    }
                    //remove uploaded documents by child user[Who received the JCR]
                    var insUploadDocs = (from profLicUploadDoc in objDecisionPointEntities.DP_InsuranceUploadDocs
                                         where profLicUploadDoc.InsMapId == objLicInsRequestParam.LicInsMapId
                                         select profLicUploadDoc).ToList();
                    if (!object.Equals(insUploadDocs, null))
                    {
                        foreach (var item in insUploadDocs)
                        {
                            objDecisionPointEntities.DP_InsuranceUploadDocs.Remove(item);
                        }
                    }
                    foreach (var item in DocLoclist)
                    {
                        if (!string.IsNullOrEmpty(item))
                        {
                            string[] str = item.Split(char.Parse(Shared.Hash));
                            var DocLocation = str[0];
                            int docSequence = Convert.ToInt32(str[1]);
                            DP_InsuranceUploadDocs objDP_InsuranceUploadDocs = new DP_InsuranceUploadDocs()
                            {
                                InsMapId = objLicInsRequestParam.LicInsMapId,
                                DocLoc = DocLocation,
                                DocSeqNo = docSequence,
                                UserId = objLicInsRequestParam.UserId,
                                CompanyId = objLicInsRequestParam.CompanyId,
                                InsId = objLicInsRequestParam.LicInsMasterId,
                                DocUploadedDate = currentdate
                            };
                            objDecisionPointEntities.DP_InsuranceUploadDocs.Add(objDP_InsuranceUploadDocs);
                            profLicMapDetails.DocAndDataStatus = true;
                            profLicMapDetails.DocUploadedDate = currentdate;
                        }

                    }
                    #endregion
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Used for Additional Req
        /// </summary>
        /// <param name="objLicInsRequestParam"></param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Mar 2015</createddate>
        public int EditAdditionalReq(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var profLicMapDetails = (from profLicMap in objDecisionPointEntities.DP_AdditionalReqMapping
                                             where profLicMap.Id == objLicInsRequestParam.LicInsMapId
                                             select profLicMap).FirstOrDefault();
                    if (!object.Equals(profLicMapDetails, null))
                    {
                        profLicMapDetails.ModifiedDate = currentdate;
                        profLicMapDetails.ModifiedBy = objLicInsRequestParam.ModifiedById;
                        if (object.Equals(profLicMapDetails.CompletionDate, null))
                        {
                            profLicMapDetails.CompletionDate = currentdate;
                        }
                        profLicMapDetails.Status = objLicInsRequestParam.Status;
                    }
                    #region DocUpload and Remove

                    List<string> DocLoclist = new List<string>();
                    if (!string.IsNullOrEmpty(objLicInsRequestParam.UploadedDoc))
                    {
                        DocLoclist = objLicInsRequestParam.UploadedDoc.Split(';').ToList();
                    }
                    //remove uploaded documents by child user[Who received the JCR]
                    var insUploadDocs = (from profLicUploadDoc in objDecisionPointEntities.DP_AdditionalReqUploadDocs
                                         where profLicUploadDoc.AddReqMapId == objLicInsRequestParam.LicInsMapId
                                         select profLicUploadDoc).ToList();
                    if (!object.Equals(insUploadDocs, null))
                    {
                        foreach (var item in insUploadDocs)
                        {
                            objDecisionPointEntities.DP_AdditionalReqUploadDocs.Remove(item);
                        }
                    }
                    foreach (var item in DocLoclist)
                    {
                        if (!string.IsNullOrEmpty(item))
                        {
                            string[] str = item.Split(char.Parse(Shared.Hash));
                            var DocLocation = str[0];
                            int docSequence = Convert.ToInt32(str[1]);
                            DP_AdditionalReqUploadDocs objDP_AdditionalReqUploadDocs = new DP_AdditionalReqUploadDocs()
                            {
                                AddReqMapId = objLicInsRequestParam.LicInsMapId,
                                DocLoc = DocLocation,
                                DocSeqNo = docSequence,
                                UserId = objLicInsRequestParam.UserId,
                                CompanyId = objLicInsRequestParam.CompanyId,
                                AddReqId = objLicInsRequestParam.LicInsMasterId,
                                DocUploadedDate = currentdate
                            };
                            objDecisionPointEntities.DP_AdditionalReqUploadDocs.Add(objDP_AdditionalReqUploadDocs);
                            profLicMapDetails.DocAndDataStatus = true;
                            profLicMapDetails.DocUploadedDate = currentdate;
                        }

                    }
                    #endregion
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Used for Driver License
        /// </summary>
        /// <param name="objLicInsRequestParam"></param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Mar 2015</createddate>
        public int EditDriverLicense(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var profLicMapDetails = (from profLicMap in objDecisionPointEntities.DP_BGCheckMapping
                                             where profLicMap.Id == objLicInsRequestParam.LicInsMapId
                                             select profLicMap).FirstOrDefault();
                    if (!object.Equals(profLicMapDetails, null))
                    {
                        profLicMapDetails.LicenseNumber = objLicInsRequestParam.LicenseNumber;
                        profLicMapDetails.LicenseStateCode = objLicInsRequestParam.StateAbbre;
                        profLicMapDetails.LicenseExpDate = objLicInsRequestParam.ExpirationDate;
                        profLicMapDetails.ModifiedDate = currentdate;
                        profLicMapDetails.ModifiedBy = objLicInsRequestParam.ModifiedById;
                        profLicMapDetails.Status = objLicInsRequestParam.Status;
                    }
                    #region DocUpload and Remove

                    List<string> DocLoclist = new List<string>();
                    if (!string.IsNullOrEmpty(objLicInsRequestParam.UploadedDoc))
                    {
                        DocLoclist = objLicInsRequestParam.UploadedDoc.Split(';').ToList();
                    }
                    //remove uploaded documents by child user[Who received the JCR]
                    var insUploadDocs = (from profLicUploadDoc in objDecisionPointEntities.DP_BackgroundDocUpload
                                         where profLicUploadDoc.BGMapId == objLicInsRequestParam.LicInsMapId
                                         select profLicUploadDoc).ToList();
                    if (!object.Equals(insUploadDocs, null))
                    {
                        foreach (var item in insUploadDocs)
                        {
                            objDecisionPointEntities.DP_BackgroundDocUpload.Remove(item);
                        }
                    }
                    foreach (var item in DocLoclist)
                    {
                        if (!string.IsNullOrEmpty(item))
                        {
                            string[] str = item.Split(char.Parse(Shared.Hash));
                            var DocLocation = str[0];
                            int docSequence = Convert.ToInt32(str[1]);
                            DP_BackgroundDocUpload objDPBackgroundDocUpload = new DP_BackgroundDocUpload()
                            {
                                BGMapId = objLicInsRequestParam.LicInsMapId,
                                DocLoc = DocLocation,
                                DocSeqNo = docSequence,
                                UserId = objLicInsRequestParam.UserId,
                                CompanyId = objLicInsRequestParam.CompanyId,
                                BGMasterId = objLicInsRequestParam.LicInsMasterId,
                                DocUploadedDate = currentdate
                            };
                            objDecisionPointEntities.DP_BackgroundDocUpload.Add(objDPBackgroundDocUpload);
                            //profLicMapDetails.DocAndDataStatus = true;
                            //profLicMapDetails.DocUploadedDate = currentdate;
                        }

                    }
                    #endregion
                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        /// <summary>
        /// Used for Additional Req
        /// </summary>
        /// <param name="objLicInsRequestParam"></param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Mar 2015</createddate>
        public int ApprovedStatus(LicenseInsuranceRequestParam objLicInsRequestParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (objLicInsRequestParam.OperationType.Equals(0))
                    {
                        var profLicMapDetails = (from profLicMap in objDecisionPointEntities.DP_ProfessionalLicenseMapping
                                                 where profLicMap.Id == objLicInsRequestParam.LicInsMapId
                                                 select profLicMap).FirstOrDefault();
                        if (!object.Equals(profLicMapDetails, null))
                        {
                            profLicMapDetails.ModifiedDate = currentdate;
                            profLicMapDetails.ModifiedBy = objLicInsRequestParam.ModifiedById;
                            profLicMapDetails.Status = objLicInsRequestParam.Status;
                        }
                    }
                    else if (objLicInsRequestParam.OperationType.Equals(2))
                    {
                        var profLicMapDetails = (from profLicMap in objDecisionPointEntities.DP_AdditionalReqMapping
                                                 where profLicMap.Id == objLicInsRequestParam.LicInsMapId
                                                 select profLicMap).FirstOrDefault();
                        if (!object.Equals(profLicMapDetails, null))
                        {
                            profLicMapDetails.ModifiedDate = currentdate;
                            profLicMapDetails.ModifiedBy = objLicInsRequestParam.ModifiedById;
                            profLicMapDetails.Status = objLicInsRequestParam.Status;
                        }
                    }
                    else if (objLicInsRequestParam.OperationType.Equals(1))
                    {
                        var profLicMapDetails = (from profLicMap in objDecisionPointEntities.DP_InsuranceMapping
                                                 where profLicMap.Id == objLicInsRequestParam.LicInsMapId
                                                 select profLicMap).FirstOrDefault();
                        if (!object.Equals(profLicMapDetails, null))
                        {
                            profLicMapDetails.ModifiedDate = currentdate;
                            profLicMapDetails.ModifiedBy = objLicInsRequestParam.ModifiedById;
                            profLicMapDetails.Status = objLicInsRequestParam.Status;
                        }
                    }
                    else if (objLicInsRequestParam.OperationType.Equals(3))
                    {
                        var profLicMapDetails = (from profLicMap in objDecisionPointEntities.DP_BGCheckMapping
                                                 where profLicMap.Id == objLicInsRequestParam.LicInsMapId
                                                 select profLicMap).FirstOrDefault();
                        if (!object.Equals(profLicMapDetails, null))
                        {
                            profLicMapDetails.ModifiedDate = currentdate;
                            profLicMapDetails.ModifiedBy = objLicInsRequestParam.ModifiedById;
                            profLicMapDetails.Status = objLicInsRequestParam.Status;
                        }
                    }


                    return objDecisionPointEntities.SaveChanges();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// GetProfessionalCommunication
        /// </summary>
        /// <param name="userId">UserId</param>
        /// <param name="companyId">companyId</param>
        /// <CreatedBy>Sumit Saurav</CreatedBy>
        /// <CreatedDate>14 feb 2015</CreatedDate>
        /// <returns>UserDashBoardResponseParam</returns>
        public IEnumerable<UserDashBoardResponseParam> GetProfessionalCommunication(int userId, string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var query = objDecisionPointEntities.DP_DocumentDetails
                                    .Join(objDecisionPointEntities.DP_Recipient.Where(w => w.RecipientUserId == userId
                                         && w.RecipientCompanyid == companyId
                                        && w.IsActive == true
                                        && (w.RecipeintDueDate == defaultdate ||
                                        w.CommReceivedDate <= currentdate)
                                        ), dd => dd.Id, r => r.DocId, (dd, r) => new { dd, r }).Where(xx => xx.dd.IsDeleted == false && xx.dd.IsEmployementReq == true)
                                    .Join(objDecisionPointEntities.DP_Profile, dd => dd.dd.UserId, pr => pr.UserId, (dd, pr) => new { dd, pr })
                                    .Join(objDecisionPointEntities.DP_User, pr => pr.pr.UserId, u => u.Id, (pr, u) => new UserDashBoardResponseParam
                                    {
                                        IsCompliance = (bool)(pr.dd.dd.IsEmployementReq == null ? false : pr.dd.dd.IsEmployementReq),
                                        DocTitle = pr.dd.dd.Title == null ? string.Empty : pr.dd.dd.Title,
                                        completeDate = pr.dd.r.CompletedDate,
                                        expirationDate = pr.dd.r.RecipeintDueDate,
                                        Docfrom = pr.pr.BusinessName,
                                        DocId = pr.dd.dd.Id,
                                        tableId = pr.dd.r.Id,
                                        status = pr.dd.r.Status,
                                        CreatorCompanyid = pr.dd.r.DeliveredCompanyId == null ? string.Empty : pr.dd.r.DeliveredCompanyId,
                                        accecpted = pr.dd.r.Accepted,
                                        assesmentStatus = pr.dd.r.Assessmentresult
                                    }).Distinct().ToList();
                    return query;
                }
            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region Sterling Mapping
        /// <summary>
        /// Used for save sterling request and response details
        /// </summary>
        /// <param name="objSterlingResponseParam"></param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Mar 2015</createddate>
        public SterlingWithDpResponseParam SaveSterlingLog(SterlingResponseParam objSterlingResponseParam)
        {
            int inserted = 0;
            bool chkExistStatus = false;

            List<int> packageIdsCol = new List<int>();
            try
            {

                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //check request of same package by same user is alreay done or not
                    var chkRequestExist = (from sterlingMap in objDecisionPointEntities.DP_SterlingReqResMaster
                                           where sterlingMap.DPUserId == objSterlingResponseParam.DpUserId
                                           && sterlingMap.UniqueRequestId == objSterlingResponseParam.UniqueRequestId
                                           select sterlingMap).FirstOrDefault();
                    //if done than update the row
                    if (!object.Equals(chkRequestExist, null))
                    {
                        //update is done for second time request of same pacakge by smae user
                        if (objSterlingResponseParam.Type.Equals(0))
                        {
                            chkRequestExist.ModifyBy = objSterlingResponseParam.ModifiedBy;
                            chkRequestExist.ModifiedDate = currentdate;
                        }
                        //update is done for response which we recevied from sterling for particular user as per package
                        else if (objSterlingResponseParam.Type.Equals(1))
                        {
                            chkRequestExist.ModifyBy = objSterlingResponseParam.ModifiedBy;
                            chkRequestExist.ModifiedDate = currentdate;
                            chkRequestExist.OrderStatus = objSterlingResponseParam.OrderStatus;
                            chkRequestExist.SterlingClientRefId = objSterlingResponseParam.SterlingClientRefId;
                            chkRequestExist.OrganizationId = objSterlingResponseParam.OrganizationId;
                            chkRequestExist.GetResponse = true;
                            chkRequestExist.ResponseFileUrl = objSterlingResponseParam.ResponseFileUrl;
                            chkRequestExist.ResponseDate = currentdate;
                            chkRequestExist.FirstName = objSterlingResponseParam.FirstName;
                            chkRequestExist.LastName = objSterlingResponseParam.LastName;
                            chkRequestExist.MiddelName = objSterlingResponseParam.MiddelName;
                            chkRequestExist.EmailId = objSterlingResponseParam.EmailId;
                            chkRequestExist.PhoneNumber = objSterlingResponseParam.PhoneNumber;
                            chkRequestExist.State = objSterlingResponseParam.State;
                            chkRequestExist.City = objSterlingResponseParam.City;
                            chkRequestExist.CountyCode = objSterlingResponseParam.CountyCode;
                            chkRequestExist.ZipCode = objSterlingResponseParam.ZipCode;
                            chkRequestExist.Address = objSterlingResponseParam.Address;
                            chkRequestExist.DOB = objSterlingResponseParam.DOB;
                            chkRequestExist.ReviewResultUrl = objSterlingResponseParam.ReviewResultUrl;
                            chkRequestExist.LicenseNumber = objSterlingResponseParam.LicenseNumber;
                            chkRequestExist.LicenseCountryCode = objSterlingResponseParam.LicenseCountryCode;
                            chkRequestExist.LicenseStateCode = objSterlingResponseParam.LicenseStateCode;
                            if (!object.Equals(objSterlingResponseParam.LicenseExpDate, null))
                            {
                                chkRequestExist.LicenseExpDate = objSterlingResponseParam.LicenseExpDate;
                            }


                            //set DP User Company Id and Other Details
                            objSterlingResponseParam.DpCompanyId = chkRequestExist.DPCompanyId;
                            objSterlingResponseParam.PackageId = (int)(chkRequestExist.PackageId == null ? 0 : chkRequestExist.PackageId);
                            objSterlingResponseParam.PackageName = chkRequestExist.PackageName;
                        }
                        chkExistStatus = true;
                    }
                    inserted = objDecisionPointEntities.SaveChanges();
                }
                //added first request in database
                if (!chkExistStatus)
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        if (objSterlingResponseParam.Type.Equals(0))
                        {
                            DP_SterlingReqResMaster objDPSterlingMapping = new DP_SterlingReqResMaster()
                            {
                                DPUserId = objSterlingResponseParam.DpUserId,
                                DPCompanyId = objSterlingResponseParam.DpCompanyId,
                                PackageId = objSterlingResponseParam.PackageId,
                                PackageName = objSterlingResponseParam.PackageName,
                                RequestDate = currentdate,
                                CreatedDate = currentdate,
                                CreatedBy = objSterlingResponseParam.DpUserId,
                                CreatorCompanyId = objSterlingResponseParam.DpCompanyId,
                                SentRequest = true,
                                RequestFileUrl = objSterlingResponseParam.RequestFileUrl,
                                ModifedCompanyId = objSterlingResponseParam.ModifiedCompanyId,
                                UniqueRequestId = objSterlingResponseParam.UniqueRequestId,
                                SterlingOrderId = objSterlingResponseParam.SterlingOrderId
                            };
                            objDecisionPointEntities.DP_SterlingReqResMaster.Add(objDPSterlingMapping);
                        }
                        inserted = objDecisionPointEntities.SaveChanges();
                    }
                }
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var chkPackageName = (from pkgName in objDecisionPointEntities.DP_BGCheckPackageMaster
                                          where pkgName.Id == objSterlingResponseParam.PackageId && pkgName.IsDeleted == false
                                          select pkgName).FirstOrDefault();
                    if (!object.Equals(chkPackageName, null))
                    {
                        if (!string.IsNullOrEmpty(chkPackageName.SterlingPkgName))
                        {
                            if (chkPackageName.SterlingPkgName.Contains("Update"))
                            {
                                objSterlingResponseParam.PackageId = (int)(chkPackageName.Id == null ? 0 : chkPackageName.Id);
                                objSterlingResponseParam.PackageName = chkPackageName.SterlingPkgName;
                            }
                        }
                    }
                    var packageIdsDetails = (from bgPkgMaster in objDecisionPointEntities.DP_BGCheckPackageMaster
                                             where bgPkgMaster.Id == objSterlingResponseParam.PackageId
                                             select bgPkgMaster.MappedPackage).FirstOrDefault();
                    if (!object.Equals(packageIdsDetails, null))
                    {
                        packageIdsCol = packageIdsDetails.Split(char.Parse(Shared.Comma)).Select(x => int.Parse(x)).ToList();

                    }
                }
                SterlingWithDpResponseParam objSterlingWithDpResponseParam = new SterlingWithDpResponseParam()
                {
                    DPCompanyId = objSterlingResponseParam.DpCompanyId,
                    DpUserId = objSterlingResponseParam.DpUserId,
                    PackageId = objSterlingResponseParam.PackageId
                };
                if (objSterlingResponseParam.PackageId != 0)
                {
                    packageIdsCol.Add(objSterlingResponseParam.PackageId);
                }
                foreach (var item in packageIdsCol)
                {
                    //update sterlingorder Id
                    objSterlingResponseParam.PackageId = item;
                    UpdateMasterPkgStatusAsPerSterling(objSterlingResponseParam);
                    UpdateScreeningPkgStatusAsPerSterling(objSterlingResponseParam);
                }


                return objSterlingWithDpResponseParam;

            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Used for save SterlingScreeningLog
        /// </summary>
        /// <param name="objSterlingResponseParam"></param>
        /// <returns>int</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Mar 2015</createddate>
        public int SaveSterlingScreeningLog(SterlingResponseParam objSterlingResponseParam)
        {
            int isInserted = 0;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    //if we get another status of same request id than firstly we remove old status and insert the updated status from sterling
                    var checkScreeningResult = (from screen in objDecisionPointEntities.DP_SterlingScreeningMapping
                                                where screen.UniqueRequestId == objSterlingResponseParam.UniqueRequestId
                                                && screen.ScreenClientRefId == objSterlingResponseParam.ScreenClientRefId
                                                select screen).ToList();
                    if (checkScreeningResult.Count > 0)
                    {
                        foreach (var item in checkScreeningResult)
                        {
                            objDecisionPointEntities.DP_SterlingScreeningMapping.Remove(item);
                        }
                    }
                    //save sterling screening record
                    DP_SterlingScreeningMapping objDPSterlingScreeningMapping = new DP_SterlingScreeningMapping()
                    {
                        ScreenType = objSterlingResponseParam.ScreenType,
                        ScreenClientRefId = objSterlingResponseParam.ScreenClientRefId,
                        ScreenCloseDate = objSterlingResponseParam.ScreenCloseDate,
                        ScreenOpenDate = objSterlingResponseParam.ScreenOpenDate,
                        ScreenOrderStatus = objSterlingResponseParam.ScreenOrderStatus,
                        ScreenQualifier = objSterlingResponseParam.ScreenQualifier,
                        ScreenResultStatus = objSterlingResponseParam.ScreenResultStatus,
                        UniqueRequestId = objSterlingResponseParam.UniqueRequestId
                    };
                    objDecisionPointEntities.DP_SterlingScreeningMapping.Add(objDPSterlingScreeningMapping);
                    isInserted = objDecisionPointEntities.SaveChanges();
                }
                UpdateScreeningDetailsPkgStatusAsPerSterling(objSterlingResponseParam);
                return isInserted;
            }

            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Used for check uniqueRequestId no already genrated by system or not
        /// </summary>
        /// <param name="uniqueRequestId"></param>
        /// <returns>bool</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Mar 2015</createddate>
        public bool CheckUnqiueSterlingRequest(string uniqueRequestId)
        {
            bool IsExist = false;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var sterlingRequestIdDetails = (from sterlingreq in objDecisionPointEntities.DP_SterlingReqResMaster
                                                    where sterlingreq.UniqueRequestId == uniqueRequestId
                                                    select sterlingreq).FirstOrDefault();
                    if (!object.Equals(sterlingRequestIdDetails, null))
                    {
                        IsExist = true;
                    }
                }
                return IsExist;
            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Used for update the package status in master for sterling
        /// </summary>
        /// <returns>int</returns> 
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Mar 2015</createddate>
        private int UpdateMasterPkgStatusAsPerSterling(SterlingResponseParam objSterlingResponseParam)
        {
            try
            {
                int stateId = 0;
                if (!string.IsNullOrEmpty(objSterlingResponseParam.LicenseStateCode))
                {
                    stateId = GetStateIdFromStateAbbre(objSterlingResponseParam.LicenseStateCode);
                }
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var bgCheckPkgDetails = (from bgCheckmaster in objDecisionPointEntities.DP_BGCheckMaster
                                             join bgCheckMap in objDecisionPointEntities.DP_BGCheckMapping
                                                 on bgCheckmaster.Id equals bgCheckMap.BGCheckId
                                             where bgCheckmaster.BGCheckPkgId == objSterlingResponseParam.PackageId && bgCheckMap.UserId == objSterlingResponseParam.DpUserId
                                             && bgCheckMap.CompanyId == objSterlingResponseParam.DpCompanyId
                                             select new { bgCheckMap, bgCheckmaster }).ToList();
                    if (bgCheckPkgDetails.Count > 0)
                    {
                        foreach (var item in bgCheckPkgDetails)
                        {
                            if (string.IsNullOrEmpty(objSterlingResponseParam.OrderStatus))
                            {
                                objSterlingResponseParam.OrderScore = "Pending";
                            }
                            else if (string.Equals(objSterlingResponseParam.OrderStatus, "InProgress"))
                            {
                                objSterlingResponseParam.OrderScore = "In Progress";
                            }
                            else if (string.Equals(objSterlingResponseParam.OrderScore, "Clear"))
                            {
                                objSterlingResponseParam.OrderScore = Shared.Pass;
                            }
                            else if (string.Equals(objSterlingResponseParam.OrderScore, "Consider"))
                            {
                                objSterlingResponseParam.OrderScore = Shared.Review;
                            }
                            if (!string.IsNullOrEmpty(objSterlingResponseParam.LicenseNumber))
                            {
                                item.bgCheckMap.LicenseNumber = objSterlingResponseParam.LicenseNumber;
                            }
                            if (!string.IsNullOrEmpty(objSterlingResponseParam.LicenseStateCode))
                            {
                                item.bgCheckMap.LicenseStateCode = objSterlingResponseParam.LicenseStateCode;
                            }
                            if (!string.IsNullOrEmpty(objSterlingResponseParam.LicenseCountryCode))
                            {
                                item.bgCheckMap.LicenseCountryCode = objSterlingResponseParam.LicenseCountryCode;
                            }
                            if (!object.Equals(objSterlingResponseParam.LicenseExpDate, null))
                            {
                                item.bgCheckMap.LicenseExpDate = objSterlingResponseParam.LicenseExpDate;
                            }
                            item.bgCheckMap.Status = objSterlingResponseParam.OrderScore;
                            item.bgCheckMap.SterlingOrderId = objSterlingResponseParam.SterlingOrderId;
                        }
                    }
                    if (!string.IsNullOrEmpty(objSterlingResponseParam.PackageName))
                    {
                        if (objSterlingResponseParam.PackageName.Contains("Professional"))
                        {
                            //Check Package Id for Professional License
                            var profLicDetails = (from bgCheckmaster in objDecisionPointEntities.DP_ProfessionalLicenseMaster
                                                  join bgCheckMap in objDecisionPointEntities.DP_ProfessionalLicenseMapping
                                                  on bgCheckmaster.Id equals bgCheckMap.ProfLiceId
                                                  where bgCheckMap.UserId == objSterlingResponseParam.DpUserId
                                                  && bgCheckMap.CompanyId == objSterlingResponseParam.DpCompanyId && bgCheckmaster.Source == Shared.Sterling
                                                  select new { bgCheckMap, bgCheckmaster }).ToList();
                            if (profLicDetails.Count > 0)
                            {
                                foreach (var item in profLicDetails)
                                {
                                    if (string.IsNullOrEmpty(objSterlingResponseParam.OrderStatus))
                                    {
                                        objSterlingResponseParam.OrderScore = "Pending";
                                    }
                                    else if (string.Equals(objSterlingResponseParam.OrderStatus, "InProgress"))
                                    {
                                        objSterlingResponseParam.OrderScore = "In Progress";
                                    }
                                    else if (string.Equals(objSterlingResponseParam.OrderScore, "Clear"))
                                    {
                                        objSterlingResponseParam.OrderScore = Shared.Pass;
                                    }
                                    else if (string.Equals(objSterlingResponseParam.OrderScore, "Consider"))
                                    {
                                        objSterlingResponseParam.OrderScore = Shared.Review;
                                    }
                                    item.bgCheckMap.Status = objSterlingResponseParam.OrderScore;
                                    item.bgCheckMap.SterlingOrderId = objSterlingResponseParam.SterlingOrderId;
                                    if (!string.IsNullOrEmpty(objSterlingResponseParam.LicenseNumber))
                                    {
                                        item.bgCheckMap.LicenseNumber = objSterlingResponseParam.LicenseNumber;
                                    }
                                    if (!string.IsNullOrEmpty(objSterlingResponseParam.LicenseStateCode))
                                    {
                                        item.bgCheckMap.StateId = stateId;
                                    }
                                    if (!object.Equals(objSterlingResponseParam.LicenseExpDate, null))
                                    {
                                        item.bgCheckMap.ExpirationDate = objSterlingResponseParam.LicenseExpDate;
                                    }
                                }
                            }
                        }
                        if (objSterlingResponseParam.PackageName.Contains("insurance"))
                        {
                            //Check Package Id for Professional License
                            var profLicDetails = (from bgCheckmaster in objDecisionPointEntities.DP_InsuranceMaster
                                                  join bgCheckMap in objDecisionPointEntities.DP_InsuranceMapping
                                                  on bgCheckmaster.Id equals bgCheckMap.InsId
                                                  where bgCheckMap.UserId == objSterlingResponseParam.DpUserId
                                                  && bgCheckMap.CompanyId == objSterlingResponseParam.DpCompanyId && bgCheckmaster.Source == Shared.Sterling
                                                  select new { bgCheckMap, bgCheckmaster }).ToList();
                            if (profLicDetails.Count > 0)
                            {
                                foreach (var item in profLicDetails)
                                {
                                    if (string.IsNullOrEmpty(objSterlingResponseParam.OrderStatus))
                                    {
                                        objSterlingResponseParam.OrderScore = "Pending";
                                    }
                                    else if (string.Equals(objSterlingResponseParam.OrderStatus, "InProgress"))
                                    {
                                        objSterlingResponseParam.OrderScore = "In Progress";
                                    }
                                    else if (string.Equals(objSterlingResponseParam.OrderScore, "Clear"))
                                    {
                                        objSterlingResponseParam.OrderScore = Shared.Pass;
                                    }
                                    else if (string.Equals(objSterlingResponseParam.OrderScore, "Consider"))
                                    {
                                        objSterlingResponseParam.OrderScore = Shared.Review;
                                    }
                                    item.bgCheckMap.Status = objSterlingResponseParam.OrderScore;
                                    item.bgCheckMap.SterlingOrderId = objSterlingResponseParam.SterlingOrderId;
                                }
                            }
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// used for get the state id as per state code
        /// </summary>
        /// <param name="stateAbbre"></param>
        /// <returns>int</returns>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>25 Apr 2015</CreatedDate>
        private int GetStateIdFromStateAbbre(string stateAbbre)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var stateId = (from state in objDecisionPointEntities.DP_State
                                   where state.StateAbbre == stateAbbre
                                   select state.Id).FirstOrDefault();
                    return stateId;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// get packageName as per pacakge Id
        /// </summary>
        /// <param name="packageId"></param>
        /// <returns>string</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>20 Mar 2015</createddate>
        public string GetPackageNameAsPerId(int packageId)
        {
            try
            {
                string packageName = string.Empty;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    packageName = (from packagename in objDecisionPointEntities.DP_BGCheckPackageMaster
                                   where packagename.Id == packageId && packagename.IsDeleted == false
                                   select packagename.SterlingPkgName).FirstOrDefault();
                }
                return packageName;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// Used for update the package status for screening for sterling
        /// </summary>
        /// <returns>int</returns> 
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Mar 2015</createddate>
        private int UpdateScreeningPkgStatusAsPerSterling(SterlingResponseParam objSterlingResponseParam)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var bgCheckPkgDetails = (from bgCheckmaster in objDecisionPointEntities.DP_BGCheckMaster
                                             join bgCheckMap in objDecisionPointEntities.DP_BGCheckMapping
                                             on bgCheckmaster.Id equals bgCheckMap.BGCheckId
                                             join bgCheckDetailsMap in objDecisionPointEntities.DP_BGCheckDetailMapping
                                             on bgCheckMap.Id equals bgCheckDetailsMap.BGCheckMappingId
                                             where bgCheckmaster.BGCheckPkgId == objSterlingResponseParam.PackageId && bgCheckMap.UserId == objSterlingResponseParam.DpUserId
                                             && bgCheckMap.CompanyId == objSterlingResponseParam.DpCompanyId
                                             select new { bgCheckMap, bgCheckDetailsMap }).ToList();
                    if (bgCheckPkgDetails.Count > 0)
                    {
                        foreach (var item in bgCheckPkgDetails)
                        {
                            if (string.IsNullOrEmpty(objSterlingResponseParam.OrderStatus))
                            {
                                objSterlingResponseParam.OrderScore = "Pending";
                            }
                            else if (string.Equals(objSterlingResponseParam.OrderStatus, "InProgress"))
                            {
                                objSterlingResponseParam.OrderScore = "In Progress";
                            }
                            else if (string.Equals(objSterlingResponseParam.OrderScore, "Clear"))
                            {
                                objSterlingResponseParam.OrderScore = Shared.Pass;
                            }
                            else if (string.Equals(objSterlingResponseParam.OrderScore, "Consider"))
                            {
                                objSterlingResponseParam.OrderScore = Shared.Review;
                            }
                            item.bgCheckDetailsMap.Status = objSterlingResponseParam.OrderScore;
                        }
                    }
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Used for update the package status for screening for sterling
        /// </summary>
        /// <returns>int</returns> 
        /// <createdby>Bobi</createdby>
        /// <createddate>3 Mar 2015</createddate>
        private int UpdateScreeningDetailsPkgStatusAsPerSterling(SterlingResponseParam objSterlingResponseParam)
        {
            List<int> packageIdsCol = new List<int>();

            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {

                    var packageIdsDetails = (from bgPkgMaster in objDecisionPointEntities.DP_BGCheckPackageMaster
                                             where bgPkgMaster.Id == objSterlingResponseParam.PackageId
                                             select bgPkgMaster.MappedPackage).FirstOrDefault();
                    if (!object.Equals(packageIdsDetails, null))
                    {
                        packageIdsCol = packageIdsDetails.Split(char.Parse(Shared.Comma)).Select(x => int.Parse(x)).ToList();

                    }
                    packageIdsCol.Add(objSterlingResponseParam.PackageId);
                    foreach (var itemPkgId in packageIdsCol)
                    {
                        objSterlingResponseParam.PackageId = itemPkgId;

                        var bgCheckPkgDetails = (from bgCheckmaster in objDecisionPointEntities.DP_BGCheckMaster
                                                 join bgCheckMap in objDecisionPointEntities.DP_BGCheckMapping
                                                 on bgCheckmaster.Id equals bgCheckMap.BGCheckId
                                                 join bgCheckDetailsMap in objDecisionPointEntities.DP_BGCheckDetailMapping
                                                 on bgCheckMap.Id equals bgCheckDetailsMap.BGCheckMappingId
                                                 join bgCheckpkgDetail in objDecisionPointEntities.DP_BGCheckPackageDetailMaster
                                                on bgCheckDetailsMap.BGCheckPkgDetailId equals bgCheckpkgDetail.Id
                                                 where bgCheckmaster.BGCheckPkgId == objSterlingResponseParam.PackageId && bgCheckMap.UserId == objSterlingResponseParam.DpUserId
                                                 && bgCheckMap.CompanyId == objSterlingResponseParam.DpCompanyId && bgCheckpkgDetail.SterlingQualifier == objSterlingResponseParam.ScreenQualifier
                                                 select new { bgCheckMap, bgCheckDetailsMap }).ToList();
                        if (bgCheckPkgDetails.Count > 0)
                        {
                            foreach (var item in bgCheckPkgDetails)
                            {
                                if (string.Equals(objSterlingResponseParam.ScreenResultStatus, "Consider"))
                                {
                                    objSterlingResponseParam.ScreenResultStatus = Shared.Review;
                                }
                                else if (string.Equals(objSterlingResponseParam.ScreenResultStatus, "Clear"))
                                {
                                    objSterlingResponseParam.ScreenResultStatus = Shared.Pass;
                                }
                                item.bgCheckDetailsMap.Status = objSterlingResponseParam.ScreenResultStatus;
                            }
                        }
                    }

                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch (Exception)
            {

                throw;
            }
        }
        #endregion

        #region Check User Existence
        /// <summary>
        /// check user exists or not
        /// </summary>
        /// <param name="emailId">emailId</param>
        /// <param name="type">type</param>
        /// <returns>user type</returns>
        /// <createdby>sumit saurav</createdby>
        /// <createddate>29 july 2014</createddate>
        public string CheckUserExistence(string emailId, string type)
        {
            try
            {
                string result = string.Empty;
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (type.Equals(Shared.Staff))
                    {
                        var query = (from user in objDecisionPointEntities.DP_User
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on user.Id equals (profile.UserId)
                                     where user.EmailId == emailId && user.IsActive == true
                                     select profile.UserType).FirstOrDefault();
                        result = query;
                    }
                    else
                    {
                        var query = (from user in objDecisionPointEntities.DP_User
                                     join profile in objDecisionPointEntities.DP_Profile
                                     on user.Id equals (profile.UserId)
                                     where user.EmailId == emailId && user.IsActive == true && profile.UserType != type
                                     select profile.UserType).FirstOrDefault();
                        result = query;
                    }
                    return result;
                }

            }
            catch
            {
                throw;
            }
        }
        /// <summary>
        /// check user exists or not
        /// </summary>
        /// <param name="emailId">emailId</param>
        /// <param name="type">type</param>
        /// <returns>user type</returns>
        /// <createdby>Bobi</createdby>
        /// <createddate>30 Mar 2015</createddate>
        public string CheckUserEmailExistence(string emailId, int userId, string userType, string companyId)
        {
            try
            {
                string result = string.Empty;
                if (!string.IsNullOrEmpty(emailId))
                {
                    emailId = emailId.Trim();
                }
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    if (userType.Equals(Shared.Staff))
                    {
                        var staffDetails = (from user in objDecisionPointEntities.DP_User
                                            join profile in objDecisionPointEntities.DP_Profile
                                            on user.Id equals (profile.UserId)
                                            where user.EmailId == emailId && user.Id != userId
                                            select profile.UserType).FirstOrDefault();
                        result = staffDetails;
                    }
                    else if (userType.Equals(Shared.Company))
                    {
                        var vendorDetail = (from vendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                            join user in objDecisionPointEntities.DP_User
                                            on vendorMap.VendorId equals user.Id
                                            where vendorMap.CompanyId == companyId
                                            select user).ToList();
                        foreach (var item in vendorDetail)
                        {
                            if (!item.Id.Equals(userId))
                            {
                                if (item.EmailId.Equals(emailId))
                                {
                                    result = "Exist";
                                    break;
                                }
                            }
                        }
                        var vendorDetails = (from user in objDecisionPointEntities.DP_User
                                             join profile in objDecisionPointEntities.DP_Profile
                                             on user.Id equals (profile.UserId)
                                             where user.EmailId == emailId && user.Id != userId && profile.UserType != userType
                                             select profile.UserType).FirstOrDefault();
                        result = vendorDetails;
                    }
                }
                return result;


            }
            catch
            {
                throw;
            }
        }
        #endregion

        #region IC Approval LiIst
        public IList<ICResponseParam> GetICBackgroundReviewDetails(string companyId, int type, string filterTerm)
        {
            try
            {
                IList<ICResponseParam> finlaList = new List<ICResponseParam>();
                var icBackGroundReviewList = GetICBackgroundCompliance(companyId);
                var icProfLicList = GetICProfessionalCompliance(companyId);
                var icAdditionalReq = GetICAdditionalReqCompliance(companyId);
                var icInsuranceList = GetICInsuranceCompliance(companyId);
                var bgList = icBackGroundReviewList.Union(icProfLicList).Union(icAdditionalReq).Union(icInsuranceList).Distinct().ToList();
                var distictBGRecord = bgList.Select(x => new { x.Fname, x.Lname, x.BusinessName, x.EmailId, x.ICUserId, x.ICCompanyId, x.Mname, x.VTId, x.VType, x.Source, x.SterlingOrderId, x.LastInviteMailDate, x.IsRegistered }).Distinct().ToList();
                var filterBgList = distictBGRecord.Select(x => new ICResponseParam
                {
                    Fname = x.Fname,
                    Mname = x.Mname,
                    Lname = x.Lname,
                    BusinessName = x.BusinessName,
                    EmailId = x.EmailId,
                    VTId = x.VTId,
                    VType = x.VType,
                    ICUserId = x.ICUserId,
                    ICCompanyId = x.ICCompanyId,
                    Source = x.Source,
                    SterlingOrderId = x.SterlingOrderId,
                    LastInviteMailDate = x.LastInviteMailDate,
                    IsRegistered = x.IsRegistered
                }).Distinct().ToList();
                foreach (var item in filterBgList)
                {

                    var getStatus = bgList.Where(x => x.ICUserId == item.ICUserId).Select(x => x.BGStatus).ToList();
                    var chkPending = getStatus.Where(x => x == Shared.Pending).Count();
                    if (chkPending > 0)
                    {
                        finlaList.Add(SetICDetailInCollection(item, Shared.Pending));
                    }
                    else if (getStatus.Where(x => x == Shared.Consider).Count() > 0)
                    {
                        //finlaList.Add(SetICDetailInCollection(item, Shared.Review));
                        foreach (var status in getStatus)
                        {
                            finlaList.Add(SetICDetailInCollection(item, status));
                        }
                    }
                    else
                    {
                        //finlaList.Add(SetICDetailInCollection(item, Shared.Accepted));
                        foreach (var status in getStatus)
                        {
                            finlaList.Add(SetICDetailInCollection(item, status));
                        }

                    }
                }
                if (type.Equals(1))
                {
                    using (objDecisionPointEntities = new DecisionPointEntities())
                    {
                        var serachBystate = (from list in finlaList
                                             join state in objDecisionPointEntities.DP_StateMapping
                                                 on list.ICUserId equals state.UserId
                                             where (state.StateName.StartsWith(filterTerm) || state.StateAbbre.StartsWith(filterTerm))
                                             select list).ToList();
                        if (serachBystate.Count <= 0)
                        {
                            var serachByCounty = (from list in finlaList
                                                  join state in objDecisionPointEntities.DP_CountyMapping
                                                      on list.ICUserId equals state.UserId
                                                  where (state.CountyName.StartsWith(filterTerm))
                                                  select list).ToList();
                            if (serachByCounty.Count <= 0)
                            {
                                var serachByCity = (from list in finlaList
                                                    join state in objDecisionPointEntities.DP_CityMapping
                                                        on list.ICUserId equals state.UserId
                                                    where (state.CityName.StartsWith(filterTerm))
                                                    select list).ToList();
                                if (serachByCity.Count <= 0)
                                {
                                    var serachByZip = (from list in finlaList
                                                       join state in objDecisionPointEntities.DP_ZipMapping
                                                           on list.ICUserId equals state.UserId
                                                       where (state.ZipCode.StartsWith(filterTerm))
                                                       select list).ToList();
                                    finlaList = serachByZip;
                                }
                                else
                                {
                                    finlaList = serachByCity;
                                }
                            }
                            else
                            {
                                finlaList = serachByCounty;
                            }

                        }
                        else
                        {
                            finlaList = serachBystate;
                        }



                    }
                }
                return finlaList;
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// Used for Set the IC details with status in IC collection
        /// </summary>
        /// <param name="objFinalICResponseParam"></param>
        /// <param name="status"></param>
        /// <returns>ICResponseParam</returns>
        /// <Createdby>Bobi</Createdby>
        /// <CreatedDate>2 APr 2015</CreatedDate>
        private ICResponseParam SetICDetailInCollection(ICResponseParam objFinalICResponseParam, string status)
        {
            try
            {
                objICResponseParam = new ICResponseParam()
                {
                    Fname = objFinalICResponseParam.Fname,
                    Mname = objFinalICResponseParam.Mname,
                    Lname = objFinalICResponseParam.Lname,
                    BusinessName = objFinalICResponseParam.BusinessName,
                    EmailId = objFinalICResponseParam.EmailId,
                    VTId = objFinalICResponseParam.VTId,
                    VType = objFinalICResponseParam.VType,
                    ICUserId = objFinalICResponseParam.ICUserId,
                    ICCompanyId = objFinalICResponseParam.ICCompanyId,
                    Source = objFinalICResponseParam.Source,
                    BGStatus = status,
                    SterlingOrderId = objFinalICResponseParam.SterlingOrderId,
                    LastInviteMailDate = objFinalICResponseParam.LastInviteMailDate,
                    IsRegistered = objFinalICResponseParam.IsRegistered
                };
                return objICResponseParam;
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// get & set GetICBackgroundCompliance
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>IList<ICResponseParam></returns>
        /// <Createdby>Bobi</Createdby>
        /// <CreatedDate>2 APr 2015</CreatedDate>
        private IList<ICResponseParam> GetICBackgroundCompliance(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var icBackGroundReviewList = (from icBGReview in objDecisionPointEntities.DP_BGCheckMaster
                                                  join icBGMap in objDecisionPointEntities.DP_BGCheckMapping
                                                  on icBGReview.Id equals icBGMap.BGCheckId
                                                  join profile in objDecisionPointEntities.DP_Profile
                                                  on icBGMap.UserId equals profile.UserId
                                                  join user in objDecisionPointEntities.DP_User
                                                  on profile.UserId equals user.Id
                                                  join companyVendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                  on user.Id equals companyVendorMap.VendorId
                                                  join VTypeMapping in objDecisionPointEntities.DP_VendorTypeMapping
                                                  on user.Id equals VTypeMapping.UserId
                                                  join VTypeMaster in objDecisionPointEntities.DP_VendorType
                                                 on VTypeMapping.VendorTypeId equals VTypeMaster.Id
                                                  where icBGReview.CreatorCompanyId == companyId && VTypeMapping.CreaterCompanyId == companyId &&
                                                  VTypeMapping.IsDefault == true && icBGReview.IsDeleted == false && companyVendorMap.CompanyId == companyId
                                                  select new ICResponseParam
                                                  {
                                                      Fname = string.IsNullOrEmpty(profile.Firstname) ? string.Empty : profile.Firstname,
                                                      Mname = string.IsNullOrEmpty(profile.MiddelName) ? string.Empty : profile.MiddelName,
                                                      Lname = string.IsNullOrEmpty(profile.LastName) ? string.Empty : profile.LastName,
                                                      BusinessName = string.IsNullOrEmpty(profile.BusinessName) ? string.Empty : profile.BusinessName,
                                                      EmailId = string.IsNullOrEmpty(user.EmailId) ? string.Empty : user.EmailId,
                                                      VTId = (int)(VTypeMapping.VendorTypeId == null ? 0 : VTypeMapping.VendorTypeId),
                                                      VType = VTypeMaster.VendorType,
                                                      ICUserId = icBGMap.UserId,
                                                      ICCompanyId = icBGMap.CompanyId,
                                                      BGStatus = user.IsRegistered ? icBGMap.Status == Shared.Pending ? "In Progress" : icBGMap.Status == Shared.Pass ? Shared.Accepted : icBGMap.Status : Shared.Pending,
                                                      Source = icBGReview.Source,
                                                      SterlingOrderId = icBGMap.SterlingOrderId,
                                                      LastInviteMailDate = companyVendorMap.LastInvitationDate,
                                                      IsRegistered = user.IsRegistered
                                                  }).Distinct().ToList();

                    return icBackGroundReviewList;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// get & set GetICProfessionalCompliance
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>IList<ICResponseParam></returns>
        /// <Createdby>Bobi</Createdby>
        /// <CreatedDate>2 APr 2015</CreatedDate>
        private IList<ICResponseParam> GetICProfessionalCompliance(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var icProfLicList = (from icBGReview in objDecisionPointEntities.DP_ProfessionalLicenseMaster
                                         join icBGMap in objDecisionPointEntities.DP_ProfessionalLicenseMapping
                                         on icBGReview.Id equals icBGMap.ProfLiceId
                                         join profile in objDecisionPointEntities.DP_Profile
                                         on icBGMap.UserId equals profile.UserId
                                         join user in objDecisionPointEntities.DP_User
                                         on profile.UserId equals user.Id
                                         join companyVendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                  on user.Id equals companyVendorMap.VendorId
                                         join VTypeMapping in objDecisionPointEntities.DP_VendorTypeMapping
                                         on user.Id equals VTypeMapping.UserId
                                         join VTypeMaster in objDecisionPointEntities.DP_VendorType
                                        on VTypeMapping.VendorTypeId equals VTypeMaster.Id
                                         where icBGReview.CreatorCompanyId == companyId && VTypeMapping.CreaterCompanyId == companyId &&
                                         VTypeMapping.IsDefault == true && icBGReview.IsDeleted == false && companyVendorMap.CompanyId == companyId
                                         select new ICResponseParam
                                         {
                                             Fname = string.IsNullOrEmpty(profile.Firstname) ? string.Empty : profile.Firstname,
                                             Mname = string.IsNullOrEmpty(profile.MiddelName) ? string.Empty : profile.MiddelName,
                                             Lname = string.IsNullOrEmpty(profile.LastName) ? string.Empty : profile.LastName,
                                             BusinessName = string.IsNullOrEmpty(profile.BusinessName) ? string.Empty : profile.BusinessName,
                                             EmailId = string.IsNullOrEmpty(user.EmailId) ? string.Empty : user.EmailId,
                                             VTId = (int)(VTypeMapping.VendorTypeId == null ? 0 : VTypeMapping.VendorTypeId),
                                             VType = VTypeMaster.VendorType,
                                             ICUserId = icBGMap.UserId,
                                             ICCompanyId = icBGMap.CompanyId,
                                             BGStatus = user.IsRegistered ? icBGMap.Status == Shared.Pending ? "In Progress" : icBGMap.Status : Shared.Pending,
                                             Source = icBGReview.Source,
                                             SterlingOrderId = icBGMap.SterlingOrderId,
                                             LastInviteMailDate = companyVendorMap.LastInvitationDate,
                                             IsRegistered = user.IsRegistered
                                         }).Distinct().ToList();

                    return icProfLicList;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// get & set GetICAdditionalReqCompliance
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>IList<ICResponseParam></returns>
        /// <Createdby>Bobi</Createdby>
        /// <CreatedDate>2 APr 2015</CreatedDate>
        private IList<ICResponseParam> GetICAdditionalReqCompliance(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var icAdditionalReq = (from icBGReview in objDecisionPointEntities.DP_AdditionalReqMaster
                                           join icBGMap in objDecisionPointEntities.DP_AdditionalReqMapping
                                           on icBGReview.Id equals icBGMap.AddReqId
                                           join profile in objDecisionPointEntities.DP_Profile
                                           on icBGMap.UserId equals profile.UserId
                                           join user in objDecisionPointEntities.DP_User
                                           on profile.UserId equals user.Id
                                           join companyVendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                  on user.Id equals companyVendorMap.VendorId
                                           join VTypeMapping in objDecisionPointEntities.DP_VendorTypeMapping
                                           on user.Id equals VTypeMapping.UserId
                                           join VTypeMaster in objDecisionPointEntities.DP_VendorType
                                          on VTypeMapping.VendorTypeId equals VTypeMaster.Id
                                           where icBGReview.CreatorCompanyId == companyId && VTypeMapping.CreaterCompanyId == companyId &&
                                           VTypeMapping.IsDefault == true && icBGReview.IsDeleted == false && companyVendorMap.CompanyId == companyId
                                           select new ICResponseParam
                                           {
                                               Fname = string.IsNullOrEmpty(profile.Firstname) ? string.Empty : profile.Firstname,
                                               Mname = string.IsNullOrEmpty(profile.MiddelName) ? string.Empty : profile.MiddelName,
                                               Lname = string.IsNullOrEmpty(profile.LastName) ? string.Empty : profile.LastName,
                                               BusinessName = string.IsNullOrEmpty(profile.BusinessName) ? string.Empty : profile.BusinessName,
                                               EmailId = string.IsNullOrEmpty(user.EmailId) ? string.Empty : user.EmailId,
                                               VTId = (int)(VTypeMapping.VendorTypeId == null ? 0 : VTypeMapping.VendorTypeId),
                                               VType = VTypeMaster.VendorType,
                                               BGStatus = user.IsRegistered ? icBGMap.Status == Shared.Pending ? "In Progress" : icBGMap.Status : Shared.Pending,
                                               ICUserId = icBGMap.UserId,
                                               ICCompanyId = icBGMap.CompanyId,
                                               Source = "Other",
                                               SterlingOrderId = string.Empty,
                                               LastInviteMailDate = companyVendorMap.LastInvitationDate,
                                               IsRegistered = user.IsRegistered
                                           }).Distinct().ToList();

                    return icAdditionalReq;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        /// <summary>
        /// get & set GetICInsuranceCompliance
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>IList<ICResponseParam></returns>
        /// <Createdby>Bobi</Createdby>
        /// <CreatedDate>2 APr 2015</CreatedDate>
        private IList<ICResponseParam> GetICInsuranceCompliance(string companyId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var icInsuranceList = (from icBGReview in objDecisionPointEntities.DP_InsuranceMaster
                                           join icBGMap in objDecisionPointEntities.DP_InsuranceMapping
                                           on icBGReview.Id equals icBGMap.InsId
                                           join profile in objDecisionPointEntities.DP_Profile
                                           on icBGMap.UserId equals profile.UserId
                                           join user in objDecisionPointEntities.DP_User
                                           on profile.UserId equals user.Id
                                           join companyVendorMap in objDecisionPointEntities.DP_ComapnyVendorMapping
                                                  on user.Id equals companyVendorMap.VendorId
                                           join VTypeMapping in objDecisionPointEntities.DP_VendorTypeMapping
                                           on user.Id equals VTypeMapping.UserId
                                           join VTypeMaster in objDecisionPointEntities.DP_VendorType
                                          on VTypeMapping.VendorTypeId equals VTypeMaster.Id
                                           where icBGReview.CreatorCompanyId == companyId && VTypeMapping.CreaterCompanyId == companyId &&
                                           VTypeMapping.IsDefault == true && icBGReview.IsDeleted == false && companyVendorMap.CompanyId == companyId
                                           select new ICResponseParam
                                           {
                                               Fname = string.IsNullOrEmpty(profile.Firstname) ? string.Empty : profile.Firstname,
                                               Mname = string.IsNullOrEmpty(profile.MiddelName) ? string.Empty : profile.MiddelName,
                                               Lname = string.IsNullOrEmpty(profile.LastName) ? string.Empty : profile.LastName,
                                               BusinessName = string.IsNullOrEmpty(profile.BusinessName) ? string.Empty : profile.BusinessName,
                                               EmailId = string.IsNullOrEmpty(user.EmailId) ? string.Empty : user.EmailId,
                                               VTId = (int)(VTypeMapping.VendorTypeId == null ? 0 : VTypeMapping.VendorTypeId),
                                               VType = VTypeMaster.VendorType,
                                               BGStatus = user.IsRegistered ? icBGMap.Status == Shared.Pending ? "In Progress" : icBGMap.Status : Shared.Pending,
                                               ICUserId = icBGMap.UserId,
                                               ICCompanyId = icBGMap.CompanyId,
                                               Source = icBGReview.Source,
                                               SterlingOrderId = icBGMap.SterlingOrderId,
                                               LastInviteMailDate = companyVendorMap.LastInvitationDate,
                                               IsRegistered = user.IsRegistered
                                           }).Distinct().ToList();

                    return icInsuranceList;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }
        #endregion

        #region DeActivate
        /// <summary>
        /// Used for deactivate the user
        /// </summary>
        /// <param name="userId"></param>
        /// <returns>int</returns>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>11 Apr 2015</CreatedDate>
        public int DeactivateUser(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var userDetail = (from user in objDecisionPointEntities.DP_User
                                      where user.Id == userId
                                      select user).FirstOrDefault();
                    if (!object.Equals(userDetail, null))
                    {
                        userDetail.IsActive = false;
                    }
                    return objDecisionPointEntities.SaveChanges();
                }

            }
            catch (Exception)
            {

                throw;
            }
        }
        #endregion

        #region IC Prspective Clients
        /// <summary>
        /// used for get ic prspective clients list
        /// </summary>
        /// <returns>IEnumerable<VendorClientList></returns>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>14 Apr 2015</CreatedDate>
        public IEnumerable<VendorClientList> ICProspectiveClients()
        {
            IEnumerable<VendorClientList> icProspectiveClients = null;
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    icProspectiveClients = (from client in objDecisionPointEntities.DP_VendorTypeMapping
                                            join profile in objDecisionPointEntities.DP_Profile
                                            on client.UserId equals profile.UserId
                                            join user in objDecisionPointEntities.DP_User
                                            on profile.UserId equals user.Id
                                            where client.IsDefault == false
                                            select new VendorClientList
                                             {
                                                 Vendor = profile.BusinessName,
                                                 Contact = profile.Firstname + Shared.SingleSpace + profile.LastName,
                                                 emailId = user.EmailId,
                                                 phone = profile.CellNumber,
                                                 Id = user.Id,
                                                 companyId = user.CompanyId,
                                                 VendorTypeId = (int)(client.VendorTypeId == null ? 0 : client.VendorTypeId)
                                             }).Distinct().ToList().OrderBy(x => x.Contact);
                }
                return icProspectiveClients;
            }
            catch
            {
                throw;
            }
        }

        #endregion

        public bool GetIsBasicFreeForIC(int userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    return true;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        /// <summary>
        /// Ued to get Parent User Name
        /// </summary>
        /// <param name="companyId"></param>
        /// <returns>string</returns>
        /// <createdBy>Atul</createdBy>
        /// <createdDate>May 4 2015</createdDate>
        public string GetParentUserNameFromUserId(string userId)
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    int nuserId = Convert.ToInt32(userId, CultureInfo.InvariantCulture);
                    int? parentUserId = (from pUser in objDecisionPointEntities.DP_User
                                         where pUser.Id == nuserId
                                         select pUser.CreatedBy).FirstOrDefault<int?>();
                    var userName = (from user in objDecisionPointEntities.DP_User
                                    join profile in objDecisionPointEntities.DP_Profile
                                    on user.Id equals profile.UserId
                                    where user.Id == parentUserId
                                    select profile.Firstname + Shared.SingleSpace + profile.LastName).FirstOrDefault();
                    return userName;
                }
            }
            catch
            {
                throw;
            }
        }

        #region Business Class
        /// <summary>
        /// Used for get the list of Business Class
        /// </summary>
        /// <returns>List<BusinessClass></returns>
        /// <CreatedBy>Bobi</CreatedBy>
        /// <CreatedDate>12 may 2015</CreatedDate>
        public List<BusinessClassResponseParam> GetBusinessClass()
        {
            try
            {
                using (objDecisionPointEntities = new DecisionPointEntities())
                {
                    var businessClassDetails = (from businessClass in objDecisionPointEntities.DP_BusinessClasses
                                                where businessClass.IsDeleted == false
                                                select new BusinessClassResponseParam
                                                {
                                                    BusinessClass = businessClass.BusinessClass,
                                                    IsActive = businessClass.IsActive
                                                }).ToList();
                    return businessClassDetails;
                }
            }
            catch
            {
                throw;
            }
        }
        #endregion

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        private void Dispose(bool disposing)
        {
            if (_disposing)
            {
                return;
            }
            if (disposing)
            {
                if (objDecisionPointEntities != null)
                {
                    objDecisionPointEntities.Dispose();
                    objDecisionPointEntities = null;
                }
            }
            
            _disposing = true;
        }
    }

}





<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="incomming" xml:space="preserve">
    <value>incomming</value>
  </data>
  <data name="mycommunication" xml:space="preserve">
    <value>mycommunication</value>
  </data>
  <data name="staffcommunication" xml:space="preserve">
    <value>staffcommunication</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="WithID" xml:space="preserve">
    <value>WithID</value>
  </data>
  <data name="WithoutID" xml:space="preserve">
    <value>WithoutID</value>
  </data>
  <data name="colon" xml:space="preserve">
    <value>:</value>
  </data>
  <data name="completed" xml:space="preserve">
    <value>completed</value>
  </data>
  <data name="ConfirmPassword" xml:space="preserve">
    <value>Confirm Password Required.</value>
  </data>
  <data name="CorrectEmailId" xml:space="preserve">
    <value>Enter Correct Email Id.</value>
  </data>
  <data name="CsvHeaderNotMatch" xml:space="preserve">
    <value>CSV Column header not match.</value>
  </data>
  <data name="CsvNotMatch" xml:space="preserve">
    <value>CSV Column not match.</value>
  </data>
  <data name="EmailExist" xml:space="preserve">
    <value>Email Already Exists.</value>
  </data>
  <data name="EmailNotMatch" xml:space="preserve">
    <value>Email Id Not Matched.</value>
  </data>
  <data name="EmailRequired" xml:space="preserve">
    <value>Email Required.</value>
  </data>
  <data name="Fail" xml:space="preserve">
    <value>Fail</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>First Name Required</value>
  </data>
  <data name="IC" xml:space="preserve">
    <value>IC</value>
  </data>
  <data name="IncorrectPswd" xml:space="preserve">
    <value>The user name or password provided is incorrect.</value>
  </data>
  <data name="InvalidCsvFormat" xml:space="preserve">
    <value>Please Upload CSV Format File.</value>
  </data>
  <data name="InvalidEmailOldPswd" xml:space="preserve">
    <value>Invalid Email or Old Password.</value>
  </data>
  <data name="InvalidUserNamePassword" xml:space="preserve">
    <value>The user name or password provided is incorrect.</value>
  </data>
  <data name="InviteFilterIncoming" xml:space="preserve">
    <value>incoming</value>
  </data>
  <data name="InviteFilteroutgoing" xml:space="preserve">
    <value>outgoing</value>
  </data>
  <data name="InviteFilterremoved" xml:space="preserve">
    <value>removed</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>Last Name Required</value>
  </data>
  <data name="MailfooterInserted" xml:space="preserve">
    <value>Inserted Successfully..</value>
  </data>
  <data name="MailfooterUpdated" xml:space="preserve">
    <value>Updated Successfully..</value>
  </data>
  <data name="NoPayment" xml:space="preserve">
    <value>Payment Not Done.</value>
  </data>
  <data name="NotChangedPswd" xml:space="preserve">
    <value>Password Not Changed.</value>
  </data>
  <data name="NotRegistered" xml:space="preserve">
    <value>Registration Not Done.</value>
  </data>
  <data name="PaaswordNotMatch" xml:space="preserve">
    <value>Password Not Matched</value>
  </data>
  <data name="PasswordLength" xml:space="preserve">
    <value>Password minimum length should be 6 character.</value>
  </data>
  <data name="PasswordNotMatch" xml:space="preserve">
    <value>New Password should not match with old password.</value>
  </data>
  <data name="PasswordRules" xml:space="preserve">
    <value>Password should be alphanumeric with one special character.</value>
  </data>
  <data name="PasswordSent" xml:space="preserve">
    <value>Password Sent To Your Email.</value>
  </data>
  <data name="PaymentSuccess" xml:space="preserve">
    <value>Payment Sucessfull.</value>
  </data>
  <data name="RequireNewPassword" xml:space="preserve">
    <value>New Password Required.</value>
  </data>
  <data name="RequireOldPassword" xml:space="preserve">
    <value>Old Password Required.</value>
  </data>
  <data name="RequirePassword" xml:space="preserve">
    <value>Password Required.</value>
  </data>
  <data name="UploadCsv" xml:space="preserve">
    <value>Please Upload CSV File.</value>
  </data>
  <data name="UserExists" xml:space="preserve">
    <value>User with this Email not exists.</value>
  </data>
</root>